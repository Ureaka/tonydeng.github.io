<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TonyDeng&#39;s Blog</title>
  <subtitle>“In me the tiger sniffes the rose.” -- Siegfried Sasson</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tonydeng.github.io/"/>
  <updated>2016-07-16T10:46:15.000Z</updated>
  <id>http://tonydeng.github.io/</id>
  
  <author>
    <name>Tony Deng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>靠谱的产品经理之七字真言</title>
    <link href="http://tonydeng.github.io/2016/07/14/product-seven-words/"/>
    <id>http://tonydeng.github.io/2016/07/14/product-seven-words/</id>
    <published>2016-07-14T10:16:46.000Z</published>
    <updated>2016-07-16T10:46:15.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://image.woshipm.com/wp-files/2015/07/kaopu.jpg&quot; alt=&quot;怎样才算靠谱的产品经理&quot;&gt;&lt;/p&gt;
&lt;p&gt;工作那么多年，合作过的产品经理有很多，但是被我和工程师团队认为靠谱的产品经理却不多，工程师也经常吐槽产品经理不靠谱（貌似，我们之前合作过靠谱的产品经理女性居多，也不知道是什么原因……）。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;产品汪和程序猿之间的现状&quot;&gt;&lt;a href=&quot;#产品汪和程序猿之间的现状&quot; class=&quot;headerlink&quot; title=&quot;产品汪和程序猿之间的现状&quot;&gt;&lt;/a&gt;产品汪和程序猿之间的现状&lt;/h2&gt;&lt;p&gt;我们去通过Google或Baidu搜索关键词 “产品经理 程序员”，也经常出现如下的内容。&lt;/p&gt;
&lt;p&gt;比如，想不通的……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.wanho.net/data/upload/ueditor/56d65d9d43914.jpg&quot; alt=&quot;产品经理频繁改需求为什么会惹毛程序员？&quot;&gt;&lt;/p&gt;
&lt;p&gt;比如，比较暴力的……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.dongao.com/kjzx/UploadFiles_5705/201507/2015071016354845.png&quot; alt=&quot;产品经理改需求惨遭囚禁凌虐&quot;&gt;&lt;/p&gt;
&lt;p&gt;或者，如此求解的……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.dongao.com/kjzx/UploadFiles_5705/201507/2015071016360147.png&quot; alt=&quot;产品经理如何和程序员共处&quot;&gt;&lt;/p&gt;
&lt;p&gt;感觉整个互联网行业，甚至IT圈都在上演产品经理和程序员的“恩怨情仇”，堪比各大影院前段时间上映的迪斯尼大片《Zootopia》（疯狂动物城）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.woshipm.com/wp-content/uploads/2015/07/QQ20150717145729.png&quot; alt=&quot;产品经理和程序员的恩怨情仇&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;矛盾如何产生？&quot;&gt;&lt;a href=&quot;#矛盾如何产生？&quot; class=&quot;headerlink&quot; title=&quot;矛盾如何产生？&quot;&gt;&lt;/a&gt;矛盾如何产生？&lt;/h2&gt;&lt;p&gt;很多产品汪都经常会碰到这样的场景：&lt;/p&gt;
&lt;p&gt;一个非常复杂的产品设计终于加班加点的完成了，你满心欢喜的召集程序猿们开产品讨论会，但是过程中却备受打击，经常会碰到如下问题，而你还回答不出来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否要搜索？模糊搜索还是精确搜索？&lt;/li&gt;
&lt;li&gt;是否有翻页，每页显示多少条数据？&lt;/li&gt;
&lt;li&gt;能不能输入小数点、负数、字母？&lt;/li&gt;
&lt;li&gt;公式怎么算的？&lt;/li&gt;
&lt;li&gt;各种状态如何定义？如何转换状态？&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很郁闷的是上述问题，你在产品设计过程中，你根本没有考虑过这些问题，你一直在考虑如何来创建订单，应该让用户更简单的使用。而这些问题，你认为都是小问题，还需要我来考虑吗？&lt;/p&gt;
&lt;p&gt;这个会议的效果可想而知。&lt;/p&gt;
&lt;p&gt;程序猿们会认为这么长的时间了，你产品经理在想什么，这些都没有想明白，没干活啊！&lt;/p&gt;
&lt;p&gt;产品汪们会非常委屈，觉得程序猿是有意刁难自己。要么觉得这些问题难道不是应该程序猿考虑的吗？要么觉得，这些问题复杂想不清楚。&lt;/p&gt;
&lt;p&gt;最后会议草草收场，团队之间出现嫌隙。&lt;/p&gt;
&lt;p&gt;当产品汪把上述问题的答案整理完之后，再次召集程序猿们开产品讨论会，发现貌似还是会有类似的问题。&lt;/p&gt;
&lt;p&gt;哲人发出如此的感叹:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/seven-words/product-workshop.png&quot; alt=&quot;吐槽产品讨论会&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;慢慢的，产品汪和程序猿之间的情绪就越来越对立，对这个产品的热情也慢慢下降，更多的精力和时间都放在两边对耗上了，产品推行的非常之慢。&lt;/p&gt;
&lt;p&gt;直到Boos来过问产品的状况，只有互相推诿和指责。&lt;/p&gt;
&lt;h2 id=&quot;回顾矛盾的产生&quot;&gt;&lt;a href=&quot;#回顾矛盾的产生&quot; class=&quot;headerlink&quot; title=&quot;回顾矛盾的产生&quot;&gt;&lt;/a&gt;回顾矛盾的产生&lt;/h2&gt;&lt;p&gt;其实矛盾产生的根源在于我们在产品讨论会上碰到哪些可能答不出来的问题。&lt;/p&gt;
&lt;p&gt;那么，这些问题需要产品经理考虑吗？答案是显而易见的，产品经理必须要考虑这些问题、&lt;/p&gt;
&lt;p&gt;因为这些最基本的问题会影响到系统的设计，没有考虑到，意味着产品经理对于规划的产品可以做什么？如何做？能做到什么程度？没有概念，规划产品的可行性就会大打折扣。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/seven-words/upstream-and-downstream.png&quot; alt=&quot;产品流程的上下游&quot;&gt;&lt;/p&gt;
&lt;p&gt;一般产品研发的上下游基本上下图，程序猿处于产品汪的下游。&lt;/p&gt;
&lt;p&gt;一个没有概念，规划的产品设计，你让一个思维严谨的程序猿如何能接受？他们只会认为，产品经理不靠谱，这种不靠谱的需求只会导致如下情况：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果让这个产品通过了产品讨论阶段，那么他们只能为这个不靠谱的产品设计和产品经理买单，程序猿们会产生这样的想法： 我TMD就是那个“接盘侠”。&lt;br&gt;&lt;img src=&quot;http://www.cyxqd.com/wp-content/uploads/2014/01/jiepanxia.jpg&quot; alt=&quot;接盘侠&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; 产品汪们，你们也想想，你们愿意当这个接盘侠吗？ &lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决矛盾的办法&quot;&gt;&lt;a href=&quot;#解决矛盾的办法&quot; class=&quot;headerlink&quot; title=&quot;解决矛盾的办法&quot;&gt;&lt;/a&gt;解决矛盾的办法&lt;/h2&gt;&lt;p&gt;那么我们怎么来解决这些矛盾呢？&lt;/p&gt;
&lt;p&gt;产品如同人一样，有样貌、皮肤等外在结构，也有筋骨、神经网络等内在体系。在产品设计及规划中，产品汪除了要对UI、UE等外在负责以外，还需要对产品的筋骨、神经网络负责。&lt;/p&gt;
&lt;p&gt;产品的筋骨、神经网络就是产品隐含的逻辑规则，才是产品运转正常的保证。&lt;/p&gt;
&lt;p&gt;我们推出一个产品，一般要解决两类问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;人的问题，业务的问题&lt;/li&gt;
&lt;li&gt;计算机的问题，也就是技术的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那我们设计一个产品，不管我们想的如何天马行空，如何炫酷，也一定要通过一整套的IT系统来支撑。而IT系统本质上就是对数据的各种处理，各种状态流转，使用了各种形态来展示这些数据和状态流转。&lt;/p&gt;
&lt;p&gt;而产品汪一般的产品设计思路都是按照人的思维模式来进行设计的，但是人本身就是一种适配功能很强的“适配器”，人可以对模糊的信息做出自己的补充，完善自己对这个模糊的信息补充，并作出自己的反应。&lt;/p&gt;
&lt;p&gt;但是计算机并非如此，比如，我们进出地铁，站在扶梯上，会有语音提示“上下楼梯，请握紧扶手”。我们很容易理解这个句话，并作出自己适当的反应，来握紧扶手。&lt;/p&gt;
&lt;p&gt;但是计算机如何来理解？用手施加10牛顿的力吗？&lt;/p&gt;
&lt;p&gt;那产品汪在做产品设计时，&lt;strong&gt;是否要考虑到如何来定义这个“紧”？！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那很多产品汪就非常郁闷的说，这么多的问题，怎么样才能够都考虑到呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images.rednet.cn/articleimage/2006/07/29/104016572.jpg&quot; alt=&quot;我们不专业&quot;&gt;&lt;/p&gt;
&lt;p&gt;那怎么办呢？我们是不是需要进修一下呢？比如学星爷研读的秘籍《产品狗的自我修养》。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.woshipm.com/wp-files/2015/07/chanpingou.jpg&quot; alt=&quot;产品狗的自我修养&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实，我们并不需要研读那么深刻的著作，其实我们只要掌握了产品设计的&lt;strong&gt;七字真言&lt;/strong&gt;，基本上也程序猿的在产品讨论会上碰到的问题就能解决的差不多了。&lt;/p&gt;
&lt;h2 id=&quot;七字真言&quot;&gt;&lt;a href=&quot;#七字真言&quot; class=&quot;headerlink&quot; title=&quot;七字真言&quot;&gt;&lt;/a&gt;七字真言&lt;/h2&gt;&lt;p&gt;很多人看到“七字真言”的第一反应可能是这样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/seven-words/seven.png&quot; alt=&quot;七字真言&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实产品设计的七字真言就是增 、删、改、查、显、算、 传&lt;/p&gt;
&lt;p&gt;所有的产品设计，本质上都是对于一些数据、内容、结构层、信息做一些交互，这是产品的本质。&lt;/p&gt;
&lt;h3 id=&quot;增&quot;&gt;&lt;a href=&quot;#增&quot; class=&quot;headerlink&quot; title=&quot;增&quot;&gt;&lt;/a&gt;增&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;增加按钮的样式、位置&lt;/li&gt;
&lt;li&gt;增加按钮的文案：添加、创建、新建？&lt;/li&gt;
&lt;li&gt;增加内容的字段&lt;/li&gt;
&lt;li&gt;字段的必填非必填说明&lt;/li&gt;
&lt;li&gt;字段的验证、提示说明&lt;/li&gt;
&lt;li&gt;界面排列的说明&lt;/li&gt;
&lt;li&gt;弹窗还是当前页跳转？&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;删&quot;&gt;&lt;a href=&quot;#删&quot; class=&quot;headerlink&quot; title=&quot;删&quot;&gt;&lt;/a&gt;删&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;删除按钮的样式、位置&lt;/li&gt;
&lt;li&gt;删除案例的文案： 删除&lt;/li&gt;
&lt;li&gt;删除时是否要确认？确认窗口的样式&lt;/li&gt;
&lt;li&gt;删除完以后界面布局的变化&lt;/li&gt;
&lt;li&gt;逻辑删除&lt;/li&gt;
&lt;li&gt;物理删除&lt;/li&gt;
&lt;li&gt;删除之后是否会影响到其他的功能模块？&lt;/li&gt;
&lt;li&gt;…….&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;改&quot;&gt;&lt;a href=&quot;#改&quot; class=&quot;headerlink&quot; title=&quot;改&quot;&gt;&lt;/a&gt;改&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;编辑按钮的样式、位置&lt;/li&gt;
&lt;li&gt;编辑按钮的文案： 修改、编辑？&lt;/li&gt;
&lt;li&gt;弹窗还是当前页面跳转？&lt;/li&gt;
&lt;li&gt;可以修改与不可修改的说明&lt;/li&gt;
&lt;li&gt;更改数据之后，对其他功能模块的影响&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;查&quot;&gt;&lt;a href=&quot;#查&quot; class=&quot;headerlink&quot; title=&quot;查&quot;&gt;&lt;/a&gt;查&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;按照哪些字段进行排序？&lt;/li&gt;
&lt;li&gt;搜索框：需要对哪些进行搜索？是否可以组合搜索？搜索后的界面如何程序？模糊搜索还是精确搜索？&lt;/li&gt;
&lt;li&gt;搜索结果的展示如何？是否和搜索条件有关系？&lt;/li&gt;
&lt;li&gt;搜索条件之间是否有冲突？&lt;/li&gt;
&lt;li&gt;查不到数据该如何？&lt;/li&gt;
&lt;li&gt;需要查看哪些数据？&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;一般来说，产品经理做到以上四点就能把原型做的非常完善，例如数据做成了列表样式，是否考虑了分页？是否需要排序？排序的话按什么条件进行？排序满足不了需求的话是否需要搜索框？查询框？查看详细列表的打开方式是怎么样的？本页操作还是新窗口操作？跳转之后需不需要跳回来？选择数据支持单选还是多选？单选的话是用下拉还是radio？如此等等&lt;/p&gt;
&lt;p&gt;细节交代的越清楚，和程序猿的沟通成本就越小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;显&quot;&gt;&lt;a href=&quot;#显&quot; class=&quot;headerlink&quot; title=&quot;显&quot;&gt;&lt;/a&gt;显&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;页面内容的布局&lt;/li&gt;
&lt;li&gt;每页多少条数据、数据的排序？&lt;/li&gt;
&lt;li&gt;是否有翻页、翻页样式如何？&lt;/li&gt;
&lt;li&gt;是否提供查看详情，如何查看？&lt;/li&gt;
&lt;li&gt;查看是弹窗还是当前页打开，还是新页面？&lt;/li&gt;
&lt;li&gt;如何从各个操作页面跳转回原页面的方法？&lt;/li&gt;
&lt;li&gt;跳转回来的页面如何显示？&lt;/li&gt;
&lt;li&gt;不同权限用户的数据展示是否有不同？展现规则是怎么样的？&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;算&quot;&gt;&lt;a href=&quot;#算&quot; class=&quot;headerlink&quot; title=&quot;算&quot;&gt;&lt;/a&gt;算&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;计算规则&lt;/li&gt;
&lt;li&gt;页面公式、特定指标的计算规则&lt;/li&gt;
&lt;li&gt;数据背后的逻辑&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;传&quot;&gt;&lt;a href=&quot;#传&quot; class=&quot;headerlink&quot; title=&quot;传&quot;&gt;&lt;/a&gt;传&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;不同用户之间、不同操作之间传递哪些数据？哪些字段？&lt;/li&gt;
&lt;li&gt;需要提供哪些API的接口？整合其他第三方系统时，他们提供的API是否能够满足我们现有需求？&lt;/li&gt;
&lt;li&gt;数据的流向规则&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每当我们在做产品设计的时候，都在心里默念着七个字，基本上设计出来的产品功能点就都覆盖到了，省去了产品讨论和产品研发过程中很多不必要的沟通、交流和冲突。&lt;/p&gt;
&lt;p&gt;有一个比喻非常好，“产品是孩子，开发是妈妈，产品经理是爸爸，测试时医生”，&lt;strong&gt;We are 伐木累！&lt;/strong&gt;，产品汪，你们觉得呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.android100.org/uploadfile/2015/0829/20150829004427_0.gif&quot; alt=&quot;we are 伐木累&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后说一句，不管怎么样，各位产品汪们，需要对产品经理本身的职责要搞清楚，如果你短时间内不能达到产品经理本身应该具备的素质，那你就应该努力提高自己对产品设计和产品经理职责的理解，good good study,day day up！并且，要发挥自己的亲和力将整个团队的各个成员的长处组合起来，一起完成一个满意的产品。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.woshipm.com/wp-files/2015/07/QQ20150727200359.png&quot; alt=&quot;任何不能杀了我的只会让我更强&quot;&gt;&lt;/p&gt;
&lt;p&gt;另外，程序猿们也不要太过难为产品汪，大家都是在一个团队工作，为了同一个目标而努力，能够互相支持，互相补位的就多多支持和补位。毕竟大家也都是在&lt;strong&gt;同一个马勺里喝水&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.yixieshi.com/uploads/allimg/140525/1-14052520102TZ.jpg&quot; alt=&quot;同一个马勺里喝水&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.woshipm.com/wp-files/2015/07/kaopu.jpg&quot; alt=&quot;怎样才算靠谱的产品经理&quot;&gt;&lt;/p&gt;
&lt;p&gt;工作那么多年，合作过的产品经理有很多，但是被我和工程师团队认为靠谱的产品经理却不多，工程师也经常吐槽产品经理不靠谱（貌似，我们之前合作过靠谱的产品经理女性居多，也不知道是什么原因……）。&lt;br&gt;
    
    </summary>
    
      <category term="产品设计" scheme="http://tonydeng.github.io/categories/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="product" scheme="http://tonydeng.github.io/tags/product/"/>
    
  </entry>
  
  <entry>
    <title>黑客的统计学</title>
    <link href="http://tonydeng.github.io/2016/07/12/statistics-for-hackers/"/>
    <id>http://tonydeng.github.io/2016/07/12/statistics-for-hackers/</id>
    <published>2016-07-12T08:45:38.000Z</published>
    <updated>2016-07-12T16:36:39.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/statistics-for-hackers.png&quot; alt=&quot;statistics for hackers&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近看到一个题为&lt;a href=&quot;https://speakerdeck.com/jakevdp/statistics-for-hackers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Statistics for Hackers》&lt;/a&gt;(黑客的统计学)的PPT，非常有意思，和大家分享一下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/hackers.png&quot; alt=&quot;黑客不是窃贼&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这儿的Hacker（黑客）并不是是指那些尝试窃取你银行密码的人，而是那些善用编程来解决问题的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者&lt;a href=&quot;https://twitter.com/jakevdp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jake VanderPlas&lt;/a&gt;是华盛顿大学的资深数学科学研究员，他在PPT中表示统计学很难，但是使用编程技能后，它也可以很简单，他深圳宣称： 只要你会写 &lt;code&gt;for&lt;/code&gt; 循环，你就能做统计。&lt;/p&gt;
&lt;p&gt;最重要的是： &lt;strong&gt;问正确的问题&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-热身：-抛硬币问题（直接模拟）&quot;&gt;&lt;a href=&quot;#1-热身：-抛硬币问题（直接模拟）&quot; class=&quot;headerlink&quot; title=&quot;1. 热身： 抛硬币问题（直接模拟）&quot;&gt;&lt;/a&gt;1. 热身： 抛硬币问题（直接模拟）&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/coin-problem.png&quot; alt=&quot;硬币问题&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题： 你抛一个硬币30次，其中22次正面朝上。问这个硬币是均匀的吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/coin-dispute.png&quot; alt=&quot;硬币问题争执&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是一个经典的问题。有人认为均匀的硬币抛 30 次应该有 15 次朝上，所以这个硬币不均匀，也有人认为即使是均匀的硬币也有可能因为偶然而抛出 22 次朝上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/coin-solution.png&quot; alt=&quot;硬币问题解法&quot;&gt;&lt;/p&gt;
&lt;p&gt;经典的解法如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设硬币是均匀的，然后验证这个原假设，计算一个均匀的硬币抛出 22 次正面的概率是多少?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开始计算，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/coin-expressions.png&quot; alt=&quot;硬币问题解法公式&quot;&gt;&lt;/p&gt;
&lt;p&gt;列出公式后，计算得知如果硬币是均匀的，那么抛 30 次并且有 22 次正面朝上的概率是 0.008，或者说如果抛 30 次并且观察到 22 次正面朝上，则这枚硬币是均匀的概率为 0.008。这个 0.008 一般称为 p 值，习惯上，当 p 值小于 0.05（有些时候取 0.01）时，我们认为这件事是不太可能发生的，因此拒绝原假设，即得到结论：硬币不是均匀的。&lt;/p&gt;
&lt;p&gt;那么，是否有什么简单的方法呢？&lt;/p&gt;
&lt;p&gt;这时，编程方法就可以派上用场了，我们只需要模拟一下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; randint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;N = &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(N):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trials = (randint(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sum(trials) &amp;gt;= &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		M += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = M / N &lt;span class=&quot;comment&quot;&gt;#0.00819&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结论： 由于 p = 0.008，拒绝原假设，硬币不是均匀的。&lt;/p&gt;
&lt;p&gt;简单来说，计算样板分别比较困难，但模拟样本分布很简单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/coin-ultimateness.png&quot; alt=&quot;硬币问题解法公式&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-随机打乱&quot;&gt;&lt;a href=&quot;#2-随机打乱&quot; class=&quot;headerlink&quot; title=&quot;2. 随机打乱&quot;&gt;&lt;/a&gt;2. 随机打乱&lt;/h2&gt;&lt;p&gt;观察两组数据：&lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th colspan=&quot;2&quot;&gt;★&lt;/th&gt;&lt;th colspan=&quot;2&quot;&gt;✖︎&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;84&lt;/td&gt;&lt;td&gt;72&lt;/td&gt;&lt;td&gt;81&lt;/td&gt;&lt;td&gt;69&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;57&lt;/td&gt;&lt;td&gt;46&lt;/td&gt;&lt;td&gt;74&lt;/td&gt;&lt;td&gt;61&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;63&lt;/td&gt;&lt;td&gt;76&lt;/td&gt;&lt;td&gt;56&lt;/td&gt;&lt;td&gt;87&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;99&lt;/td&gt;&lt;td&gt;91&lt;/td&gt;&lt;td&gt;69&lt;/td&gt;&lt;td&gt;65&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;  &lt;/td&gt;&lt;td&gt;  &lt;/td&gt;&lt;td&gt;66&lt;/td&gt;&lt;td&gt;44&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;  &lt;/td&gt;&lt;td&gt;  &lt;/td&gt;&lt;td&gt;62&lt;/td&gt;&lt;td&gt;69&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;★ 均值：73.5&lt;br&gt;✖︎ 均值：66.9&lt;br&gt;差异：6.6&lt;/p&gt;
&lt;p&gt;问题来了：两组数据的差异 6.6 是统计显著的吗？&lt;/p&gt;
&lt;p&gt;经典解法如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/welch-ultimateness-1.png&quot; alt=&quot;welch-ultimateness-1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/welch-ultimateness-2.png&quot; alt=&quot;welch-ultimateness-2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/welch-ultimateness-3.png&quot; alt=&quot;welch-ultimateness-3&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/welch-ultimateness-4.png&quot; alt=&quot;welch-ultimateness-4&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/welch-ultimateness-5.png&quot; alt=&quot;welch-ultimateness-5&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后查表，可得：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/welch-ultimateness-result.png&quot; alt=&quot;welch-ultimateness-result&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于 t = 0.932 &amp;gt; tcrit = 1.796，所以我们得到结论：在 p = 0.05 的水平上差异 6.6 不是显著的。&lt;/p&gt;
&lt;p&gt;所以……，我们刚刚究竟都做了些什么？最大的问题，是我们在解题过程中已经忘了我们最初要回答的问题。&lt;/p&gt;
&lt;p&gt;为什么不直接使用流行的编程方法来处理呢？比如：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; statsmodels.stats.weightstats &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ttest_indt, p, dof = ttest_ind(group1, group2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				alternative=&lt;span class=&quot;string&quot;&gt;&#39;larger&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				usevar=&lt;span class=&quot;string&quot;&gt;&#39;unequal&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(p)  &lt;span class=&quot;comment&quot;&gt;# 0.186&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这当然可以，但是……，我们正尝试回答的是什么问题呢？&lt;/p&gt;
&lt;p&gt;让我们回到问题本身，上面的样本分布和抛硬币的原理其实是一样的，让我们用一个抽样方法来处理。和抛硬币不同，这儿我们没有生成器（模拟抛硬币的结果），但这不是问题，我们可以引入一个新的解决方案：随机打乱（Shuffling）。&lt;/p&gt;
&lt;p&gt;过程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/welch-ultimateness-result.gif&quot; alt=&quot;welch-ultimateness-result&quot;&gt;&lt;/p&gt;
&lt;p&gt;执行数千次，最后得到结论：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/welch-ultimateness.png&quot; alt=&quot;welch-ultimateness&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 p = 0.05 的水平上，差异 6.6 不是显著的。&lt;/p&gt;
&lt;h3 id=&quot;关于随机打乱需要注意的事：&quot;&gt;&lt;a href=&quot;#关于随机打乱需要注意的事：&quot; class=&quot;headerlink&quot; title=&quot;关于随机打乱需要注意的事：&quot;&gt;&lt;/a&gt;关于随机打乱需要注意的事：&lt;/h3&gt;&lt;p&gt;– 只能在原假设认为两组相同时使用&lt;br&gt;– 和所有其他方法一样，只能在样本有代表性时使用，千万要注意选择偏差&lt;br&gt;– 要注意相关实验。这点在《Simon’s Resampling: The New Statistics》一书中有很好的讨论 &lt;/p&gt;
&lt;h2 id=&quot;3-亚特尔的乌龟塔&quot;&gt;&lt;a href=&quot;#3-亚特尔的乌龟塔&quot; class=&quot;headerlink&quot; title=&quot;3. 亚特尔的乌龟塔&quot;&gt;&lt;/a&gt;3. 亚特尔的乌龟塔&lt;/h2&gt;&lt;p&gt;亚特尔的乌龟塔是一则童话寓言，讲述的是一只叫亚特尔的乌龟命令其他乌龟叠在一起成为高塔的故事，知名中文博主&lt;a href=&quot;http://www.ruanyifeng.com/blog/2005/08/post_142.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰曾经翻译过一个版本&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/the-tortoise-tower-of-atlantis.jpg&quot; alt=&quot;The tortoise tower of Atlantis&quot;&gt;&lt;/p&gt;
&lt;p&gt;假设我们观察到了 20 个亚特尔乌龟塔，高度分别为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;48&lt;/th&gt;
&lt;th&gt;24&lt;/th&gt;
&lt;th&gt;32&lt;/th&gt;
&lt;th&gt;61&lt;/th&gt;
&lt;th&gt;51&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;32&lt;/th&gt;
&lt;th&gt;18&lt;/th&gt;
&lt;th&gt;19&lt;/th&gt;
&lt;th&gt;24&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;问题是：&lt;br&gt;– 亚特尔乌龟塔的平均高度是多少？&lt;br&gt;– 这个估值有多少偏差？&lt;/p&gt;
&lt;p&gt;需要注意的是，这儿问的是全体亚特尔乌龟塔的平均高度，即可能存在成千上万个乌龟塔，我们只观察了其中 20 个样本，并对整体均值进行估计，而不是简单地问这 20 个样本的均值，所以才有第二个问题：这个估值有多少偏差。&lt;/p&gt;
&lt;p&gt;经典解法如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/tortoise-tower-ultimateness.jpg&quot; alt=&quot;tortoise-tower-ultimateness&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么，我们是否可以使用抽样方法来处理这个问题呢？和之前一样，我们的问题是没有生成器，这次的解决方案是自助重抽样法（Bootstrap Resampling）。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/bootstrap-resampling.gif&quot; alt=&quot;Bootstrap Resampling&quot;&gt;&lt;/p&gt;
&lt;p&gt;简单来说，就是从现有的 20 个样本中，随机抽取 20 个值（抽完后放回去，因此可能会抽到重复的值），然后计算新样本的均值。&lt;/p&gt;
&lt;p&gt;重复这个步骤成千上万次，最后，我们得到下面的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/sfh/tortoise-tower-result.jpg&quot; alt=&quot;tortoise-tower-result&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，与上面使用公式计算出的结果几乎一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 自助重抽样法（Bootstrap Sampling）&lt;/strong&gt; 甚至还可以用在更复杂的统计上，同样的，也有一些注意点：&lt;/p&gt;
&lt;p&gt;– 自助重抽样法（Bootstrap Sampling）被认真地研究过，有坚实的理论基础&lt;br&gt;– 自助重抽样法通常不太适用于基于排序的统计（如求最大值）&lt;br&gt;– 如果样本太小，效果会比较差（N &amp;gt; 20 比较好）&lt;br&gt;– 注意选择偏差以及非独立数据 &lt;/p&gt;
&lt;h2 id=&quot;4-交叉验证&quot;&gt;&lt;a href=&quot;#4-交叉验证&quot; class=&quot;headerlink&quot; title=&quot;4. 交叉验证&quot;&gt;&lt;/a&gt;4. 交叉验证&lt;/h2&gt;&lt;p&gt;最后，PPT 中还举了一个交叉验证的例子。大致思想是将样本随机分为两部分，各自算出需要的值，然后用另一份样本来校验当前样本的值。重复成千上万次，最后得到可信的结果。限于篇幅，这儿就不详细介绍了，有兴趣的同学可以直接看原 &lt;a href=&quot;https://speakerdeck.com/jakevdp/statistics-for-hackers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PPT&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;相对抽象的统计学公式而言，抽样方法是一种更符合直觉的计算近似法。只要会写 &lt;code&gt;for&lt;/code&gt; 循环，就可以做统计分析。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/jakevdp/statistics-for-hackers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Statistics for Hackers》&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/sfh/statistics-for-hackers.png&quot; alt=&quot;statistics for hackers&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近看到一个题为&lt;a href=&quot;https://speakerdeck.com/jakevdp/statistics-for-hackers&quot;&gt;《Statistics for Hackers》&lt;/a&gt;(黑客的统计学)的PPT，非常有意思，和大家分享一下。&lt;/p&gt;
    
    </summary>
    
      <category term="效率" scheme="http://tonydeng.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="statistics" scheme="http://tonydeng.github.io/tags/statistics/"/>
    
      <category term="hacker" scheme="http://tonydeng.github.io/tags/hacker/"/>
    
  </entry>
  
  <entry>
    <title>使用 lsof 代替 Mac OS X 中的 netstat 查看占用端口的程序</title>
    <link href="http://tonydeng.github.io/2016/07/07/use-lsof-to-replace-netstat/"/>
    <id>http://tonydeng.github.io/2016/07/07/use-lsof-to-replace-netstat/</id>
    <published>2016-07-07T05:06:48.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;众所周知水果系统内核是有 BSD 血统的 &lt;code&gt;Darwin&lt;/code&gt;，OS X 自带的很多 CLI 工具也是 BSD style 的，有一部分使用起来和 Linux 无异，有一部分可以通过 &lt;code&gt;brew&lt;/code&gt; 安装 GNU 版本（如 &lt;code&gt;tar&lt;/code&gt;），但是 OS X 的 &lt;code&gt;netstat&lt;/code&gt; 不能查看使用端口的程序名让我一直很不爽，而且也没找到 GNU 版本，于是去搜了一下解决办法，stackoverflow 上的结论基本都是建议使用 &lt;code&gt;lsof&lt;/code&gt; 代替 &lt;code&gt;netstat&lt;/code&gt; 进行查看：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo lsof -nP -&lt;span class=&quot;string&quot;&gt;iTCP:&lt;/span&gt;端口号 -&lt;span class=&quot;string&quot;&gt;sTCP:&lt;/span&gt;LISTEN&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;-n 表示不显示主机名&lt;/li&gt;
&lt;li&gt;-P 表示不显示端口俗称&lt;/li&gt;
&lt;li&gt;不加 sudo 只能查看以当前用户运行的程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，还可以通过管道来过滤想要的信息&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo lsof -nP -iTCP -sTCP:LISTEN | &lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;基本效果如下：&lt;/p&gt;
&lt;p&gt;查看当前所有监听的端口以及对应的&lt;code&gt;Command&lt;/code&gt;和&lt;code&gt;PID&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~ lsof -nP -iTCP -sTCP:LISTEN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COMMAND    PID     &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt;   &lt;span class=&quot;title&quot;&gt;FD&lt;/span&gt;   &lt;span class=&quot;keyword&quot;&gt;TYPE&lt;/span&gt;             DEVICE SIZE/OFF &lt;span class=&quot;keyword&quot;&gt;NODE&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NAME&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SSH\x20Pr &lt;span class=&quot;number&quot;&gt;1553&lt;/span&gt; tonydeng    &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;u  IPv4 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;xee7327e39355d175      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;t0  TCP &lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;8087&lt;/span&gt; (LISTEN)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SSH\x20Pr &lt;span class=&quot;number&quot;&gt;1553&lt;/span&gt; tonydeng    &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;u  IPv6 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;xee7327e38aad6e15      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;t0  TCP [::&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]:&lt;span class=&quot;number&quot;&gt;8087&lt;/span&gt; (LISTEN)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java      &lt;span class=&quot;number&quot;&gt;2978&lt;/span&gt; tonydeng  &lt;span class=&quot;number&quot;&gt;166&lt;/span&gt;u  IPv6 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;xee7327e38aad7e35      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;t0  TCP *:&lt;span class=&quot;number&quot;&gt;62622&lt;/span&gt; (LISTEN)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;node&lt;/span&gt;      &lt;span class=&quot;title&quot;&gt;3319&lt;/span&gt; tonydeng   &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;u  IPv4 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;xee7327e39f0f8745      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;t0  TCP *:&lt;span class=&quot;number&quot;&gt;4000&lt;/span&gt; (LISTEN)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看指定端口对应的&lt;code&gt;Command&lt;/code&gt;和&lt;code&gt;PID&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~ lsof -nP -iTCP:&lt;span class=&quot;number&quot;&gt;4000&lt;/span&gt; -sTCP:LISTEN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COMMAND  PID     &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt;   &lt;span class=&quot;title&quot;&gt;FD&lt;/span&gt;   &lt;span class=&quot;keyword&quot;&gt;TYPE&lt;/span&gt;             DEVICE SIZE/OFF &lt;span class=&quot;keyword&quot;&gt;NODE&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NAME&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;node&lt;/span&gt;    &lt;span class=&quot;title&quot;&gt;3319&lt;/span&gt; tonydeng   &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;u  IPv4 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;xee7327e39f0f8745      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;t0  TCP *:&lt;span class=&quot;number&quot;&gt;4000&lt;/span&gt; (LISTEN)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS ： 输出占用该端口的 PID&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;lsof&lt;/span&gt; -nP -iTCP:&lt;span class=&quot;number&quot;&gt;4000&lt;/span&gt; |grep LISTEN|awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;;&amp;#125;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知水果系统内核是有 BSD 血统的 &lt;code&gt;Darwin&lt;/code&gt;，OS X 自带的很多 CLI 工具也是 BSD style 的，有一部分使用起来和 Linux 无异，有一部分可以通过 &lt;code&gt;brew&lt;/code&gt; 安装 GNU 版本（如 &lt;code&gt;tar&lt;/code&gt;），但是 OS X 的 &lt;code&gt;netstat&lt;/code&gt; 不能查看使用端口的程序名让我一直很不爽，而且也没找到 GNU 版本，于是去搜了一下解决办法，stackoverflow 上的结论基本都是建议使用 &lt;code&gt;lsof&lt;/code&gt; 代替 &lt;code&gt;netstat&lt;/code&gt; 进行查看：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo lsof -nP -&lt;span class=&quot;string&quot;&gt;iTCP:&lt;/span&gt;端口号 -&lt;span class=&quot;string&quot;&gt;sTCP:&lt;/span&gt;LISTEN&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Mac OSX" scheme="http://tonydeng.github.io/categories/Mac-OSX/"/>
    
    
      <category term="mac" scheme="http://tonydeng.github.io/tags/mac/"/>
    
      <category term="lsof" scheme="http://tonydeng.github.io/tags/lsof/"/>
    
      <category term="netstat" scheme="http://tonydeng.github.io/tags/netstat/"/>
    
  </entry>
  
  <entry>
    <title>任意文件下载漏洞的简单防护措施</title>
    <link href="http://tonydeng.github.io/2016/06/13/simple-protection-measures-to-download-any-file/"/>
    <id>http://tonydeng.github.io/2016/06/13/simple-protection-measures-to-download-any-file/</id>
    <published>2016-06-13T05:17:07.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/download-vulnerability/security.jpg&quot; alt=&quot;security&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们在开发Web应用时，经常会提供文件下载的功能。工程师们一般会考虑遵循“单一原则”，会开发一个将请求中的&lt;code&gt;file&lt;/code&gt;或&lt;code&gt;filePath&lt;/code&gt;作为参数，来下载指定的文件。这样开发一个下载的功能，就能支持所有的下载需求了。&lt;/p&gt;
&lt;p&gt;比如，输入这样的URL&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tonydeng.github.io/download?file=123.txt&quot;&gt;http://tonydeng.github.io/download?file=123.txt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就能够下载&lt;code&gt;123.txt&lt;/code&gt;这个文件了。&lt;/p&gt;
&lt;p&gt;这样的确很方便，但是，大家有没有想过，这样的功能可能会出现什么样的安全隐患或者漏洞呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;来，我们先看看例子：&lt;/p&gt;
&lt;p&gt;下面是一段提供文件下载的&lt;code&gt;spring mvc&lt;/code&gt;的java代码，使用&lt;code&gt;filePath&lt;/code&gt;来指定要下载的文件。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Controller&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/file/*&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileDownloadController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Logger log = LoggerFactory.getLogger(FileDownloadController.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;download.do&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fileDownload&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpServletResponse response,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             HttpServletRequest request,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             @RequestParam(&lt;span class=&quot;string&quot;&gt;&quot;filePath&quot;&lt;/span&gt;)&lt;/span&gt; String filePath) &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        File file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(Constants.TMP_PATH + filePath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == file || !file.exists()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        OutputStream toClient = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 清空response&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            response.reset();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 设置response的Header&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            response.addHeader(&lt;span class=&quot;string&quot;&gt;&quot;Content-Disposition&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;attachment;filename=&quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(filePath.getBytes(&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            response.addHeader(&lt;span class=&quot;string&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; + file.length());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            response.setContentType(&lt;span class=&quot;string&quot;&gt;&quot;application/octet-stream; charset=utf-8&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            toClient = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedOutputStream(response.getOutputStream());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            toClient.write(FileUtil.getByteForFile(file));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            toClient.flush();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            log.error(&lt;span class=&quot;string&quot;&gt;&quot;file download error&quot;&lt;/span&gt;, ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; != toClient) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                toClient.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            file.delete();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们做个测试，在下载的目录下添加一个&lt;code&gt;123.txt&lt;/code&gt;的文件。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;123abc一二三&quot;&lt;/span&gt; &amp;gt; 123.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试&lt;code&gt;123.txt&lt;/code&gt;是否可以下载。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http &lt;span class=&quot;string&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//localhost:8080/file/download.do\?filePath\=123.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP/&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-&lt;span class=&quot;string&quot;&gt;Disposition:&lt;/span&gt; attachment;filename=&lt;span class=&quot;number&quot;&gt;123.&lt;/span&gt;txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-&lt;span class=&quot;string&quot;&gt;Length:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-&lt;span class=&quot;string&quot;&gt;Type:&lt;/span&gt; application/octet-stream; charset=utf&lt;span class=&quot;number&quot;&gt;-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Server:&lt;/span&gt; Jetty(&lt;span class=&quot;number&quot;&gt;9.3&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.8&lt;/span&gt;.v20160314)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;abc一二三&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看起来上面的代码和测试结果，貌似没有什么问题，也能够方便的提供文件下载服务（只需要将要下载的文件保存在&lt;code&gt;Constants.TMP_PATH&lt;/code&gt;这个常量中指定的目录下就可以了）。&lt;/p&gt;
&lt;p&gt;好，貌似下载的工作就完成了，我们可以考虑做别的功能了。&lt;/p&gt;
&lt;p&gt;稍等，既然我们这边blog要聊&lt;em&gt;任意文件下载漏洞&lt;/em&gt;，那这个漏洞到底是什么呢？我们不是已经指定了文件下载的目录了吗？&lt;/p&gt;
&lt;p&gt;那我们在继续做做做测试，在指定的下载目录的上一级来创建一个&lt;code&gt;456.txt&lt;/code&gt;文件。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;456def四五六&quot;&lt;/span&gt; &amp;gt; ../456.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试&lt;code&gt;456.txt&lt;/code&gt;是否可以下载。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//localhost:8080/file/download.do\?filePath\=../456.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP/&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-&lt;span class=&quot;string&quot;&gt;Disposition:&lt;/span&gt; attachment;filename=../&lt;span class=&quot;number&quot;&gt;456.&lt;/span&gt;txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-&lt;span class=&quot;string&quot;&gt;Length:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-&lt;span class=&quot;string&quot;&gt;Type:&lt;/span&gt; application/octet-stream; charset=utf&lt;span class=&quot;number&quot;&gt;-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Server:&lt;/span&gt; Jetty(&lt;span class=&quot;number&quot;&gt;9.3&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.8&lt;/span&gt;.v20160314)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt;四五六&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;啊！！！居然能够下载！！！&lt;/p&gt;
&lt;p&gt;其实，还有更恐怖的事情。&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 获取系统用户信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http:&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;localhost:&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;/file&lt;span class=&quot;regexp&quot;&gt;/download.do\?filePath\=../&lt;/span&gt;..&lt;span class=&quot;regexp&quot;&gt;/../&lt;/span&gt;..&lt;span class=&quot;regexp&quot;&gt;/../&lt;/span&gt;..&lt;span class=&quot;regexp&quot;&gt;/../&lt;/span&gt;../etc/passwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 脱裤&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http:&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;localhost:&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;/file&lt;span class=&quot;regexp&quot;&gt;/download.do\?filePath\=../&lt;/span&gt;..&lt;span class=&quot;regexp&quot;&gt;/../&lt;/span&gt;..&lt;span class=&quot;regexp&quot;&gt;/../&lt;/span&gt;..&lt;span class=&quot;regexp&quot;&gt;/../&lt;/span&gt;../data/mysql/data/mysql.dat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;情绪稳定之后，我们肯定要问一问，这个漏洞出现在哪儿呢？&lt;/p&gt;
&lt;p&gt;我们来看看这两行代码。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//通过输入的filePath参数+加上预设的下载目录，获取最终下载地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(Constants.TMP_PATH + filePath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//读取文件并写入到Response&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toClient.write(FileUtil.getByteForFile(file));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;专门把这两行提出来，大家应该能够理解这个漏洞出现在哪儿了吧。&lt;/p&gt;
&lt;p&gt;那我们可以通过什么样的方式来解决这个漏洞呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是否可以通过&lt;code&gt;HTTP Request&lt;/code&gt;中的&lt;code&gt;Referrer&lt;/code&gt;来做判断？ &lt;strong&gt;貌似会误杀。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;是否可以指定的文件名来做判断？ &lt;strong&gt;这样太麻烦了，就不灵活了。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;是否可以通过操作系统和Web容器的文件读写权限来限制？ &lt;strong&gt;研究文件权限，发现根本不可行。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实，我们可以通过一个简单粗暴的方式就能解决这个安全漏洞。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == file || !file.exists() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                || !file.getCanonicalFile().getParent().equals(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(Constants.TMP_PATH).getCanonicalPath())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原理就不解释了，看看&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/io/File.html#getCanonicalPath--&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java的File API文档&lt;/a&gt;吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/download-vulnerability/security.jpg&quot; alt=&quot;security&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们在开发Web应用时，经常会提供文件下载的功能。工程师们一般会考虑遵循“单一原则”，会开发一个将请求中的&lt;code&gt;file&lt;/code&gt;或&lt;code&gt;filePath&lt;/code&gt;作为参数，来下载指定的文件。这样开发一个下载的功能，就能支持所有的下载需求了。&lt;/p&gt;
&lt;p&gt;比如，输入这样的URL&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tonydeng.github.io/download?file=123.txt&quot;&gt;http://tonydeng.github.io/download?file=123.txt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就能够下载&lt;code&gt;123.txt&lt;/code&gt;这个文件了。&lt;/p&gt;
&lt;p&gt;这样的确很方便，但是，大家有没有想过，这样的功能可能会出现什么样的安全隐患或者漏洞呢？&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="http://tonydeng.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="java" scheme="http://tonydeng.github.io/tags/java/"/>
    
      <category term="security" scheme="http://tonydeng.github.io/tags/security/"/>
    
      <category term="download" scheme="http://tonydeng.github.io/tags/download/"/>
    
      <category term="vulnerability" scheme="http://tonydeng.github.io/tags/vulnerability/"/>
    
  </entry>
  
  <entry>
    <title>使用Junit的一些的高级用法</title>
    <link href="http://tonydeng.github.io/2016/05/11/junit-more-feature/"/>
    <id>http://tonydeng.github.io/2016/05/11/junit-more-feature/</id>
    <published>2016-05-11T10:39:23.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/junit.png&quot; alt=&quot;Junit&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Junit&lt;/code&gt; 是Java开发领域中非常普遍的单元测试框架，不过，大部分的使用者仅仅只是使用它一部分的功能。&lt;/p&gt;
&lt;p&gt;先整理一部分相对不常用，但是个人觉得非常有用的功能（其他的慢慢补充），希望对大家有所帮助。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Rule注解&quot;&gt;&lt;a href=&quot;#Rule注解&quot; class=&quot;headerlink&quot; title=&quot;Rule注解&quot;&gt;&lt;/a&gt;Rule注解&lt;/h2&gt;&lt;p&gt;比如，我们可以使用 @Role 注解来提高我们写单元测试的效率。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Rule&lt;/code&gt; 这个注解是 &lt;code&gt;Junit4&lt;/code&gt; 的新特性，我们可以去看看Junit的关于&lt;a href=&quot;https://github.com/junit-team/junit4/wiki/Rules&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rule的使用例子&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;利用 &lt;code&gt;@Rule&lt;/code&gt; 我们可以扩展 &lt;code&gt;Junit&lt;/code&gt; 的功能，在执行case的时候加入测试者特有的操作，而不影响原有case的代码，减少了特有操作和test case原逻辑的耦合。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Rule&lt;/code&gt; 只能注解在字段中，该字段必须是 &lt;code&gt;public&lt;/code&gt; 的并且类型必须实现了 &lt;code&gt;TestRule&lt;/code&gt; 接口或者 &lt;code&gt;MethodRule&lt;/code&gt; 接口。&lt;/p&gt;
&lt;p&gt;Junit 4.9之后还加入了一个 &lt;code&gt;@ClassRule&lt;/code&gt; 注解。相对 &lt;code&gt;@Rule&lt;/code&gt; 来说， &lt;code&gt;@ClassRule&lt;/code&gt; 是一个类级别的注解。就像 &lt;code&gt;@Before&lt;/code&gt; 与 &lt;code&gt;@BeforeClass&lt;/code&gt; 的区别。&lt;/p&gt;
&lt;h3 id=&quot;通过-Rule注解生成临时文件或临时文件夹&quot;&gt;&lt;a href=&quot;#通过-Rule注解生成临时文件或临时文件夹&quot; class=&quot;headerlink&quot; title=&quot;通过@Rule注解生成临时文件或临时文件夹&quot;&gt;&lt;/a&gt;通过@Rule注解生成临时文件或临时文件夹&lt;/h3&gt;&lt;p&gt;有时候程序运行时必须生成文件或文件夹，往往需要写不少代码来实现这个功能。我们可以使用 TemporaryFolder 来在测试的时候创建文件和目录，最爽的是它在测试运行结束之后会将测试时创建的文件和目录的自动删除。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.io.FileUtils;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.junit.Assert;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.junit.Rule;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.junit.rules.TemporaryFolder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.File;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Created by tonydeng on 16/5/10.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;JunitRuleTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Logger log = LoggerFactory.getLogger(JunitRuleTest.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Rule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; TemporaryFolder tempFolder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TemporaryFolder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testFileCreateAndWrite&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        File file = tempFolder.newFile(&lt;span class=&quot;string&quot;&gt;&quot;simple.txt&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.info(&lt;span class=&quot;string&quot;&gt;&quot;temp file:&#39;&amp;#123;&amp;#125;&#39;&quot;&lt;/span&gt;, file.getPath());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FileUtils.writeStringToFile(file, &lt;span class=&quot;string&quot;&gt;&quot;Junit Rules!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String line = FileUtils.readFileToString(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Assert.assertThat(line, is(&lt;span class=&quot;string&quot;&gt;&quot;Junit Rules!&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试完成之后，生成的这个simple.txt文件就会自动删除了。&lt;/p&gt;
&lt;h3 id=&quot;取得当前的测试方法名称&quot;&gt;&lt;a href=&quot;#取得当前的测试方法名称&quot; class=&quot;headerlink&quot; title=&quot;取得当前的测试方法名称&quot;&gt;&lt;/a&gt;取得当前的测试方法名称&lt;/h3&gt;&lt;p&gt;想要取得执行中的测试方法名的时候，通过@Rule注解TestName类的实例化对象可以取得。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Rule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; TestName name = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TestName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testMethodName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   log.info(&lt;span class=&quot;string&quot;&gt;&quot;Test method name: &amp;#123;&amp;#125;&quot;&lt;/span&gt;,name.getMethodName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Test &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;testMethodName&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在一个运行测试方法过程中收集多个错误信息&quot;&gt;&lt;a href=&quot;#在一个运行测试方法过程中收集多个错误信息&quot; class=&quot;headerlink&quot; title=&quot;在一个运行测试方法过程中收集多个错误信息&quot;&gt;&lt;/a&gt;在一个运行测试方法过程中收集多个错误信息&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;ErrorCollector&lt;/code&gt; 类，可以在一个测试方法中收集多个测试错误。也就是说，一个测试方法执行中，不会在第一个确认出错后就停止执行。使用 &lt;code&gt;ErrorCollector&lt;/code&gt; 可以在所有点确认完后统一报出。&lt;/p&gt;
&lt;p&gt;比如，有三个点需要check，但是又不想出错了就马上退出测试，可以尝试下面的方式。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Rule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ErrorCollector collector = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ErrorCollector();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testMoreCollector&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String s = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	collector.checkThat(&lt;span class=&quot;string&quot;&gt;&quot;Value should not be null&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, is(s));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	collector.checkThat(&lt;span class=&quot;string&quot;&gt;&quot;Value should have the length of 1&quot;&lt;/span&gt;,s.length(),is(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s = &lt;span class=&quot;string&quot;&gt;&quot;Junit!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	collector.checkThat(&lt;span class=&quot;string&quot;&gt;&quot;Value should have the length of 10&quot;&lt;/span&gt;,s.length(),is(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的测试会报这样的错误信息：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Failed tests:   testMoreCollector(com.github.tonydeng.demo.java8.JunitRuleTest): Value should have the length of &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;(..)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  testMoreCollector(com.github.tonydeng.demo.java8.JunitRuleTest): Value should have the length of &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;(..)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者自己手工捕获异常，添加到 &lt;code&gt;ErrorCollector&lt;/code&gt; 中，通过 &lt;code&gt;addError&lt;/code&gt; 添加的错误信息：。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testErrorCollector&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	collector.addError(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Throwable(&lt;span class=&quot;string&quot;&gt;&quot;first thing went wrong&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	collector.addError(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Throwable(&lt;span class=&quot;string&quot;&gt;&quot;second thing went wrong&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;错误信息：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Tests in error:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  testErrorCollector(com.github.tonydeng.demo.java8.JunitRuleTest): &lt;span class=&quot;function&quot;&gt;first thing went wrong&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title&quot;&gt;testErrorCollector&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(com.github.tonydeng.demo.java8.JunitRuleTest)&lt;/span&gt;: second thing went wrong&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;设置执行最长时间&quot;&gt;&lt;a href=&quot;#设置执行最长时间&quot; class=&quot;headerlink&quot; title=&quot;设置执行最长时间&quot;&gt;&lt;/a&gt;设置执行最长时间&lt;/h3&gt;&lt;p&gt;我们有时候要对某些方法调用的时长有要求，如果超出某些时长就算是不符合要求。那我们平时怎么来测试呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算一下调用方法之前和之后的时间差，如果超出某个值，就算不符合要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;的确，使用上述的方式也可以达到目的，但是还是有太多多余的代码要写了。完全可以尝试一下 &lt;code&gt;Junit&lt;/code&gt; 的 &lt;code&gt;Timeout&lt;/code&gt;，非常简单就达到你的目的了。&lt;/p&gt;
&lt;p&gt;比如，我们先设置一个5秒的超时，然后用一个无限循环的方法来测试。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Rule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Timeout timeout = Timeout.seconds(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testTimeout&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;org.junit.runners.model.TestTimedOutException: test timed out after &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; seconds&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用RuleChain&quot;&gt;&lt;a href=&quot;#使用RuleChain&quot; class=&quot;headerlink&quot; title=&quot;使用RuleChain&quot;&gt;&lt;/a&gt;使用RuleChain&lt;/h3&gt;&lt;p&gt;RuleChain提供一种将多个TestRule串在一起执行的机制。这在JUnit 4.10以后的版本中可以使用。需要根据特定顺序执行多个处理的时候，用RuleChain可以提高效率。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UseRuleChain&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Rule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; TestRule chain = RuleChain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           .outerRule(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LoggingRule(&lt;span class=&quot;string&quot;&gt;&quot;outer rule&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           .around(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LoggingRule(&lt;span class=&quot;string&quot;&gt;&quot;middle rule&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           .around(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LoggingRule(&lt;span class=&quot;string&quot;&gt;&quot;inner rule&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertTrue(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;starting outer rule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;starting middle rule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;starting inner rule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;finished inner rule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;finished middle rule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;finished outer rule&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Parameterized注解&quot;&gt;&lt;a href=&quot;#Parameterized注解&quot; class=&quot;headerlink&quot; title=&quot;Parameterized注解&quot;&gt;&lt;/a&gt;Parameterized注解&lt;/h2&gt;&lt;p&gt;如果我们需要对我们的测试方法进行参数化，也就是只写一个测试方法，把若干种情况作为参数传递进去，一次性完成测试。那我们该怎么办？&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;Parameterized&lt;/code&gt; 相关的注解来解决这个问题。&lt;/p&gt;
&lt;p&gt;来一个简单的计算斐波纳契数的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Created by tonydeng on 16/5/12.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RunWith&lt;/span&gt;(Parameterized.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FibonacciNumbersTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Logger log = LoggerFactory.getLogger(FibonacciNumbersTest.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Collection&amp;lt;Integer[]&amp;gt; data() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Arrays.asList(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Integer[][]&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&amp;#125;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; expected;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FibonacciNumbersTest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; input, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; expected)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value = input;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.expected = expected;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fibonacciNumberCall&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.info(&lt;span class=&quot;string&quot;&gt;&quot;expected &amp;#123;&amp;#125; fib(value) &amp;#123;&amp;#125;&quot;&lt;/span&gt;, expected, fib(value));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Assert.assertEquals(expected, fib(value));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fib(n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + fib(n - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者，这么来写：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Created by tonydeng on 16/5/12.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RunWith&lt;/span&gt;(Parameterized.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FibonacciNumbersTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Logger log = LoggerFactory.getLogger(FibonacciNumbersTest.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Parameterized&lt;/span&gt;.Parameters(name = &lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;index&amp;#125;: fib(&amp;#123;0&amp;#125;=&amp;#123;1&amp;#125;)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Collection&amp;lt;Integer[]&amp;gt; data() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Arrays.asList(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Integer[][]&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&amp;#125;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Parameterized&lt;/span&gt;.Parameter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fInput;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Parameterized&lt;/span&gt;.Parameter(value = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fExpected;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testParemeter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.info(&lt;span class=&quot;string&quot;&gt;&quot;fExpected &amp;#123;&amp;#125; fib(fInput) &amp;#123;&amp;#125;&quot;&lt;/span&gt;, fExpected, fib(fInput));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Assert.assertEquals(fExpected, fib(fInput));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fib(n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + fib(n - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的两个例子中，都是利用了 &lt;code&gt;data()&lt;/code&gt; 方法构建了各个测试方法的参数，其中返回值的第一个是input参数，第二个是expected参数。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/junit-team/junit4/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;junit4 wiki via github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.codeaffine.com/2014/09/24/junit-nutshell-junit-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JUnit Tutorial&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/junit.png&quot; alt=&quot;Junit&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Junit&lt;/code&gt; 是Java开发领域中非常普遍的单元测试框架，不过，大部分的使用者仅仅只是使用它一部分的功能。&lt;/p&gt;
&lt;p&gt;先整理一部分相对不常用，但是个人觉得非常有用的功能（其他的慢慢补充），希望对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="效率" scheme="http://tonydeng.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="java" scheme="http://tonydeng.github.io/tags/java/"/>
    
      <category term="juit" scheme="http://tonydeng.github.io/tags/juit/"/>
    
      <category term="rule" scheme="http://tonydeng.github.io/tags/rule/"/>
    
      <category term="testcase" scheme="http://tonydeng.github.io/tags/testcase/"/>
    
  </entry>
  
  <entry>
    <title>Java Stream详解</title>
    <link href="http://tonydeng.github.io/2016/04/25/java-stream/"/>
    <id>http://tonydeng.github.io/2016/04/25/java-stream/</id>
    <published>2016-04-25T08:59:03.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/stream-api-java8.png&quot; alt=&quot;java8 stream api&quot;&gt;&lt;/p&gt;
&lt;p&gt;Stream是 Java 8新增加的类，用来补充集合类。&lt;/p&gt;
&lt;p&gt;Stream代表数据流，流中的数据元素的数量可能是有限的，也可能是无限的。&lt;/p&gt;
&lt;p&gt;Stream和其它集合类的区别在于：其它集合类主要关注与有限数量的数据的访问和有效管理(增删改)，而Stream并没有提供访问和管理元素的方式，而是通过声明数据源的方式，利用可计算的操作在数据源上执行，当然&lt;code&gt;BaseStream.iterator()&lt;/code&gt; 和 &lt;code&gt;BaseStream.spliterator()&lt;/code&gt;操作提供了遍历元素的方法。&lt;/p&gt;
&lt;p&gt;Java Stream提供了提供了串行和并行两种类型的流，保持一致的接口，提供函数式编程方式，以管道方式提供中间操作和最终执行操作，为Java语言的集合提供了现代语言提供的类似的高阶函数操作，简化和提高了Java集合的功能。&lt;/p&gt;
&lt;p&gt;本文首先介绍Java Stream的特点，然后按照功能分类逐个介绍流的中间操作和终点操作，最后会介绍第三方为Java Stream做的扩展。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;本节翻译整理自&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java8 Stream Javadoc&lt;/a&gt;，并对流的这些特性做了进一步的解释。&lt;/p&gt;
&lt;p&gt;Stream接口还包含几个基本类型的子接口如&lt;code&gt;IntStream&lt;/code&gt;, &lt;code&gt;LongStream&lt;/code&gt; 和 &lt;code&gt;DoubleStream&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;关于流和其它集合具体的区别，可以参照下面的列表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不存储数据。流是基于数据源的对象，它本身不存储数据元素，而是通过管道将数据源的元素传递给操作。&lt;/li&gt;
&lt;li&gt;函数式编程。流的操作不会修改数据源，例如filter不会将数据源中的数据删除。&lt;/li&gt;
&lt;li&gt;延迟操作。流的很多操作如filter,map等中间操作是延迟执行的，只有到终点操作才会将操作顺序执行。&lt;/li&gt;
&lt;li&gt;可以解绑。对于无限数量的流，有些操作是可以在有限的时间完成的，比如limit(n) 或 findFirst()，这些操作可是实现”短路”(Short-circuiting)，访问到有限的元素后就可以返回。&lt;/li&gt;
&lt;li&gt;纯消费。流的元素只能访问一次，类似Iterator，操作没有回头路，如果你想从头重新访问流的元素，对不起，你得重新生成一个新的流。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;流的操作是以管道的方式串起来的。流管道包含一个数据源，接着包含零到N个中间操作，最后以一个终点操作结束。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/streams.png&quot; alt=&quot;java stream&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;并行-Parallelism&quot;&gt;&lt;a href=&quot;#并行-Parallelism&quot; class=&quot;headerlink&quot; title=&quot;并行 Parallelism&quot;&gt;&lt;/a&gt;并行 Parallelism&lt;/h3&gt;&lt;p&gt;所有的流操作都可以串行执行或者并行执行。&lt;/p&gt;
&lt;p&gt;除非显示地创建并行流，否则Java库中创建的都是串行流。 &lt;code&gt;Collection.stream()&lt;/code&gt;为集合创建串行流而&lt;code&gt;Collection.parallelStream()&lt;/code&gt;为集合创建并行流。&lt;code&gt;IntStream.range(int, int)&lt;/code&gt;创建的是串行流。通过&lt;code&gt;parallel()&lt;/code&gt;方法可以将串行流转换成并行流,sequential()方法将流转换成串行流。&lt;/p&gt;
&lt;p&gt;除非方法的Javadoc中指明了方法在并行执行的时候结果是不确定(比如&lt;code&gt;findAny&lt;/code&gt;、&lt;code&gt;forEach&lt;/code&gt;)，否则串行和并行执行的结果应该是一样的。&lt;/p&gt;
&lt;h3 id=&quot;Non-interference&quot;&gt;&lt;a href=&quot;#Non-interference&quot; class=&quot;headerlink&quot; title=&quot;Non-interference&quot;&gt;&lt;/a&gt;Non-interference&lt;/h3&gt;&lt;p&gt;流可以从非线程安全的集合中创建，当流的管道执行的时候，非concurrent数据源不应该被改变。下面的代码会抛出&lt;code&gt;java.util.ConcurrentModificationException&lt;/code&gt;异常：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; l = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList(Arrays.asList(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stream&amp;lt;String&amp;gt; sl = l.stream();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sl.forEach(s -&amp;gt; l.add(&lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在设置中间操作的时候，可以更改数据源，只有在执行终点操作的时候，才有可能出现并发问题(抛出异常，或者不期望的结果)，比如下面的代码不会抛出异常：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; l = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList(Arrays.asList(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stream&amp;lt;String&amp;gt; sl = l.stream();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l.add(&lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sl.forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于concurrent数据源，不会有这样的问题，比如下面的代码很正常：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; l = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CopyOnWriteArrayList&amp;lt;&amp;gt;(Arrays.asList(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stream&amp;lt;String&amp;gt; sl = l.stream();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sl.forEach(s -&amp;gt; l.add(&lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然我们上面例子是在终点操作中对非并发数据源进行修改，但是非并发数据源也可能在其它线程中修改，同样会有并发问题。&lt;/p&gt;
&lt;h3 id=&quot;无状态-Stateless-behaviors&quot;&gt;&lt;a href=&quot;#无状态-Stateless-behaviors&quot; class=&quot;headerlink&quot; title=&quot;无状态 Stateless behaviors&quot;&gt;&lt;/a&gt;无状态 Stateless behaviors&lt;/h3&gt;&lt;p&gt;大部分流的操作的参数都是函数式接口，可以使用Lambda表达式实现。它们用来描述用户的行为，称之为行为参数(behavioral parameters)。&lt;/p&gt;
&lt;p&gt;如果这些行为参数有状态，则流的操作的结果可能是不确定的，比如下面的代码:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; l = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList(Arrays.asList(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;, ……));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;State&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; State state = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; State();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stream&amp;lt;String&amp;gt; sl = l.stream().map(e -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state.s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;OK&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        state.s = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sl.forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码在并行执行时多次的执行结果可能是不同的。这是因为这个lambda表达式是有状态的。&lt;/p&gt;
&lt;h3 id=&quot;排序-Ordering&quot;&gt;&lt;a href=&quot;#排序-Ordering&quot; class=&quot;headerlink&quot; title=&quot;排序 Ordering&quot;&gt;&lt;/a&gt;排序 Ordering&lt;/h3&gt;&lt;p&gt;某些流的返回的元素是有确定顺序的，我们称之为 &lt;em&gt;encounter order&lt;/em&gt;。这个顺序是流提供它的元素的顺序，比如数组的encounter order是它的元素的排序顺序，List是它的迭代顺序(iteration order)，对于HashSet,它本身就没有encounter order。&lt;/p&gt;
&lt;p&gt;一个流是否是encounter order主要依赖数据源和它的中间操作，比如数据源List和Array上创建的流是有序的(ordered)，但是在HashSet创建的流不是有序的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt;方法可以将流转换成有序的，&lt;code&gt;unordered&lt;/code&gt;可以将流转换成无序的。&lt;br&gt;除此之外，一个操作可能会影响流的有序,比如&lt;code&gt;map&lt;/code&gt;方法，它会用不同的值甚至类型替换流中的元素，所以输入元素的有序性已经变得没有意义了，但是对于&lt;code&gt;filter&lt;/code&gt;方法来说，它只是丢弃掉一些值而已，输入元素的有序性还是保障的。&lt;/p&gt;
&lt;p&gt;对于串行流，流有序与否不会影响其性能，只是会影响确定性(determinism)，无序流在多次执行的时候结果可能是不一样的。&lt;/p&gt;
&lt;p&gt;对于并行流，去掉有序这个约束可能会提供性能，比如&lt;code&gt;distinct&lt;/code&gt;、&lt;code&gt;groupingBy&lt;/code&gt;这些聚合操作。&lt;/p&gt;
&lt;h3 id=&quot;结合性-Associativity&quot;&gt;&lt;a href=&quot;#结合性-Associativity&quot; class=&quot;headerlink&quot; title=&quot;结合性 Associativity&quot;&gt;&lt;/a&gt;结合性 Associativity&lt;/h3&gt;&lt;p&gt;一个操作或者函数op满足结合性意味着它满足下面的条件：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; op b) op c == &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; op (&lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt; op c)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于并发流来说，如果操作满足结合性，我们就可以并行计算：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a op b op c op d == (a op b) op (c op d)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;比如&lt;code&gt;min&lt;/code&gt;、&lt;code&gt;max&lt;/code&gt;以及字符串连接都是满足结合性的。&lt;/p&gt;
&lt;h2 id=&quot;创建Stream&quot;&gt;&lt;a href=&quot;#创建Stream&quot; class=&quot;headerlink&quot; title=&quot;创建Stream&quot;&gt;&lt;/a&gt;创建Stream&lt;/h2&gt;&lt;p&gt;可以通过多种方式创建流：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过集合的&lt;code&gt;stream()&lt;/code&gt;方法或者&lt;code&gt;parallelStream()&lt;/code&gt;，比如&lt;code&gt;Arrays.asList(1,2,3).stream()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;Arrays.stream(Object[])&lt;/code&gt;方法, 比如&lt;code&gt;Arrays.stream(new int[]{1,2,3})&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用流的静态方法，比如&lt;code&gt;Stream.of(Object[])&lt;/code&gt;, &lt;code&gt;IntStream.range(int, int)&lt;/code&gt; 或者 &lt;code&gt;Stream.iterate(Object, UnaryOperator)，如Stream.iterate(0, n -&amp;gt; n * 2)&lt;/code&gt;，或者&lt;code&gt;generate(Supplier&amp;lt;T&amp;gt; s)&lt;/code&gt;如&lt;code&gt;Stream.generate(Math::random)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BufferedReader.lines()&lt;/code&gt;从文件中获得行的流。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Files&lt;/code&gt;类的操作路径的方法，如&lt;code&gt;list&lt;/code&gt;、&lt;code&gt;find&lt;/code&gt;、&lt;code&gt;walk&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;随机数流&lt;code&gt;Random.ints()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;其它一些类提供了创建流的方法，如&lt;code&gt;BitSet.stream()&lt;/code&gt;, &lt;code&gt;Pattern.splitAsStream(java.lang.CharSequence)&lt;/code&gt;, 和 &lt;code&gt;JarFile.stream()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;更底层的使用&lt;code&gt;StreamSupport&lt;/code&gt;，它提供了将&lt;code&gt;Spliterator&lt;/code&gt;转换成流的方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;中间操作-intermediate-operations&quot;&gt;&lt;a href=&quot;#中间操作-intermediate-operations&quot; class=&quot;headerlink&quot; title=&quot;中间操作 intermediate operations&quot;&gt;&lt;/a&gt;中间操作 intermediate operations&lt;/h2&gt;&lt;p&gt;中间操作会返回一个新的流，并且操作是延迟执行的(lazy)，它不会修改原始的数据源，而且是由在终点操作开始的时候才真正开始执行。&lt;br&gt;这个Scala集合的转换操作不同，Scala集合转换操作会生成一个新的中间集合，显而易见Java的这种设计会减少中间对象的生成。&lt;/p&gt;
&lt;p&gt;下面介绍流的这些中间操作：&lt;/p&gt;
&lt;h3 id=&quot;distinct&quot;&gt;&lt;a href=&quot;#distinct&quot; class=&quot;headerlink&quot; title=&quot;distinct&quot;&gt;&lt;/a&gt;distinct&lt;/h3&gt;&lt;p&gt;&lt;code&gt;distinct&lt;/code&gt;保证输出的流中包含唯一的元素，它是通过&lt;code&gt;Object.equals(Object)&lt;/code&gt;来检查是否包含相同的元素。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; l = Stream.of(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .distinct()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(l); &lt;span class=&quot;comment&quot;&gt;//[a, b, c]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;filter&quot;&gt;&lt;a href=&quot;#filter&quot; class=&quot;headerlink&quot; title=&quot;filter&quot;&gt;&lt;/a&gt;filter&lt;/h3&gt;&lt;p&gt;&lt;code&gt;filter&lt;/code&gt;返回的流中只包含满足断言(predicate)的数据。&lt;/p&gt;
&lt;p&gt;下面的代码返回流中的偶数集合。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Integer&amp;gt; l = IntStream.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .filter( i -&amp;gt; i % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .boxed()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(l); &lt;span class=&quot;comment&quot;&gt;//[2, 4, 6, 8]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map&quot;&gt;&lt;/a&gt;map&lt;/h3&gt;&lt;p&gt;&lt;code&gt;map&lt;/code&gt;方法将流中的元素映射成另外的值，新的值类型可以和原来的元素的类型不同。&lt;/p&gt;
&lt;p&gt;下面的代码中将字符元素映射成它的哈希码(ASCII值)。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Integer&amp;gt; l = Stream.of(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .map( c -&amp;gt; c.hashCode())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(l); &lt;span class=&quot;comment&quot;&gt;//[97, 98, 99]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;flatmap&quot;&gt;&lt;a href=&quot;#flatmap&quot; class=&quot;headerlink&quot; title=&quot;flatmap&quot;&gt;&lt;/a&gt;flatmap&lt;/h3&gt;&lt;p&gt;&lt;code&gt;flatmap&lt;/code&gt;方法混合了&lt;code&gt;map&lt;/code&gt; + &lt;code&gt;flattern&lt;/code&gt;的功能，它将映射后的流的元素全部放入到一个新的流中。它的方法定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;R&amp;gt; &lt;span class=&quot;function&quot;&gt;Stream&amp;lt;R&amp;gt; &lt;span class=&quot;title&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Function&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T,? extends Stream&amp;lt;? extends R&amp;gt;&amp;gt; mapper)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到&lt;code&gt;mapper&lt;/code&gt;函数会将每一个元素转换成一个流对象，而flatMap方法返回的流包含的元素为&lt;code&gt;mapper&lt;/code&gt;生成的所有流中的元素。&lt;/p&gt;
&lt;p&gt;下面这个例子中将一首唐诗生成一个按行分割的流，然后在这个流上调用&lt;code&gt;flatmap&lt;/code&gt;得到单词的小写形式的集合，去掉重复的单词然后打印出来。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String poetry = &lt;span class=&quot;string&quot;&gt;&quot;Where, before me, are the ages that have gone?\n&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;And where, behind me, are the coming generations?\n&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;I think of heaven and earth, without limit, without end,\n&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;And I am all alone and my tears fall down.&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stream&amp;lt;String&amp;gt; lines = Arrays.stream(poetry.split(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stream&amp;lt;String&amp;gt; words = lines.flatMap(line -&amp;gt; Arrays.stream(line.split(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; l = words.map( w -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (w.endsWith(&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;) || w.endsWith(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;) || w.endsWith(&lt;span class=&quot;string&quot;&gt;&quot;?&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; w.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,w.length() -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).trim().toLowerCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; w.trim().toLowerCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).distinct().sorted().collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(l); &lt;span class=&quot;comment&quot;&gt;//[ages, all, alone, am, and, are, before, behind, coming, down, earth, end, fall, generations, gone, have, heaven, i, limit, me, my, of, tears, that, the, think, where, without]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;flatMapToDouble&lt;/code&gt;、&lt;code&gt;flatMapToInt&lt;/code&gt;、&lt;code&gt;flatMapToLong&lt;/code&gt;提供了转换成特定流的方法。&lt;/p&gt;
&lt;h3 id=&quot;limit&quot;&gt;&lt;a href=&quot;#limit&quot; class=&quot;headerlink&quot; title=&quot;limit&quot;&gt;&lt;/a&gt;limit&lt;/h3&gt;&lt;p&gt;&lt;code&gt;limit&lt;/code&gt;方法指定数量的元素的流。对于串行流，这个方法是有效的，这是因为它只需返回前n个元素即可，但是对于有序的并行流，它可能花费相对较长的时间，如果你不在意有序，可以将有序并行流转换为无序的，可以提高性能。&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Integer&amp;gt; l = IntStream.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;).limit(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .boxed()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .&lt;span class=&quot;keyword&quot;&gt;collect&lt;/span&gt;(Collectors.&lt;span class=&quot;keyword&quot;&gt;toList&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt;(l);&lt;span class=&quot;comment&quot;&gt;//[1, 2, 3, 4, 5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;peek&quot;&gt;&lt;a href=&quot;#peek&quot; class=&quot;headerlink&quot; title=&quot;peek&quot;&gt;&lt;/a&gt;peek&lt;/h3&gt;&lt;p&gt;&lt;code&gt;peek&lt;/code&gt;方法方法会使用一个&lt;code&gt;Consumer&lt;/code&gt;消费流中的元素，但是返回的流还是包含原来的流中的元素。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String[] arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[]&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Arrays.stream(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .peek(System.out::println) &lt;span class=&quot;comment&quot;&gt;//a,b,c,d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .count();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;sorted&quot;&gt;&lt;a href=&quot;#sorted&quot; class=&quot;headerlink&quot; title=&quot;sorted&quot;&gt;&lt;/a&gt;sorted&lt;/h3&gt;&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt;将流中的元素按照自然排序方式进行排序，如果元素没有实现Comparable，则终点操作执行时会抛出&lt;code&gt;java.lang.ClassCastException&lt;/code&gt;异常。&lt;br&gt;&lt;code&gt;sorted(Comparator&amp;lt;? super T&amp;gt; comparator)&lt;/code&gt;可以指定排序的方式。&lt;/p&gt;
&lt;p&gt;对于有序流，排序是稳定的。对于非有序流，不保证排序稳定。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String[] arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[]&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;b_123&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;c+342&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;b#632&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;d_123&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; l  = Arrays.stream(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .sorted((s1,s2) -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s1.charAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) == s2.charAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s1.substring(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;).compareTo(s2.substring(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s1.charAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) - s2.charAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(l); &lt;span class=&quot;comment&quot;&gt;//[b_123, b#632, c+342, d_123]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;skip&quot;&gt;&lt;a href=&quot;#skip&quot; class=&quot;headerlink&quot; title=&quot;skip&quot;&gt;&lt;/a&gt;skip&lt;/h3&gt;&lt;p&gt;&lt;code&gt;skip&lt;/code&gt;返回丢弃了前n个元素的流，如果流中的元素小于或者等于n，则返回空的流。&lt;/p&gt;
&lt;h2 id=&quot;终点操作-terminal-operations&quot;&gt;&lt;a href=&quot;#终点操作-terminal-operations&quot; class=&quot;headerlink&quot; title=&quot;终点操作 terminal operations&quot;&gt;&lt;/a&gt;终点操作 terminal operations&lt;/h2&gt;&lt;h3 id=&quot;Match&quot;&gt;&lt;a href=&quot;#Match&quot; class=&quot;headerlink&quot; title=&quot;Match&quot;&gt;&lt;/a&gt;Match&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; 	&lt;span class=&quot;title&quot;&gt;allMatch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Predicate&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T&amp;gt; predicate)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; 	&lt;span class=&quot;title&quot;&gt;anyMatch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Predicate&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T&amp;gt; predicate)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; 	&lt;span class=&quot;title&quot;&gt;noneMatch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Predicate&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T&amp;gt; predicate)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这一组方法用来检查流中的元素是否满足断言。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;allMatch&lt;/code&gt;只有在所有的元素都满足断言时才返回true,否则flase,流为空时总是返回true&lt;/p&gt;
&lt;p&gt;&lt;code&gt;anyMatch&lt;/code&gt;只有在任意一个元素满足断言时就返回true,否则flase,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;noneMatch&lt;/code&gt;只有在所有的元素都不满足断言时才返回true,否则flase,&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Stream&lt;/span&gt;.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;).allMatch( i -&amp;gt; i &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Stream&lt;/span&gt;.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;).anyMatch( i -&amp;gt; i &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Stream&lt;/span&gt;.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;).noneMatch( i -&amp;gt; i &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Stream&lt;/span&gt;.&amp;lt;Integer&amp;gt;empty().allMatch( i -&amp;gt; i &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Stream&lt;/span&gt;.&amp;lt;Integer&amp;gt;empty().anyMatch( i -&amp;gt; i &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Stream&lt;/span&gt;.&amp;lt;Integer&amp;gt;empty().noneMatch( i -&amp;gt; i &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;count&quot;&gt;&lt;a href=&quot;#count&quot; class=&quot;headerlink&quot; title=&quot;count&quot;&gt;&lt;/a&gt;count&lt;/h3&gt;&lt;p&gt;&lt;code&gt;count&lt;/code&gt;方法返回流中的元素的数量。它实现为：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mapToLong(e -&amp;gt; &lt;span class=&quot;number&quot;&gt;1L&lt;/span&gt;).sum();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;collect&quot;&gt;&lt;a href=&quot;#collect&quot; class=&quot;headerlink&quot; title=&quot;collect&quot;&gt;&lt;/a&gt;collect&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;R,A&amp;gt; &lt;span class=&quot;function&quot;&gt;R 	&lt;span class=&quot;title&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Collector&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T,A,R&amp;gt; collector)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;R&amp;gt; R 	&lt;span class=&quot;title&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Supplier&amp;lt;R&amp;gt; supplier, BiConsumer&amp;lt;R,? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T&amp;gt; accumulator, BiConsumer&amp;lt;R,R&amp;gt; combiner)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用一个&lt;code&gt;collector&lt;/code&gt;执行&lt;code&gt;mutable reduction&lt;/code&gt;操作。辅助类&lt;code&gt;Collectors&lt;/code&gt;提供了很多的&lt;code&gt;collector&lt;/code&gt;，可以满足我们日常的需求，你也可以创建新的&lt;code&gt;collector&lt;/code&gt;实现特定的需求。它是一个值得关注的类，你需要熟悉这些特定的收集器，如聚合类&lt;code&gt;averagingInt&lt;/code&gt;、最大最小值&lt;code&gt;maxBy&lt;/code&gt; &lt;code&gt;minBy&lt;/code&gt;、计数&lt;code&gt;counting&lt;/code&gt;、分组&lt;code&gt;groupingBy&lt;/code&gt;、字符串连接&lt;code&gt;joining&lt;/code&gt;、分区&lt;code&gt;partitioningBy&lt;/code&gt;、汇总&lt;code&gt;summarizingInt&lt;/code&gt;、化简&lt;code&gt;reducing&lt;/code&gt;、转换&lt;code&gt;toXXX&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;第二个提供了更底层的功能，它的逻辑类似下面的伪代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;R result = supplier.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (T element : &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; stream)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    accumulator.accept(result, element);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; asList = stringStream.collect(ArrayList::&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;, ArrayList::add,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           ArrayList::addAll);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String concat = stringStream.collect(StringBuilder::&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;, StringBuilder::append,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     StringBuilder::append)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            .toString();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;find&quot;&gt;&lt;a href=&quot;#find&quot; class=&quot;headerlink&quot; title=&quot;find&quot;&gt;&lt;/a&gt;find&lt;/h3&gt;&lt;p&gt;&lt;code&gt;findAny()&lt;/code&gt;返回任意一个元素，如果流为空，返回空的&lt;code&gt;Optional&lt;/code&gt;，对于并行流来说，它只需要返回任意一个元素即可，所以性能可能要好于&lt;code&gt;findFirst()&lt;/code&gt;，但是有可能多次执行的时候返回的结果不一样。&lt;br&gt;&lt;code&gt;findFirst()&lt;/code&gt;返回第一个元素，如果流为空，返回空的&lt;code&gt;Optional&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;forEach、forEachOrdered&quot;&gt;&lt;a href=&quot;#forEach、forEachOrdered&quot; class=&quot;headerlink&quot; title=&quot;forEach、forEachOrdered&quot;&gt;&lt;/a&gt;forEach、forEachOrdered&lt;/h3&gt;&lt;p&gt;&lt;code&gt;forEach&lt;/code&gt;遍历流的每一个元素，执行指定的action。它是一个终点操作，和peek方法不同。这个方法不担保按照流的&lt;code&gt;encounter order&lt;/code&gt;顺序执行，如果对于有序流按照它的&lt;code&gt;encounter order&lt;/code&gt;顺序执行，你可以使用&lt;code&gt;forEachOrdered&lt;/code&gt;方法。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Stream.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;).forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;max、min&quot;&gt;&lt;a href=&quot;#max、min&quot; class=&quot;headerlink&quot; title=&quot;max、min&quot;&gt;&lt;/a&gt;max、min&lt;/h3&gt;&lt;p&gt;&lt;code&gt;max&lt;/code&gt;返回流中的最大值，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;min&lt;/code&gt;返回流中的最小值。&lt;/p&gt;
&lt;h3 id=&quot;reduce&quot;&gt;&lt;a href=&quot;#reduce&quot; class=&quot;headerlink&quot; title=&quot;reduce&quot;&gt;&lt;/a&gt;reduce&lt;/h3&gt;&lt;p&gt;&lt;code&gt;reduce&lt;/code&gt;是常用的一个方法，事实上很多操作都是基于它实现的。&lt;/p&gt;
&lt;p&gt;它有几个重载方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;pubic Optional&amp;lt;T&amp;gt; 	&lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BinaryOperator&amp;lt;T&amp;gt; accumulator)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pubic T 	&lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T identity, BinaryOperator&amp;lt;T&amp;gt; accumulator)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pubic &amp;lt;U&amp;gt; U 	&lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(U identity, BiFunction&amp;lt;U,? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T,U&amp;gt; accumulator, BinaryOperator&amp;lt;U&amp;gt; combiner)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个方法使用流中的第一个值作为初始值，后面两个方法则使用一个提供的初始值。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Optional&amp;lt;Integer&amp;gt; total = Stream.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;).reduce( (x, y) -&amp;gt; x +y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Integer total2 = Stream.of(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;).reduce(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, (x, y) -&amp;gt; x +y);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;值得注意的是&lt;code&gt;accumulator&lt;/code&gt;应该满足结合性(associative)。&lt;/p&gt;
&lt;h3 id=&quot;toArray&quot;&gt;&lt;a href=&quot;#toArray&quot; class=&quot;headerlink&quot; title=&quot;toArray()&quot;&gt;&lt;/a&gt;toArray()&lt;/h3&gt;&lt;p&gt;将流中的元素放入到一个数组中。&lt;/p&gt;
&lt;h2 id=&quot;组合&quot;&gt;&lt;a href=&quot;#组合&quot; class=&quot;headerlink&quot; title=&quot;组合&quot;&gt;&lt;/a&gt;组合&lt;/h2&gt;&lt;p&gt;&lt;code&gt;concat&lt;/code&gt;用来连接类型一样的两个流。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;Stream&amp;lt;T&amp;gt; 	&lt;span class=&quot;title&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Stream&amp;lt;? extends T&amp;gt; a, Stream&amp;lt;? extends T&amp;gt; b)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;转换&quot;&gt;&lt;a href=&quot;#转换&quot; class=&quot;headerlink&quot; title=&quot;转换&quot;&gt;&lt;/a&gt;转换&lt;/h2&gt;&lt;p&gt;&lt;code&gt;toArray&lt;/code&gt;方法将一个流转换成数组，而如果想转换成其它集合类型，西需要调用&lt;code&gt;collect&lt;/code&gt;方法，利用&lt;code&gt;Collectors.toXXX&lt;/code&gt;方法进行转换：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T,C extends Collection&amp;lt;T&amp;gt;&amp;gt; Collector&amp;lt;T,?,C&amp;gt; 	toCollection(Supplier&amp;lt;C&amp;gt; collectionFactory)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; …… 	toConcurrentMap(……)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; Collector&amp;lt;T,?,List&amp;lt;T&amp;gt;&amp;gt; 	toList()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; …… 	toMap(……)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; Collector&amp;lt;T,?,Set&amp;lt;T&amp;gt;&amp;gt; 	toSet()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;更进一步&quot;&gt;&lt;a href=&quot;#更进一步&quot; class=&quot;headerlink&quot; title=&quot;更进一步&quot;&gt;&lt;/a&gt;更进一步&lt;/h2&gt;&lt;p&gt;虽然Stream提供了很多的操作，但是相对于Scala等语言，似乎还少了一些。一些开源项目提供了额外的一些操作，比如&lt;a href=&quot;https://github.com/poetix/protonpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;protonpack&lt;/a&gt;项目提供了下列方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;takeWhile and takeUntil&lt;/li&gt;
&lt;li&gt;skipWhile and skipUntil&lt;/li&gt;
&lt;li&gt;zip and zipWithIndex&lt;/li&gt;
&lt;li&gt;unfold&lt;/li&gt;
&lt;li&gt;MapStream&lt;/li&gt;
&lt;li&gt;aggregate&lt;/li&gt;
&lt;li&gt;Streamable&lt;/li&gt;
&lt;li&gt;unique collector&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/NitorCreations/java8-utils&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java8-utils&lt;/a&gt; 也提供了一些有益的辅助方法。&lt;/p&gt;
&lt;h2 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.leveluplunch.com/java/examples/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.leveluplunch.com/java/examples/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/poetix/protonpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/poetix/protonpack&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/NitorCreations/java8-utils&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/NitorCreations/java8-utils&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/stream-api-java8.png&quot; alt=&quot;java8 stream api&quot;&gt;&lt;/p&gt;
&lt;p&gt;Stream是 Java 8新增加的类，用来补充集合类。&lt;/p&gt;
&lt;p&gt;Stream代表数据流，流中的数据元素的数量可能是有限的，也可能是无限的。&lt;/p&gt;
&lt;p&gt;Stream和其它集合类的区别在于：其它集合类主要关注与有限数量的数据的访问和有效管理(增删改)，而Stream并没有提供访问和管理元素的方式，而是通过声明数据源的方式，利用可计算的操作在数据源上执行，当然&lt;code&gt;BaseStream.iterator()&lt;/code&gt; 和 &lt;code&gt;BaseStream.spliterator()&lt;/code&gt;操作提供了遍历元素的方法。&lt;/p&gt;
&lt;p&gt;Java Stream提供了提供了串行和并行两种类型的流，保持一致的接口，提供函数式编程方式，以管道方式提供中间操作和最终执行操作，为Java语言的集合提供了现代语言提供的类似的高阶函数操作，简化和提高了Java集合的功能。&lt;/p&gt;
&lt;p&gt;本文首先介绍Java Stream的特点，然后按照功能分类逐个介绍流的中间操作和终点操作，最后会介绍第三方为Java Stream做的扩展。&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="http://tonydeng.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="java" scheme="http://tonydeng.github.io/tags/java/"/>
    
      <category term="stream" scheme="http://tonydeng.github.io/tags/stream/"/>
    
  </entry>
  
  <entry>
    <title>gitignore最佳实践</title>
    <link href="http://tonydeng.github.io/2016/04/01/gitignore/"/>
    <id>http://tonydeng.github.io/2016/04/01/gitignore/</id>
    <published>2016-04-01T08:00:17.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/gitignore.jpg&quot; alt=&quot;gitignore&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;gitignore的使用场景&quot;&gt;&lt;a href=&quot;#gitignore的使用场景&quot; class=&quot;headerlink&quot; title=&quot;gitignore的使用场景&quot;&gt;&lt;/a&gt;gitignore的使用场景&lt;/h2&gt;&lt;p&gt;使用Git的同学都知道&lt;code&gt;.gitignore&lt;/code&gt; 配置文件用于配置不需要加入版本管理的文件，对版本管理带来很大的便利。今天有个需求就是忽略版本库下除少数几个文件和文件夹之外的所有文件，首先想到的方式是使用gitignore树的概念，即在需要的文件夹下都添加 &lt;code&gt;.gitignore&lt;/code&gt; 文件，并在其中设定相应的规则。但是，这种方式比较麻烦。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;gitignore的使用模式&quot;&gt;&lt;a href=&quot;#gitignore的使用模式&quot; class=&quot;headerlink&quot; title=&quot;gitignore的使用模式&quot;&gt;&lt;/a&gt;gitignore的使用模式&lt;/h2&gt;&lt;p&gt;好好研究了一下gitignore的语法，知道了&lt;code&gt;.gitignore&lt;/code&gt; 文件过滤有两种模式：开放模式和保守模式。&lt;/p&gt;
&lt;h3 id=&quot;开放模式&quot;&gt;&lt;a href=&quot;#开放模式&quot; class=&quot;headerlink&quot; title=&quot;开放模式&quot;&gt;&lt;/a&gt;开放模式&lt;/h3&gt;&lt;p&gt;开放模式负责设置过滤哪些文件和文件夹&lt;/p&gt;
&lt;p&gt;例如： &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/target/ 表示项目根目录下的target文件夹里面所有的内容都会被过滤，不被跟踪

.classpath 表示项目根目录下的.classpath文件会被过滤，不被跟踪
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;保守模式&quot;&gt;&lt;a href=&quot;#保守模式&quot; class=&quot;headerlink&quot; title=&quot;保守模式&quot;&gt;&lt;/a&gt;保守模式&lt;/h3&gt;&lt;p&gt;保守模式负责设置哪些文件不被过滤，也就是哪些文件要被跟踪&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!/target/*.h 表示target文件夹目录下所有的.h文件将被跟踪
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有就是，gitignore是从上到下逐行匹配的，因此.gitignore文件的编写原则就是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先编写开放模式，在编写保守模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要不然，开放模式的规则会把保守模式的规则给覆盖了。&lt;/p&gt;
&lt;h2 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h2&gt;&lt;p&gt;下面附上我的 &lt;code&gt;.gitignore&lt;/code&gt; 文件的示例：&lt;/p&gt;
&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;!.gitignore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;!/posts/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只跟踪版本库中的.gitignore文件和posts目录。这里需要注意的是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一定是/*而不是*，/*表示当前目录下的所有文件，而不是所有文件*
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;gitignore的简单语法：&quot;&gt;&lt;a href=&quot;#gitignore的简单语法：&quot; class=&quot;headerlink&quot; title=&quot;gitignore的简单语法：&quot;&gt;&lt;/a&gt;gitignore的简单语法：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;以斜杠“/”开头表目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以星号“*”通配多字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以问号“?”通配单字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以方括号“[]”包含单个字符的匹列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以叹号“!”对匹配结果反&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h2&gt;&lt;p&gt;附上几个对大家有帮助的gitignore相关的链接。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://git-scm.com/docs/gitignore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git-scm官网的gitinore文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93#%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;progit的Git基础中gitignore相关的部分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/ignoring-files/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github的Ignoring files相关文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tonydeng/gitignore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我forked的Github的gitignore项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gitignore.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自动生成gitignore配置的网站&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/gitignore.jpg&quot; alt=&quot;gitignore&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;gitignore的使用场景&quot;&gt;&lt;a href=&quot;#gitignore的使用场景&quot; class=&quot;headerlink&quot; title=&quot;gitignore的使用场景&quot;&gt;&lt;/a&gt;gitignore的使用场景&lt;/h2&gt;&lt;p&gt;使用Git的同学都知道&lt;code&gt;.gitignore&lt;/code&gt; 配置文件用于配置不需要加入版本管理的文件，对版本管理带来很大的便利。今天有个需求就是忽略版本库下除少数几个文件和文件夹之外的所有文件，首先想到的方式是使用gitignore树的概念，即在需要的文件夹下都添加 &lt;code&gt;.gitignore&lt;/code&gt; 文件，并在其中设定相应的规则。但是，这种方式比较麻烦。&lt;/p&gt;
    
    </summary>
    
      <category term="效率" scheme="http://tonydeng.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="git" scheme="http://tonydeng.github.io/tags/git/"/>
    
      <category term="gitignore" scheme="http://tonydeng.github.io/tags/gitignore/"/>
    
  </entry>
  
  <entry>
    <title>批量转换文件编码</title>
    <link href="http://tonydeng.github.io/2015/11/27/batch-conversion-file-encoding/"/>
    <id>http://tonydeng.github.io/2015/11/27/batch-conversion-file-encoding/</id>
    <published>2015-11-27T04:11:11.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/encoding.png&quot; alt=&quot;encoding&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;之前同事有一个项目给过来，由于他之前的开发环境是Windows的，文件编码都是GBK的，看起挺不爽的，不符合我们现在的规范。需要将里面的文件全部转换成UTF8的文件编码。&lt;/p&gt;
&lt;p&gt;那我们应该怎么来做呢？&lt;/p&gt;
&lt;p&gt;很简单，写一个shell，利用 &lt;code&gt;iconv&lt;/code&gt;转换一下就好了，于是花了5分钟左右写了一个脚本来搞定这个事情。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;脚本&quot;&gt;&lt;a href=&quot;#脚本&quot; class=&quot;headerlink&quot; title=&quot;脚本&quot;&gt;&lt;/a&gt;脚本&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DIR=&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 转换编码文件目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FT=&lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 需要转换的文件类型（扩展名）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SE=&lt;span class=&quot;variable&quot;&gt;$3&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 原始编码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DE=&lt;span class=&quot;variable&quot;&gt;$4&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 目标编码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `find &lt;span class=&quot;variable&quot;&gt;$DIR&lt;/span&gt; -type f -name &lt;span class=&quot;string&quot;&gt;&quot;*.&lt;span class=&quot;variable&quot;&gt;$FT&lt;/span&gt;&quot;&lt;/span&gt;`; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;conversion &lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt; encoding &lt;span class=&quot;variable&quot;&gt;$SE&lt;/span&gt; to &lt;span class=&quot;variable&quot;&gt;$DE&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    iconv &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$SE&lt;/span&gt; -t &lt;span class=&quot;variable&quot;&gt;$DE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt;&quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt;&quot;&lt;/span&gt;.tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mv &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt;&quot;&lt;/span&gt;.tmp &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该脚本已经提交到&lt;a href=&quot;https://github.com/tonydeng/note/blob/1594ae267114effa910ff2511176d3dbf7968471/sh/batch_conversion_encoding.sh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;上。&lt;/p&gt;
&lt;h1 id=&quot;调用方式&quot;&gt;&lt;a href=&quot;#调用方式&quot; class=&quot;headerlink&quot; title=&quot;调用方式&quot;&gt;&lt;/a&gt;调用方式&lt;/h1&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~ ./batch_conversion_encoding&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt; ~/sdk1 java GBK UTF8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/encoding.png&quot; alt=&quot;encoding&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;之前同事有一个项目给过来，由于他之前的开发环境是Windows的，文件编码都是GBK的，看起挺不爽的，不符合我们现在的规范。需要将里面的文件全部转换成UTF8的文件编码。&lt;/p&gt;
&lt;p&gt;那我们应该怎么来做呢？&lt;/p&gt;
&lt;p&gt;很简单，写一个shell，利用 &lt;code&gt;iconv&lt;/code&gt;转换一下就好了，于是花了5分钟左右写了一个脚本来搞定这个事情。&lt;/p&gt;
    
    </summary>
    
      <category term="效率" scheme="http://tonydeng.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="shell" scheme="http://tonydeng.github.io/tags/shell/"/>
    
      <category term="iconv" scheme="http://tonydeng.github.io/tags/iconv/"/>
    
  </entry>
  
  <entry>
    <title>初试ETCD</title>
    <link href="http://tonydeng.github.io/2015/11/24/etcd-the-first-using/"/>
    <id>http://tonydeng.github.io/2015/11/24/etcd-the-first-using/</id>
    <published>2015-11-24T09:11:55.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/etcd/etcd-api.png&quot; alt=&quot;etcd logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前我们分享过&lt;a href=&quot;/2015/10/19/etcd-application-scenarios/&quot;&gt;ETCD应用场景&lt;/a&gt;，所有的应用场景都需要etcd提供的api来做支撑，所以这次我们就来看看ectd提供的REST API如何来使用。&lt;/p&gt;
&lt;p&gt;etcd 2.0之后，规范了端口号的使用，并且写入了&lt;a href=&quot;http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IANA组织的标准端口记录&lt;/a&gt;。etcd将提供给外部客户端的端口变为2379，而etcd服务间通信的端口变为2380（不过现在依然还是兼容原来4001和7001端口）。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装etcd&quot;&gt;&lt;a href=&quot;#安装etcd&quot; class=&quot;headerlink&quot; title=&quot;安装etcd&quot;&gt;&lt;/a&gt;安装etcd&lt;/h1&gt;&lt;p&gt;在mac osx下安装依然是非常简单，直接使用下面的命令就可以搞定。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  brew install etcd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; Downloading https:&lt;span class=&quot;comment&quot;&gt;//homebrew.bintray.com/bottles/etcd-2.2.1.el_capitan.bottle.tar.gz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Already downloaded: /Library/Caches/Homebrew/etcd-&lt;span class=&quot;number&quot;&gt;2.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.el_capitan&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.bottle&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.gz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; Pouring etcd-&lt;span class=&quot;number&quot;&gt;2.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.el_capitan&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.bottle&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.gz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; Caveats&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To have launchd start etcd at login:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ln -sfv /usr/local/opt/etcd&lt;span class=&quot;comment&quot;&gt;/*.plist ~/Library/LaunchAgents&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Then to load etcd now:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.etcd.plist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; Summary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;🍺  /usr/local/Cellar/etcd/2.2.1: 7 files, 39M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们来测试一下是否安装成功。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcd -version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;etcd &lt;span class=&quot;string&quot;&gt;Version:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Git &lt;span class=&quot;string&quot;&gt;SHA:&lt;/span&gt; GitNotFound&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Go &lt;span class=&quot;string&quot;&gt;Version:&lt;/span&gt; go1&lt;span class=&quot;number&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Go OS&lt;span class=&quot;regexp&quot;&gt;/Arch: darwin/&lt;/span&gt;amd64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;OK，看到上面的信息，就说明你已经安装成功了。从上面的信息可以看到安装的etcd版本是2.2.1，go的版本是1.5.1。&lt;/p&gt;
&lt;h1 id=&quot;启动etcd并测试服务&quot;&gt;&lt;a href=&quot;#启动etcd并测试服务&quot; class=&quot;headerlink&quot; title=&quot;启动etcd并测试服务&quot;&gt;&lt;/a&gt;启动etcd并测试服务&lt;/h1&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  http GET &lt;span class=&quot;string&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//127.0.0.1:2379/version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP/&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-&lt;span class=&quot;string&quot;&gt;Length:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-&lt;span class=&quot;string&quot;&gt;Type:&lt;/span&gt; application/json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Date:&lt;/span&gt; Wed, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; Nov &lt;span class=&quot;number&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;06&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;etcdcluster&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;2.2.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;etcdserver&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;2.2.1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于etcd启动参数及更多选项可以参考&lt;a href=&quot;https://github.com/coreos/etcd/blob/master/Documentation/configuration.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Etcd Configuration Flags&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;比较重要的配置&quot;&gt;&lt;a href=&quot;#比较重要的配置&quot; class=&quot;headerlink&quot; title=&quot;比较重要的配置&quot;&gt;&lt;/a&gt;比较重要的配置&lt;/h2&gt;&lt;p&gt;&lt;code&gt;-name&lt;/code&gt; 节点名称，默认是UUID&lt;br&gt;&lt;code&gt;-data-dir&lt;/code&gt; 保存日志和快照的目录，默认为当前工作目录&lt;br&gt;&lt;code&gt;-addr&lt;/code&gt; 公布的ip地址和端口。 默认为127.0.0.1:2379&lt;br&gt;&lt;code&gt;-bind-addr&lt;/code&gt; 用于客户端连接的监听地址，默认为-addr配置&lt;br&gt;&lt;code&gt;-peers&lt;/code&gt; 集群成员逗号分隔的列表，例如 127.0.0.1:2380,127.0.0.1:2381&lt;br&gt;&lt;code&gt;-peer-addr&lt;/code&gt; 集群服务通讯的公布的IP地址，默认为 127.0.0.1:2380.&lt;br&gt;&lt;code&gt;-peer-bind-addr&lt;/code&gt; 集群服务通讯的监听地址，默认为-peer-addr配置&lt;/p&gt;
&lt;p&gt;上述配置也可以设置配置文件，默认为&lt;code&gt;/etc/etcd/etcd.conf&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;试用etcd&quot;&gt;&lt;a href=&quot;#试用etcd&quot; class=&quot;headerlink&quot; title=&quot;试用etcd&quot;&gt;&lt;/a&gt;试用etcd&lt;/h1&gt;&lt;h2 id=&quot;ectdctl介绍&quot;&gt;&lt;a href=&quot;#ectdctl介绍&quot; class=&quot;headerlink&quot; title=&quot;ectdctl介绍&quot;&gt;&lt;/a&gt;ectdctl介绍&lt;/h2&gt;&lt;p&gt;我们可以使用&lt;a href=&quot;https://github.com/coreos/etcd/tree/master/etcdctl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;etcdctl&lt;/a&gt;这个官方提供的客户端来对etcd进行操作，可以从&lt;a href=&quot;https://github.com/coreos/etcd/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/coreos/etcd/releases&lt;/a&gt;下载。&lt;/p&gt;
&lt;p&gt;etcdctl是一个命令行的客户端，它提供了一下简洁的命令，可以方便我们在对服务进行测试或者手动修改数据库内容。建议刚刚接触etcd的同学可以先通过cetdctl来熟悉相关操作。这些操作跟&lt;a href=&quot;https://github.com/coreos/etcd/blob/master/Documentation/api.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP API&lt;/a&gt;基本上是对应的。&lt;/p&gt;
&lt;p&gt;etcdctl支持下面列出来的命令，基本上可以分为数据库操作和非数据库操作，可以查看&lt;a href=&quot;https://github.com/coreos/etcd/blob/master/etcdctl/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;etcdctl README.md&lt;/a&gt;来了解更多&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl -h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   etcdctl - A simple &lt;span class=&quot;keyword&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;etcd&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;USAGE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   etcdctl [&lt;span class=&quot;built_in&quot;&gt;global&lt;/span&gt; options] &lt;span class=&quot;keyword&quot;&gt;command&lt;/span&gt; [&lt;span class=&quot;title&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;options&lt;/span&gt;] [&lt;span class=&quot;title&quot;&gt;arguments&lt;/span&gt;...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VERSION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COMMANDS:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   backup		backup &lt;span class=&quot;keyword&quot;&gt;an&lt;/span&gt; etcd &lt;span class=&quot;built_in&quot;&gt;directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   cluster-health	check &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; health &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; etcd cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   mk			make &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; given &lt;span class=&quot;built_in&quot;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   mkdir		make &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   rm			remove &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   rmdir		removes &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; is &lt;span class=&quot;keyword&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; key-&lt;span class=&quot;built_in&quot;&gt;value&lt;/span&gt; pair&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt;			retrieve &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ls			retrieve &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;			&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   setdir		&lt;span class=&quot;built_in&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; existing &lt;span class=&quot;built_in&quot;&gt;directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   update		update &lt;span class=&quot;keyword&quot;&gt;an&lt;/span&gt; existing key &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; given &lt;span class=&quot;built_in&quot;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   updatedir		update &lt;span class=&quot;keyword&quot;&gt;an&lt;/span&gt; existing &lt;span class=&quot;built_in&quot;&gt;directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   watch		watch &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; changes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   exec-watch		watch &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; changes &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; exec &lt;span class=&quot;keyword&quot;&gt;an&lt;/span&gt; executable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   member		member &lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;, remove &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; list subcommands&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   import		import &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; snapshot &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   user			user &lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;, grant &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; revoke subcommands&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   role			role &lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;, grant &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; revoke subcommands&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   auth			overall auth controls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   help, h		Shows &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; list &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; commands &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; help &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;command&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GLOBAL OPTIONS:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--debug			output cURL commands which can be used to reproduce the request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--no-sync			don&#39;t synchronize cluster information before sending request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--output, -o &#39;simple&#39;	output response in the given format (`simple`, `extended` or `json`)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--discovery-srv, -D 		domain name to query for SRV records describing cluster endpoints&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--peers, -C 			a comma-delimited list of machine addresses in the cluster (default: &quot;http://127.0.0.1:4001,http://127.0.0.1:2379&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--endpoint 			a comma-delimited list of machine addresses in the cluster (default: &quot;http://127.0.0.1:4001,http://127.0.0.1:2379&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--cert-file 			identify HTTPS client using this SSL certificate file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--key-file 			identify HTTPS client using this SSL key file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--ca-file 			verify certificates of HTTPS-enabled servers using this CA bundle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--username, -u 		provide username[:password] and prompt if password is not supplied.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--timeout &#39;1s&#39;		connection timeout per request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--total-timeout &#39;5s&#39;		timeout for the command execution (except watch)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--help, -h			show help&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;--version, -v		print the version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;数据库操作&quot;&gt;&lt;a href=&quot;#数据库操作&quot; class=&quot;headerlink&quot; title=&quot;数据库操作&quot;&gt;&lt;/a&gt;数据库操作&lt;/h2&gt;&lt;p&gt;数据库操作围绕对键值和目录的 &lt;code&gt;CRUD&lt;/code&gt; （符合 REST 风格的一套操作：&lt;code&gt;Create&lt;/code&gt;）完整生命周期的管理。&lt;/p&gt;
&lt;p&gt;etcd 在键的组织上采用了层次化的空间结构（类似于文件系统中目录的概念），用户指定的键可以为单独的名字，如 &lt;code&gt;testkey&lt;/code&gt;，此时实际上放在根目录 &lt;code&gt;/&lt;/code&gt; 下面，也可以为指定目录结构，如 &lt;code&gt;cluster1/node2/testkey&lt;/code&gt;，则将创建相应的目录结构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：CRUD 即 Create, Read, Update, Delete，是符合 REST 风格的一套 API 操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;set&quot;&gt;&lt;a href=&quot;#set&quot; class=&quot;headerlink&quot; title=&quot;set&quot;&gt;&lt;/a&gt;set&lt;/h3&gt;&lt;p&gt;指定某个键的值。例如&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; /testdir/testkey &lt;span class=&quot;comment&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello &lt;span class=&quot;comment&quot;&gt;world&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;支持的选项包括：&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-ttl &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;            该键值的超时时间（单位为秒），不配置（默认为 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;）则永不超时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-swap-with-value value 若该键现在的值是 value，则进行设置操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-swap-with-index &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;    若该键现在的索引值是指定索引，则进行设置操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;get&quot;&gt;&lt;a href=&quot;#get&quot; class=&quot;headerlink&quot; title=&quot;get&quot;&gt;&lt;/a&gt;get&lt;/h3&gt;&lt;p&gt;获取指定键的值。例如&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; /testdir/testkey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当键不存在时，则会报错。例如&lt;/p&gt;
&lt;figure class=&quot;highlight vbnet&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; /testdir/testkey2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Error&lt;/span&gt;:  &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; found (/testdir/testkey2) [&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;支持的选项为&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-sort    对结果进行排序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-consistent 将请求发给主节点，保证获取内容的一致性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;update&quot;&gt;&lt;a href=&quot;#update&quot; class=&quot;headerlink&quot; title=&quot;update&quot;&gt;&lt;/a&gt;update&lt;/h3&gt;&lt;p&gt;当键存在时，更新值内容。例如&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl update &lt;span class=&quot;meta-keyword&quot;&gt;/testdir/&lt;/span&gt;testkey &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当键不存在时，则会报错。例如&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt; /testdir/testkey2 &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Error&lt;/span&gt;:  &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;found&lt;/span&gt; (/testdir/testkey2) [&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;支持的选项为&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-ttl &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;    超时时间（单位为秒），不配置（默认为 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;）则永不超时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;rm&quot;&gt;&lt;a href=&quot;#rm&quot; class=&quot;headerlink&quot; title=&quot;rm&quot;&gt;&lt;/a&gt;rm&lt;/h3&gt;&lt;p&gt;删除某个键值。例如&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl rm &lt;span class=&quot;regexp&quot;&gt;/testdir/&lt;/span&gt;testkey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PrevNode.&lt;span class=&quot;string&quot;&gt;Value:&lt;/span&gt; Hello&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当键不存在时，则会报错。例如&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl rm &lt;span class=&quot;meta-keyword&quot;&gt;/testdir/&lt;/span&gt;testkey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Error:&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;: Key not found (&lt;span class=&quot;meta-keyword&quot;&gt;/testdir/&lt;/span&gt;testkey) [&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;支持的选项为&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-dir        如果键是个空目录或者键值对则删除&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-recursive        删除目录和所有子键&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-with-value     检查现有的值是否匹配&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-with-index &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;    检查现有的 index 是否匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;mk&quot;&gt;&lt;a href=&quot;#mk&quot; class=&quot;headerlink&quot; title=&quot;mk&quot;&gt;&lt;/a&gt;mk&lt;/h3&gt;&lt;p&gt;如果给定的键不存在，则创建一个新的键值。例如&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl mk &lt;span class=&quot;meta-keyword&quot;&gt;/testdir/&lt;/span&gt;testkey &lt;span class=&quot;string&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当键存在的时候，执行该命令会报错，例如&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl mk &lt;span class=&quot;meta-keyword&quot;&gt;/testdir/&lt;/span&gt;testkey &lt;span class=&quot;string&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Error:&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;: Key already exists (&lt;span class=&quot;meta-keyword&quot;&gt;/testdir/&lt;/span&gt;testkey) [&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;支持的选项为&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-ttl &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;    超时时间（单位为秒），不配置（默认为 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;）则永不超时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;mkdir&quot;&gt;&lt;a href=&quot;#mkdir&quot; class=&quot;headerlink&quot; title=&quot;mkdir&quot;&gt;&lt;/a&gt;mkdir&lt;/h3&gt;&lt;p&gt;如果给定的键目录不存在，则创建一个新的键目录。例如&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl &lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; testdir2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当键目录存在的时候，执行该命令会报错，例如&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl &lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; testdir2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error:  &lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;: Key already &lt;span class=&quot;built_in&quot;&gt;exists&lt;/span&gt; (/testdir2) [&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;支持的选项为&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-ttl &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;    超时时间（单位为秒），不配置（默认为 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;）则永不超时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;setdir&quot;&gt;&lt;a href=&quot;#setdir&quot; class=&quot;headerlink&quot; title=&quot;setdir&quot;&gt;&lt;/a&gt;setdir&lt;/h3&gt;&lt;p&gt;创建一个键目录，无论存在与否。&lt;/p&gt;
&lt;p&gt;支持的选项为&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-ttl &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;    超时时间（单位为秒），不配置（默认为 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;）则永不超时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;updatedir&quot;&gt;&lt;a href=&quot;#updatedir&quot; class=&quot;headerlink&quot; title=&quot;updatedir&quot;&gt;&lt;/a&gt;updatedir&lt;/h3&gt;&lt;p&gt;更新一个已经存在的目录。 支持的选项为&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-ttl &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;    超时时间（单位为秒），不配置（默认为 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;）则永不超时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;rmdir&quot;&gt;&lt;a href=&quot;#rmdir&quot; class=&quot;headerlink&quot; title=&quot;rmdir&quot;&gt;&lt;/a&gt;rmdir&lt;/h3&gt;&lt;p&gt;删除一个空目录，或者键值对。&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl setdir dir1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl &lt;span class=&quot;built_in&quot;&gt;rmdir&lt;/span&gt; dir1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若目录不空，会报错&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; /dir/testkey &lt;span class=&quot;comment&quot;&gt;hi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl &lt;span class=&quot;comment&quot;&gt;rmdir&lt;/span&gt; /dir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error:  &lt;span class=&quot;number&quot;&gt;108&lt;/span&gt;: Directory &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; empty (/&lt;span class=&quot;comment&quot;&gt;dir) [29]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;ls&quot;&gt;&lt;a href=&quot;#ls&quot; class=&quot;headerlink&quot; title=&quot;ls&quot;&gt;&lt;/a&gt;ls&lt;/h3&gt;&lt;p&gt;列出目录（默认为根目录）下的键或者子目录，默认不显示子目录中内容。&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl &lt;span class=&quot;keyword&quot;&gt;ls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/testdir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/testdir2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;keyword&quot;&gt;dir&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl &lt;span class=&quot;keyword&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;dir&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;keyword&quot;&gt;dir&lt;/span&gt;/testkey&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;支持的选项包括&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-sort    将输出结果排序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-recursive    如果目录下有子目录，则递归输出其中的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;p        对于输出为目录，在最后添加 &lt;span class=&quot;string&quot;&gt;`/`&lt;/span&gt; 进行区分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;非数据库操作&quot;&gt;&lt;a href=&quot;#非数据库操作&quot; class=&quot;headerlink&quot; title=&quot;非数据库操作&quot;&gt;&lt;/a&gt;非数据库操作&lt;/h2&gt;&lt;h3 id=&quot;backup&quot;&gt;&lt;a href=&quot;#backup&quot; class=&quot;headerlink&quot; title=&quot;backup&quot;&gt;&lt;/a&gt;backup&lt;/h3&gt;&lt;p&gt;备份 etcd 的数据。&lt;/p&gt;
&lt;p&gt;支持的选项包括&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-data-dir         etcd 的数据目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-backup-dir     备份到指定路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;watch&quot;&gt;&lt;a href=&quot;#watch&quot; class=&quot;headerlink&quot; title=&quot;watch&quot;&gt;&lt;/a&gt;watch&lt;/h3&gt;&lt;p&gt;监测一个键值的变化，一旦键值发生更新，就会输出最新的值并退出。&lt;/p&gt;
&lt;p&gt;例如，用户更新 testkey 键值为 Hello watch。&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl get /testdir/testkey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; /testdir/testkey &lt;span class=&quot;comment&quot;&gt;&quot;Hello watch&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello &lt;span class=&quot;comment&quot;&gt;watch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl watch testdir/testkey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello watch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;支持的选项包括&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-forever        一直监测，直到用户按 &lt;span class=&quot;string&quot;&gt;`CTRL+C`&lt;/span&gt; 退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-after-index &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;    在指定 index 之前一直监测&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-recursive        返回所有的键值和子键值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;exec-watch&quot;&gt;&lt;a href=&quot;#exec-watch&quot; class=&quot;headerlink&quot; title=&quot;exec-watch&quot;&gt;&lt;/a&gt;exec-watch&lt;/h3&gt;&lt;p&gt;监测一个键值的变化，一旦键值发生更新，就执行给定命令。&lt;/p&gt;
&lt;p&gt;例如，用户更新 testkey 键值。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~  etcdctl exec-watch testkey -- sh -c &lt;span class=&quot;string&quot;&gt;&#39;ls&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default&lt;span class=&quot;selector-class&quot;&gt;.etcd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Documentation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;etcd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;etcdctl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;etcd-migrate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;README-etcdctl&lt;span class=&quot;selector-class&quot;&gt;.md&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;README.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;支持的选项包括&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-after-index &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;    在指定 index 之前一直监测&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-recursive        返回所有的键值和子键值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;member&quot;&gt;&lt;a href=&quot;#member&quot; class=&quot;headerlink&quot; title=&quot;member&quot;&gt;&lt;/a&gt;member&lt;/h3&gt;&lt;p&gt;通过 list、add、remove 命令列出、添加、删除 etcd 实例到 etcd 集群中。&lt;/p&gt;
&lt;p&gt;例如本地启动一个 etcd 服务实例后，可以用如下命令进行查看。&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ etcdctl member &lt;span class=&quot;keyword&quot;&gt;list&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ce2a822cea30bfc&lt;span class=&quot;variable&quot;&gt;a:&lt;/span&gt; name=default peerURLs=http://localhos&lt;span class=&quot;variable&quot;&gt;t:2380&lt;/span&gt;,http://localhos&lt;span class=&quot;variable&quot;&gt;t:7001&lt;/span&gt; clientURLs=http://localhos&lt;span class=&quot;variable&quot;&gt;t:2379&lt;/span&gt;,http://localhos&lt;span class=&quot;variable&quot;&gt;t:4001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;命令选项&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;-debug 输出 cURL 命令，显示执行命令的时候发起的请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-no-sync 发出请求之前不同步集群信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-output, -o &lt;span class=&quot;string&quot;&gt;&#39;simple&#39;&lt;/span&gt; 输出内容的格式 (simple 为原始信息，json 为进行json格式解码，易读性好一些)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-peers, -C 指定集群中的同伴信息，用逗号隔开 (默认为: &lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1:4001&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-cert-file HTTPS 下客户端使用的 SSL 证书文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-key-file HTTPS 下客户端使用的 SSL 密钥文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-ca-file 服务端使用 HTTPS 时，使用 CA 文件进行验证&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-help, -h 显示帮助命令信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;-version, -v 打印版本信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/etcd/etcd-api.png&quot; alt=&quot;etcd logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前我们分享过&lt;a href=&quot;/2015/10/19/etcd-application-scenarios/&quot;&gt;ETCD应用场景&lt;/a&gt;，所有的应用场景都需要etcd提供的api来做支撑，所以这次我们就来看看ectd提供的REST API如何来使用。&lt;/p&gt;
&lt;p&gt;etcd 2.0之后，规范了端口号的使用，并且写入了&lt;a href=&quot;http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xml&quot;&gt;IANA组织的标准端口记录&lt;/a&gt;。etcd将提供给外部客户端的端口变为2379，而etcd服务间通信的端口变为2380（不过现在依然还是兼容原来4001和7001端口）。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="http://tonydeng.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="etcd" scheme="http://tonydeng.github.io/tags/etcd/"/>
    
      <category term="restful" scheme="http://tonydeng.github.io/tags/restful/"/>
    
      <category term="api" scheme="http://tonydeng.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>安装Leiningen</title>
    <link href="http://tonydeng.github.io/2015/11/19/install-leiningen/"/>
    <id>http://tonydeng.github.io/2015/11/19/install-leiningen/</id>
    <published>2015-11-19T09:56:48.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/leiningen.png&quot; alt=&quot;leiningen logo&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Leiningen简单介绍&quot;&gt;&lt;a href=&quot;#Leiningen简单介绍&quot; class=&quot;headerlink&quot; title=&quot;Leiningen简单介绍&quot;&gt;&lt;/a&gt;Leiningen简单介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://leiningen.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leiningen&lt;/a&gt;是&lt;a href=&quot;https://clojure.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clojure&lt;/a&gt;（貌似需要自备梯子）的项目生命周期管理工具，就像&lt;a href=&quot;http://maven.apache.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Maven&lt;/a&gt;在&lt;a href=&quot;https://java.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java&lt;/a&gt;中的地位一样。&lt;/p&gt;
&lt;p&gt;关于Leiningen具体的情况和使用方法，它的&lt;a href=&quot;http://leiningen.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;和&lt;a href=&quot;https://github.com/technomancy/leiningen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;看看，上面会有更清楚的描述。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装过程&quot;&gt;&lt;a href=&quot;#安装过程&quot; class=&quot;headerlink&quot; title=&quot;安装过程&quot;&gt;&lt;/a&gt;安装过程&lt;/h2&gt;&lt;p&gt;我只是给大家说说，在安装Leiningen时可能会碰到的坑。&lt;/p&gt;
&lt;p&gt;先说说，基本安装流程，咱们就遇坑填坑。&lt;/p&gt;
&lt;h3 id=&quot;下载lein命令&quot;&gt;&lt;a href=&quot;#下载lein命令&quot; class=&quot;headerlink&quot; title=&quot;下载lein命令&quot;&gt;&lt;/a&gt;下载lein命令&lt;/h3&gt;&lt;p&gt;下载Leiningen很简单，你使用我的命令来直接下载（仅限Mac OSX和Linux）。当然，你也可以尝试用自己系统的包管理系统来安装。比如Mac OSX可以使用&lt;code&gt;brew install leiningen&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;cd /usr/local/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;wget &lt;span class=&quot;symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/raw.githubusercontent.com/technomancy&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/leiningen/stable&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/bin/lein&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;chmod &lt;span class=&quot;number&quot;&gt;755&lt;/span&gt; lein&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那我们是否就已经算是安装成功，可以使用Leiningen了呢？别着急，你要是有兴趣，你看看lein这个命令，它其实就只是一段&lt;code&gt;Shell&lt;/code&gt;脚本，光有它还是不够的。&lt;/p&gt;
&lt;h3 id=&quot;下载Leiningen&quot;&gt;&lt;a href=&quot;#下载Leiningen&quot; class=&quot;headerlink&quot; title=&quot;下载Leiningen&quot;&gt;&lt;/a&gt;下载Leiningen&lt;/h3&gt;&lt;p&gt;你可以执行一下lein，它就会自动帮你下载正在工作的那个具有超牛力的Leiningen。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;lein &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Downloading Leiningen to /Users/tonydeng/.lein/&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;-installs/leiningen-&lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;-standalone.jar now...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                 Dload  Upload   Total   Spent    Left  Speed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;605&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;605&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;262&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; --&lt;span class=&quot;symbol&quot;&gt;:--&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:--&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;02&lt;/span&gt; --&lt;span class=&quot;symbol&quot;&gt;:--&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:--&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;262&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15.0&lt;/span&gt;M    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; --&lt;span class=&quot;symbol&quot;&gt;:--&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:--&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt; --&lt;span class=&quot;symbol&quot;&gt;:--&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:--&lt;/span&gt;     &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15.0&lt;/span&gt;M    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; --&lt;span class=&quot;symbol&quot;&gt;:--&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:--&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;38&lt;/span&gt; --&lt;span class=&quot;symbol&quot;&gt;:--&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:--&lt;/span&gt;     &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我就满心期待的等啊等啊，可惜等到的只是一个让人沮丧的错误提示。&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Failed &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; download &lt;span class=&quot;keyword&quot;&gt;https&lt;/span&gt;://github.com/technomancy/leiningen/releases/download/&lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.3&lt;/span&gt;/leiningen&lt;span class=&quot;number&quot;&gt;-2.5&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.3&lt;/span&gt;-standalone.zip (exit code &lt;span class=&quot;number&quot;&gt;56&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;It&lt;span class=&quot;string&quot;&gt;&#39;s possible your HTTP client&#39;&lt;/span&gt;s certificate store does &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;correct certificate authority needed. This is often caused &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;an&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out-&lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; libssl. It&lt;span class=&quot;string&quot;&gt;&#39;s also possible that you&#39;&lt;/span&gt;re behind &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;firewall &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; haven&lt;span class=&quot;string&quot;&gt;&#39;t set HTTP_PROXY and HTTPS_PROXY.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看到这个提示之后，我的第一反应就是 &lt;del&gt;Fuck GFW&lt;/del&gt;！赶紧搭上梯子，再试，依然是不好使。然后怀疑是&lt;code&gt;curl&lt;/code&gt;的问题，升级&lt;code&gt;curl&lt;/code&gt;到最新版本，依然是不行。没有办法，只好祭出Google（min）大（gan）法（ci）。&lt;/p&gt;
&lt;p&gt;就看到了下面这个leiningen项目中的issue #1634 – &lt;a href=&quot;https://github.com/technomancy/leiningen/issues/1634&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leiningen installation issue on Debian Wheezy #1634&lt;/a&gt;，试了试上面给的方案，设置一下&lt;code&gt;HTTP_CLIENT&lt;/code&gt;，毕竟上面的错误提示也说到了证书的问题。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; HTTP_CLIENT=&lt;span class=&quot;string&quot;&gt;&quot;wget --no-check-certificate -O&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些就OK了。&lt;/p&gt;
&lt;p&gt;不过，让我比较郁闷的，为什么Leiningen版本升级之后，反而错误提示比以前的版本要检阅了呢？还是说，我使用的系统和这个 &lt;code&gt;issue #1634&lt;/code&gt;遇到问题的操作系统不一样呢？不管怎么样，也算是安装成功了。&lt;/p&gt;
&lt;p&gt;当你看到下面的命令输出，就说明安装成功了。&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ lein &lt;span class=&quot;comment&quot;&gt;--version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Leiningen &lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.3&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; Java &lt;span class=&quot;number&quot;&gt;1.8&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;_40 Java HotSpot(TM) &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;-Bit Server VM&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以使用Leiningen的帮助来简单看看它提供的功能。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ lein -&lt;span class=&quot;built_in&quot;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Leiningen is a tool &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; working with Clojure projects.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Several tasks are available:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;change              Rewrite project.clj &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; applying a function.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;check               Check &lt;span class=&quot;keyword&quot;&gt;syntax&lt;/span&gt; and warn &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; reflection.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;classpath           &lt;span class=&quot;keyword&quot;&gt;Print&lt;/span&gt; the classpath of the current project.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clean               Remove all files from project&#39;s target-path.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compile             Compile Clojure source into .&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; files.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deploy              Build and deploy jar to remote repository.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deps                Download all dependencies.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;                  Higher-&lt;span class=&quot;keyword&quot;&gt;order&lt;/span&gt; task to perform other tasks &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; succession.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt;                &lt;span class=&quot;keyword&quot;&gt;Display&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;list&lt;/span&gt; of tasks or &lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a given task.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;install             Install the current project to the &lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt; repository.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jar                 Package up all the project&#39;s files into a jar &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;javac               Compile Java source files.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;new                 &lt;span class=&quot;keyword&quot;&gt;Generate&lt;/span&gt; project scaffolding based &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; a template.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt;              DEPRECATED. Please &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; the :user profile instead.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pom                 Write a pom.xml &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; to disk &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; Maven interoperability.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;release             Perform :release-tasks.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;repl                Start a repl session either with the current project or standalone.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;retest              &lt;span class=&quot;keyword&quot;&gt;Run&lt;/span&gt; only the &lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt; namespaces &lt;span class=&quot;keyword&quot;&gt;which&lt;/span&gt; failed last time around.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;run&lt;/span&gt;                 &lt;span class=&quot;keyword&quot;&gt;Run&lt;/span&gt; a -main function with optional command-&lt;span class=&quot;keyword&quot;&gt;line&lt;/span&gt; arguments.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;search&lt;/span&gt;              &lt;span class=&quot;keyword&quot;&gt;Search&lt;/span&gt; remote maven repositories &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; matching jars.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;show-profiles       &lt;span class=&quot;keyword&quot;&gt;List&lt;/span&gt; all available profiles or &lt;span class=&quot;keyword&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; given &lt;span class=&quot;keyword&quot;&gt;an&lt;/span&gt; argument.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;                &lt;span class=&quot;keyword&quot;&gt;Run&lt;/span&gt; the project&#39;s tests.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline          &lt;span class=&quot;keyword&quot;&gt;Run&lt;/span&gt; a task without nesting the project&#39;s JVM inside Leiningen&#39;s.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uberjar             Package up the project files and dependencies into a jar &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;           Perform arbitrary transformations &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; your project map.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;upgrade             Upgrade Leiningen to specified &lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt; or latest stable.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vcs                 Interact with the &lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt; control system.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt;             &lt;span class=&quot;keyword&quot;&gt;Print&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; Leiningen and the current JVM.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;with-profile        Apply the given task with the profile(s) specified.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Run&lt;/span&gt; `lein &lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$TASK&lt;/span&gt;` &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; details.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Global&lt;/span&gt; Options:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -o             &lt;span class=&quot;keyword&quot;&gt;Run&lt;/span&gt; a task offline.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&lt;span class=&quot;keyword&quot;&gt;U&lt;/span&gt;             &lt;span class=&quot;keyword&quot;&gt;Run&lt;/span&gt; a task after forcing &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt; of snapshots.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&lt;span class=&quot;keyword&quot;&gt;h&lt;/span&gt;, --&lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;Print&lt;/span&gt; this &lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt; or &lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a specific task.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -v, --&lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;Print&lt;/span&gt; Leiningen&#39;s &lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;These aliases are available:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;downgrade, expands to upgrade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;See also: readme, faq, &lt;span class=&quot;keyword&quot;&gt;tutorial&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;news&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sample&lt;/span&gt;, profiles, deploying, gpg,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mixed-source, templates, and copying.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来，我就要使用Leiningen来创建和管理Clojure项目了。可以参考一下&lt;a href=&quot;https://github.com/technomancy/leiningen/blob/stable/sample.project.clj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方提供的简单project.clj例子&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;新建Clojure项目&quot;&gt;&lt;a href=&quot;#新建Clojure项目&quot; class=&quot;headerlink&quot; title=&quot;新建Clojure项目&quot;&gt;&lt;/a&gt;新建Clojure项目&lt;/h2&gt;&lt;p&gt;用下面的命令就可以轻松创建一下用Leiningen管理的Clojure项目。&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  lein &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; clojure-&lt;span class=&quot;built_in&quot;&gt;demo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们来看看项目的目录结构，非常全面。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  clojure-demo git:(master)  tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── CHANGELOG&lt;span class=&quot;selector-class&quot;&gt;.md&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── LICENSE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── README&lt;span class=&quot;selector-class&quot;&gt;.md&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── clojure-demo&lt;span class=&quot;selector-class&quot;&gt;.iml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── dev-resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── doc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── intro&lt;span class=&quot;selector-class&quot;&gt;.md&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── project&lt;span class=&quot;selector-class&quot;&gt;.clj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── clojure_demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── core&lt;span class=&quot;selector-class&quot;&gt;.clj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── classes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── META-INF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │       └── maven&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │           └── clojure-demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │               └── clojure-demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │                   └── pom&lt;span class=&quot;selector-class&quot;&gt;.properties&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── stale&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── extract-native&lt;span class=&quot;selector-class&quot;&gt;.dependencies&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── clojure_demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        └── core_test.clj&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，今天就先弄到这儿。改天在继续更新这个Leiningen + Clojure之旅，比如Leiningen和Maven的整合、Clojure和Java的互相调用等等。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/leiningen.png&quot; alt=&quot;leiningen logo&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Leiningen简单介绍&quot;&gt;&lt;a href=&quot;#Leiningen简单介绍&quot; class=&quot;headerlink&quot; title=&quot;Leiningen简单介绍&quot;&gt;&lt;/a&gt;Leiningen简单介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://leiningen.org&quot;&gt;Leiningen&lt;/a&gt;是&lt;a href=&quot;https://clojure.org&quot;&gt;Clojure&lt;/a&gt;（貌似需要自备梯子）的项目生命周期管理工具，就像&lt;a href=&quot;http://maven.apache.org&quot;&gt;Maven&lt;/a&gt;在&lt;a href=&quot;https://java.com&quot;&gt;Java&lt;/a&gt;中的地位一样。&lt;/p&gt;
&lt;p&gt;关于Leiningen具体的情况和使用方法，它的&lt;a href=&quot;http://leiningen.org&quot;&gt;官网&lt;/a&gt;和&lt;a href=&quot;https://github.com/technomancy/leiningen&quot;&gt;GitHub&lt;/a&gt;看看，上面会有更清楚的描述。&lt;br&gt;
    
    </summary>
    
      <category term="Leiningen + Clojure之旅" scheme="http://tonydeng.github.io/categories/Leiningen-Clojure%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="leiningen" scheme="http://tonydeng.github.io/tags/leiningen/"/>
    
      <category term="clojure" scheme="http://tonydeng.github.io/tags/clojure/"/>
    
  </entry>
  
  <entry>
    <title>工程师字体</title>
    <link href="http://tonydeng.github.io/2015/11/19/engineering-fonts/"/>
    <id>http://tonydeng.github.io/2015/11/19/engineering-fonts/</id>
    <published>2015-11-19T02:33:27.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://dejavu-fonts.org/wiki/images/d/d3/Dejavu_title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;工程师是一个比较有有意思的群体，比如像我这样有些强迫症的工程师，开始工作之前必须要先选择一个对工程师友好的字体。&lt;/p&gt;
&lt;p&gt;国外有人在2009年就写了一篇文章讲关于程序员的字体。&lt;a href=&quot;http://hivelogic.com/articles/top-10-programming-fonts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;top 10 programming forts&lt;/a&gt;，上面列了不少优秀的字体。&lt;/p&gt;
&lt;p&gt;知乎上也有不少人在讨论程序员用什么字体比较爽，比如&lt;a href=&quot;http://www.zhihu.com/question/20455297&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【哪些字体适合程序员用来维护代码？】&lt;/a&gt; ， &lt;a href=&quot;http://www.zhihu.com/question/19637242&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【程序员编程看起来最舒服的字体（英文的和中文的）、字号、颜色和背景色是什么？】&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;不过，经过我自己的测试，还是觉得“&lt;a href=&quot;http://www.dafont.com/bitstream-vera-mono.font&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bitstream Vera Mono&lt;/a&gt;”，和“&lt;a href=&quot;http://dejavu-fonts.org/wiki/Main_Page&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DejaVu Sans Mono&lt;/a&gt;”最好用，给大家推荐一下。&lt;/p&gt;
&lt;p&gt;贴一下在终端的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/engineering-fonts/bitstream-vera-mono.png&quot; alt=&quot;bitestream-vera-mono font&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dejavu-fonts.org/wiki/images/d/d3/Dejavu_title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;工程师是一个比较有有意思的群体，比如像我这样有些强迫症的工程师，开始工作之前必须要先选择一个对工程师友好的
    
    </summary>
    
      <category term="效率" scheme="http://tonydeng.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="engineering" scheme="http://tonydeng.github.io/tags/engineering/"/>
    
      <category term="fonts" scheme="http://tonydeng.github.io/tags/fonts/"/>
    
      <category term="Bitstream Vera Mono" scheme="http://tonydeng.github.io/tags/Bitstream-Vera-Mono/"/>
    
      <category term="DejaVu Sans Mono" scheme="http://tonydeng.github.io/tags/DejaVu-Sans-Mono/"/>
    
  </entry>
  
  <entry>
    <title>在Java中使用Maven配置的版本信息</title>
    <link href="http://tonydeng.github.io/2015/11/17/using-maven-version/"/>
    <id>http://tonydeng.github.io/2015/11/17/using-maven-version/</id>
    <published>2015-11-17T10:56:48.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/using-maven-version.png&quot; alt=&quot;HSC Maven Version&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景描述&quot;&gt;&lt;a href=&quot;#场景描述&quot; class=&quot;headerlink&quot; title=&quot;场景描述&quot;&gt;&lt;/a&gt;场景描述&lt;/h2&gt;&lt;p&gt;我们在开发一些项目的时候需要知道当前的版本状态，比如传递版本客户端信息到服务端等等。&lt;/p&gt;
&lt;p&gt;那我们有些什么办法能够获取当前项目版本呢？&lt;/p&gt;
&lt;p&gt;比较简单的办法就是在我们的程序中写一个常量来记录版本号，每次升级了就更新这个常量。但是这个方案还需要我们每次升级的时候都要记得这个事情，这个对于我这种记性不太好的人来说，简直就是灾难。&lt;/p&gt;
&lt;p&gt;那还有什么更好的办法吗？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;那我们可以从本身项目所使用的项目生命周期管理工具来考虑。比如现在&lt;code&gt;Java&lt;/code&gt;的项目大部分还是用Maven来做项目生命周期管理的，那我们可不可以将&lt;code&gt;Maven&lt;/code&gt;所记录的版本信息读取出来呢？&lt;/p&gt;
&lt;p&gt;应该是可以，不过，如果要读取出来，我们是否需要去分析&lt;code&gt;Maven&lt;/code&gt;的&lt;code&gt;pom.xml&lt;/code&gt;文件吗？如果是这样，工作量也有点大。&lt;/p&gt;
&lt;p&gt;其实&lt;code&gt;maven&lt;/code&gt;已经给出了方案，就是可以在自定义的资源文件（&lt;code&gt;properties&lt;/code&gt;）中放置&lt;code&gt;pom.xml&lt;/code&gt;设置的变量，就会自动将变量替换成为真实地值。&lt;/p&gt;
&lt;h2 id=&quot;例子：&quot;&gt;&lt;a href=&quot;#例子：&quot; class=&quot;headerlink&quot; title=&quot;例子：&quot;&gt;&lt;/a&gt;例子：&lt;/h2&gt;&lt;p&gt;我有一个hsc的项目，代码中需要知道当前项目的版本。那我应该怎么来做呢？&lt;/p&gt;
&lt;h3 id=&quot;在src-main-resources-hsc-application-properties文件中放置如下内容：&quot;&gt;&lt;a href=&quot;#在src-main-resources-hsc-application-properties文件中放置如下内容：&quot; class=&quot;headerlink&quot; title=&quot;在src/main/resources/hsc-application.properties文件中放置如下内容：&quot;&gt;&lt;/a&gt;在src/main/resources/hsc-application.properties文件中放置如下内容：&lt;/h3&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hsc.&lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;variable&quot;&gt;$&amp;#123;project&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置pom-xml&quot;&gt;&lt;a href=&quot;#配置pom-xml&quot; class=&quot;headerlink&quot; title=&quot;配置pom.xml&quot;&gt;&lt;/a&gt;配置pom.xml&lt;/h3&gt;&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;params&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;params&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;params&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;src&lt;span class=&quot;meta-keyword&quot;&gt;/main/&lt;/span&gt;resources&lt;span class=&quot;params&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;params&quot;&gt;&amp;lt;filtering&amp;gt;&lt;/span&gt;true&lt;span class=&quot;params&quot;&gt;&amp;lt;/filtering&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;params&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;params&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;实现对hsc-version的读取&quot;&gt;&lt;a href=&quot;#实现对hsc-version的读取&quot; class=&quot;headerlink&quot; title=&quot;实现对hsc.version的读取&quot;&gt;&lt;/a&gt;实现对hsc.version的读取&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 获取HSC版本信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getHSCVersion&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (null == HSCVersion) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Properties properties = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Properties();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               properties.load(HSCUtils.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;.getClassLoader().getResourceAsStream(&lt;span class=&quot;string&quot;&gt;&quot;hsc-application.properties&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!properties.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   HSCVersion = properties.getProperty(&lt;span class=&quot;string&quot;&gt;&quot;hsc.version&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HSCVersion;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;测试获取版本信息&quot;&gt;&lt;a href=&quot;#测试获取版本信息&quot; class=&quot;headerlink&quot; title=&quot;测试获取版本信息&quot;&gt;&lt;/a&gt;测试获取版本信息&lt;/h3&gt;&lt;figure class=&quot;highlight d&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; testApplicationVersion()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      String &lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt; = HSCUtils.getHSCVersion();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      log.info(&lt;span class=&quot;string&quot;&gt;&quot;hsc version:&#39;&amp;#123;&amp;#125;&#39;&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://books.sonatype.com/mvnref-book/reference/resource-filtering-sect-properties.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;maven可以使用内部变量&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/using-maven-version.png&quot; alt=&quot;HSC Maven Version&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景描述&quot;&gt;&lt;a href=&quot;#场景描述&quot; class=&quot;headerlink&quot; title=&quot;场景描述&quot;&gt;&lt;/a&gt;场景描述&lt;/h2&gt;&lt;p&gt;我们在开发一些项目的时候需要知道当前的版本状态，比如传递版本客户端信息到服务端等等。&lt;/p&gt;
&lt;p&gt;那我们有些什么办法能够获取当前项目版本呢？&lt;/p&gt;
&lt;p&gt;比较简单的办法就是在我们的程序中写一个常量来记录版本号，每次升级了就更新这个常量。但是这个方案还需要我们每次升级的时候都要记得这个事情，这个对于我这种记性不太好的人来说，简直就是灾难。&lt;/p&gt;
&lt;p&gt;那还有什么更好的办法吗？&lt;/p&gt;
    
    </summary>
    
      <category term="效率" scheme="http://tonydeng.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="java" scheme="http://tonydeng.github.io/tags/java/"/>
    
      <category term="maven" scheme="http://tonydeng.github.io/tags/maven/"/>
    
      <category term="properties" scheme="http://tonydeng.github.io/tags/properties/"/>
    
      <category term="version" scheme="http://tonydeng.github.io/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>Java发送邮件出现&quot;no object dch for mime type multipart/mixed&quot;异常的解决办法及过程</title>
    <link href="http://tonydeng.github.io/2015/10/30/java-mail-no-object-dch-for-mime-type-multipart-mixed/"/>
    <id>http://tonydeng.github.io/2015/10/30/java-mail-no-object-dch-for-mime-type-multipart-mixed/</id>
    <published>2015-10-30T10:00:50.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/email-error/error.jpg&quot; alt=&quot;email error&quot;&gt;&lt;/p&gt;
&lt;p&gt;前两天写了一个发送邮件的功能，结果出现了一个比较灵异的状况，现在整理一下解决办法和中间的过程。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;发送邮件配置及代码&quot;&gt;&lt;a href=&quot;#发送邮件配置及代码&quot; class=&quot;headerlink&quot; title=&quot;发送邮件配置及代码&quot;&gt;&lt;/a&gt;发送邮件配置及代码&lt;/h1&gt;&lt;p&gt;通过Java来发送邮件现在已经是非常方便就实现的功能。只需要使用&lt;code&gt;commons-email&lt;/code&gt;这个第三方的包就可以很轻松的完成功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;commons-email&lt;/code&gt;的&lt;code&gt;maven&lt;/code&gt;依赖配置&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.commons&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;commons-email&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.3.3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它会传递依赖&lt;code&gt;mail&lt;/code&gt;和&lt;code&gt;activation&lt;/code&gt;这两个包&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.mail&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mail&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.4.5&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.activation&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;activation&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.1.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发送邮件的代码也非常简单：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 发送邮件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; recipients&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; subject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; TException&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendMails&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Recipient&amp;gt; recipients, String subject, String content)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;InternetAddress&amp;gt; addresses = getReplys(recipients);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(log.isInfoEnabled())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            log.info(&lt;span class=&quot;string&quot;&gt;&quot;send mail to recipients:&#39;&amp;#123;&amp;#125;&#39; subject:&#39;&amp;#123;&amp;#125;&#39;&quot;&lt;/span&gt;, addresses, subject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(CollectionUtils.isNotEmpty(addresses))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Email email = settingEmail(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HtmlEmail());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            email.setSubject(subject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            email.setMsg(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            email.setTo(addresses);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            email.send();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (EmailException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 设置邮件配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; email&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; EmailException&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;Email &lt;span class=&quot;title&quot;&gt;settingEmail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Email email)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; EmailException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    email.setHostName(mailConfig.getProperty(&lt;span class=&quot;string&quot;&gt;&quot;mail.host&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    email.setCharset(mailConfig.getProperty(&lt;span class=&quot;string&quot;&gt;&quot;mail.charset&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    email.setSSLOnConnect(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    email.setAuthentication(mailConfig.getProperty(&lt;span class=&quot;string&quot;&gt;&quot;mail.username&quot;&lt;/span&gt;), mailConfig.getProperty(&lt;span class=&quot;string&quot;&gt;&quot;mail.password&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    email.setFrom(mailConfig.getProperty(&lt;span class=&quot;string&quot;&gt;&quot;mail.from&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; email;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;OK，代码写完了，单元测试也没有问题，一般情况下，就认为这个功能完成了，那么就打包部署吧。我现在使用了&lt;code&gt;Thrift&lt;/code&gt;作为RPC框架，没有想到部署到测试环境中发现使用&lt;code&gt;Thrift&lt;/code&gt;客户端调用发送邮件服务却无法正常发送邮件。&lt;/p&gt;
&lt;h1 id=&quot;灵异状况&quot;&gt;&lt;a href=&quot;#灵异状况&quot; class=&quot;headerlink&quot; title=&quot;灵异状况&quot;&gt;&lt;/a&gt;灵异状况&lt;/h1&gt;&lt;p&gt;查看日志，却发现出现了下面的异常。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Caused &lt;span class=&quot;keyword&quot;&gt;by: &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;javax.activation.UnsupportedDataTypeException: &lt;/span&gt;no object DCH for MIME type &lt;span class=&quot;keyword&quot;&gt;multipart/mixed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;	&lt;span class=&quot;keyword&quot;&gt;boundary=&quot;----=_Part_0_1434202756.1446193111088&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;	&lt;span class=&quot;built_in&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;javax.activation.ObjectDataContentHandler.writeTo(DataHandler.java:896)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;	&lt;span class=&quot;built_in&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;javax.activation.DataHandler.writeTo(DataHandler.java:317)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;	&lt;span class=&quot;built_in&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;javax.mail.internet.MimeBodyPart.writeTo(MimeBodyPart.java:1485)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;	&lt;span class=&quot;built_in&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;javax.mail.internet.MimeMessage.writeTo(MimeMessage.java:1773)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;	&lt;span class=&quot;built_in&quot;&gt;at&lt;/span&gt; com.sun.mail.smtp.SMTPTransport.sendMessage(SMTPTransport.&lt;span class=&quot;keyword&quot;&gt;java:1121)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;	... &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt; more&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当时的第一反应，是否是邮件服务器那边做了调整，出现新的状况？毕竟之前的单元测试也没有问题。&lt;/p&gt;
&lt;p&gt;那重新写一个新的单元测试看看是怎么回事。&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testSendMails&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;Recipient&amp;gt; recipients = Lists.newArrayList(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Recipient(&lt;span class=&quot;string&quot;&gt;&quot;tonydeng&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;tonydeng@github.com&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    notifyUtils.sendMails(recipients,&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;跑了好几次，都可以正常发送邮件，那是怎么回事？难道是通过thrift之后，中间有些信息发生变化？&lt;/p&gt;
&lt;p&gt;将代码通过maven打包成功可执行的jar，启动thrift server，在调用Agent项目的单元测试，果然出现&lt;strong&gt;“no object DCH for MIME type multipart/mixed;”&lt;/strong&gt;的异常。&lt;/p&gt;
&lt;p&gt;果然很灵异，一般来说，在邮件服务的单元测试跑通之后，这个功能就应该是没有问题了。&lt;/p&gt;
&lt;p&gt;现在出现了在服务端写的单元测试可以跑通，客户端的单元测试却出现异常。&lt;/p&gt;
&lt;h1 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h1&gt;&lt;p&gt;翻墙通过Google查了一下，主要的原因都是因为&lt;code&gt;mailcap&lt;/code&gt;配置的问题。解决方案有两个。&lt;/p&gt;
&lt;h2 id=&quot;一个是在代码中加上一段mailcap配置&quot;&gt;&lt;a href=&quot;#一个是在代码中加上一段mailcap配置&quot; class=&quot;headerlink&quot; title=&quot;一个是在代码中加上一段mailcap配置&quot;&gt;&lt;/a&gt;一个是在代码中加上一段mailcap配置&lt;/h2&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MailcapCommandMap mc = (MailcapCommandMap) CommandMap.getDefaultCommandMap()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mc.&lt;span class=&quot;keyword&quot;&gt;addMailcap(&quot;text/html;; &lt;/span&gt;x-&lt;span class=&quot;keyword&quot;&gt;java-content-handler=com.sun.mail.handlers.text_html&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;mc.&lt;span class=&quot;keyword&quot;&gt;addMailcap(&quot;text/xml;; &lt;/span&gt;x-&lt;span class=&quot;keyword&quot;&gt;java-content-handler=com.sun.mail.handlers.text_xml&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;mc.&lt;span class=&quot;keyword&quot;&gt;addMailcap(&quot;text/plain;; &lt;/span&gt;x-&lt;span class=&quot;keyword&quot;&gt;java-content-handler=com.sun.mail.handlers.text_plain&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;mc.&lt;span class=&quot;keyword&quot;&gt;addMailcap(&quot;multipart/*;; &lt;/span&gt;x-&lt;span class=&quot;keyword&quot;&gt;java-content-handler=com.sun.mail.handlers.multipart_mixed&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;mc.&lt;span class=&quot;keyword&quot;&gt;addMailcap(&quot;message/rfc822;; &lt;/span&gt;x-&lt;span class=&quot;keyword&quot;&gt;java-content-handler=com.sun.mail.handlers.message_rfc822&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;CommandMap.setDefaultCommandMap(mc)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;一个是将javax-mail下的mailcap相关文件复制到当前项目的META-INF目录下。&quot;&gt;&lt;a href=&quot;#一个是将javax-mail下的mailcap相关文件复制到当前项目的META-INF目录下。&quot; class=&quot;headerlink&quot; title=&quot;一个是将javax.mail下的mailcap相关文件复制到当前项目的META-INF目录下。&quot;&gt;&lt;/a&gt;一个是将javax.mail下的mailcap相关文件复制到当前项目的&lt;code&gt;META-INF&lt;/code&gt;目录下。&lt;/h2&gt;&lt;p&gt;查看了一下&lt;code&gt;MailcapCommandMap&lt;/code&gt;源码，在&lt;code&gt;META-INF&lt;/code&gt;中加入&lt;code&gt;mailcap&lt;/code&gt;配置文件，也应该能够和在代码中加入&lt;code&gt;mailcap&lt;/code&gt;配置起到一样的作用。&lt;/p&gt;
&lt;p&gt;附上&lt;code&gt;MailcapCommandMap&lt;/code&gt;初始化方法：&lt;/p&gt;
&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; MailcapCommandMap() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ArrayList dbv = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MailcapFile mf = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dbv.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;((&lt;span class=&quot;keyword&quot;&gt;Object&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LogSupport.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;MailcapCommandMap: load HOME&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; ex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ex = System.getProperty(&lt;span class=&quot;string&quot;&gt;&quot;user.home&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ex != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; path = ex + File.separator + &lt;span class=&quot;string&quot;&gt;&quot;.mailcap&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mf = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.loadFile(path);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(mf != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    dbv.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(mf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (SecurityException var7) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LogSupport.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;MailcapCommandMap: load SYS&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ex = System.getProperty(&lt;span class=&quot;string&quot;&gt;&quot;java.home&quot;&lt;/span&gt;) + File.separator + &lt;span class=&quot;string&quot;&gt;&quot;lib&quot;&lt;/span&gt; + File.separator + &lt;span class=&quot;string&quot;&gt;&quot;mailcap&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mf = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.loadFile(ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(mf != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dbv.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(mf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (SecurityException var6) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LogSupport.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;MailcapCommandMap: load JAR&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.loadAllResources(dbv, &lt;span class=&quot;string&quot;&gt;&quot;META-INF/mailcap&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LogSupport.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;MailcapCommandMap: load DEF&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(MailcapCommandMap.class) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(defDB == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                defDB = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.loadResource(&lt;span class=&quot;string&quot;&gt;&quot;/META-INF/mailcap.default&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(defDB != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dbv.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(defDB);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.DB = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MailcapFile[dbv.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;()];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.DB = (MailcapFile[])((MailcapFile[])dbv.toArray(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.DB));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按照我的习惯，能够配置的就不要写在代码里了，看样子正解应该是在&lt;code&gt;META-INF&lt;/code&gt;文件夹中加入&lt;code&gt;mailcap&lt;/code&gt;配置文件了。&lt;/p&gt;
&lt;p&gt;于是从&lt;code&gt;activation&lt;/code&gt;包中将mailcap.default文件拷贝到&lt;code&gt;META-INF&lt;/code&gt;中，并更新了maven打包的配置。&lt;/p&gt;
&lt;p&gt;结果，还是不行？&lt;/p&gt;
&lt;p&gt;难道还是要在代码中加入&lt;code&gt;mailcap&lt;/code&gt;的配置？尝试了一下在代码中加入相关配置代码，的确可以正常发送邮件，但是这样的解决办法是在是太不爽了。&lt;/p&gt;
&lt;h1 id=&quot;那继续看看还有哪儿出问题了。&quot;&gt;&lt;a href=&quot;#那继续看看还有哪儿出问题了。&quot; class=&quot;headerlink&quot; title=&quot;那继续看看还有哪儿出问题了。&quot;&gt;&lt;/a&gt;那继续看看还有哪儿出问题了。&lt;/h1&gt;&lt;p&gt;于是我在发送邮件之前将当期的支持的mimetype都打印出来看看。&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;.isInfoEnabled())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       MailcapCommandMap mc = (MailcapCommandMap) CommandMap.getDefaultCommandMap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;.info(&lt;span class=&quot;string&quot;&gt;&quot;mail mimetypes:&#39;&amp;#123;&amp;#125;&#39; multipart/mixed:&#39;&amp;#123;&amp;#125;&#39; &quot;&lt;/span&gt;, mc.getMimeTypes(), mc.getAllCommands(&lt;span class=&quot;string&quot;&gt;&quot;multipart/mixed&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发现在server端单元测试的输出和打包后的输出有很大的差异。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单元测试的输出&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mail mimetypes:&#39;[&lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;/html, message/rfc822, multipart/*, &lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;/xml, &lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;/plain, &lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;/*, image/jpeg, image/gif]&#39; multipart/mixed:&#39;[javax.activation.CommandInfo@&lt;span class=&quot;number&quot;&gt;349859e0&lt;/span&gt;]&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;打包后的输出&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mail &lt;span class=&quot;string&quot;&gt;mimetypes:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;text/*&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看样子应该是打包之后配置加载问题。&lt;/p&gt;
&lt;p&gt;再重新check一下&lt;code&gt;MailcapCommandMap&lt;/code&gt;的代码，看样子应该是这段代码的缘故。&lt;/p&gt;
&lt;figure class=&quot;highlight d&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(MailcapCommandMap.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(defDB == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        defDB = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.loadResource(&lt;span class=&quot;string&quot;&gt;&quot;/META-INF/mailcap.default&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看样子，应该是defDB中有&lt;code&gt;[text/*]&lt;/code&gt;,所以，就没有走到读取&lt;code&gt;/META-INF/mailcap.default&lt;/code&gt;文件&lt;/p&gt;
&lt;h1 id=&quot;最终解决办法&quot;&gt;&lt;a href=&quot;#最终解决办法&quot; class=&quot;headerlink&quot; title=&quot;最终解决办法&quot;&gt;&lt;/a&gt;最终解决办法&lt;/h1&gt;&lt;p&gt;其实也很简单，将&lt;code&gt;mailcap.default&lt;/code&gt;重命名为&lt;code&gt;mailcap&lt;/code&gt;就好了。&lt;code&gt;MailcapCommandMap&lt;/code&gt;不管怎么样都会读取到&lt;code&gt;mailcap&lt;/code&gt;文件了。&lt;/p&gt;
&lt;h2 id=&quot;MailcapCommandMap相关代码&quot;&gt;&lt;a href=&quot;#MailcapCommandMap相关代码&quot; class=&quot;headerlink&quot; title=&quot;MailcapCommandMap相关代码&quot;&gt;&lt;/a&gt;MailcapCommandMap相关代码&lt;/h2&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LogSupport.log(&lt;span class=&quot;string&quot;&gt;&quot;MailcapCommandMap: load JAR&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.loadAllResources(dbv, &lt;span class=&quot;string&quot;&gt;&quot;META-INF/mailcap&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LogSupport.log(&lt;span class=&quot;string&quot;&gt;&quot;MailcapCommandMap: load DEF&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;synchronized(MailcapCommandMap.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(defDB == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        defDB = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.loadResource(&lt;span class=&quot;string&quot;&gt;&quot;/META-INF/mailcap.default&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;mailcap配置&quot;&gt;&lt;a href=&quot;#mailcap配置&quot; class=&quot;headerlink&quot; title=&quot;mailcap配置&quot;&gt;&lt;/a&gt;mailcap配置&lt;/h2&gt;&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# Default mailcap file for the JavaMail System.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# JavaMail content-handlers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text/plain;;		x-java-content-handler=com.sun.mail.handlers.text_plain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text/html;;		x-java-content-handler=com.sun.mail.handlers.text_html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text/xml;;		x-java-content-handler=com.sun.mail.handlers.text_xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;multipart&lt;span class=&quot;comment&quot;&gt;/*;;		x-java-content-handler=com.sun.mail.handlers.multipart_mixed; x-java-fallback-entry=true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;message/rfc822;;	x-java-content-handler=com.sun.mail.handlers.message_rfc822&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Maven-assembly中mailcap相关配置&quot;&gt;&lt;a href=&quot;#Maven-assembly中mailcap相关配置&quot; class=&quot;headerlink&quot; title=&quot;Maven assembly中mailcap相关配置&quot;&gt;&lt;/a&gt;Maven assembly中mailcap相关配置&lt;/h2&gt;&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;&amp;lt;source&amp;gt;&lt;/span&gt;src&lt;span class=&quot;meta-keyword&quot;&gt;/main/&lt;/span&gt;resources/META-INF/mailcap&lt;span class=&quot;params&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;&amp;lt;outputDirectory&amp;gt;&lt;/span&gt;META-INF&lt;span class=&quot;params&quot;&gt;&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://developer.jboss.org/thread/176802?_sscc=t&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.jboss.org/thread/176802?_sscc=t&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jguru.com/faq/view.jsp?EID=237257&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jguru.com/faq/view.jsp?EID=237257&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://jimwayne.blogspot.jp/2013/02/no-object-dch-for-mime-type.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jimwayne.blogspot.jp/2013/02/no-object-dch-for-mime-type.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/email-error/error.jpg&quot; alt=&quot;email error&quot;&gt;&lt;/p&gt;
&lt;p&gt;前两天写了一个发送邮件的功能，结果出现了一个比较灵异的状况，现在整理一下解决办法和中间的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="效率" scheme="http://tonydeng.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="engineered" scheme="http://tonydeng.github.io/tags/engineered/"/>
    
      <category term="java" scheme="http://tonydeng.github.io/tags/java/"/>
    
      <category term="mailcap" scheme="http://tonydeng.github.io/tags/mailcap/"/>
    
      <category term="email" scheme="http://tonydeng.github.io/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>利用“六顶思考帽”优化会议效率</title>
    <link href="http://tonydeng.github.io/2015/10/24/the-six-thinking-hats/"/>
    <id>http://tonydeng.github.io/2015/10/24/the-six-thinking-hats/</id>
    <published>2015-10-24T13:55:06.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/the-six-thinking-hasts/hasts.jpg&quot; alt=&quot;六顶思考帽&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;为何我们讨厌开会&quot;&gt;&lt;a href=&quot;#为何我们讨厌开会&quot; class=&quot;headerlink&quot; title=&quot;为何我们讨厌开会&quot;&gt;&lt;/a&gt;为何我们讨厌开会&lt;/h1&gt;&lt;p&gt;“哎！今天糟透了，开了一天的会却什么问题也没有解决。我的忍耐力已经到了极限了,这个该死的会议不仅不不能解决问题，而且还在破坏我的团队。我的工作已经不得不因为会议再次延迟了，我不明白会议到底是要解决问题而是要巩固某些人在公司的政治地位。他们到底何时才能明白，当一条大船即将沉没的时候，船员需要的发号施令的船长，而不是一天又一天的开会！”&lt;/p&gt;
&lt;p&gt;上面的话，是曾经我的一个同事兼好友在很久之前的某一天在聊天时向我吐槽他们公司无效的会议给他带来的困扰。这段话我印象非常深刻，因为我有时候也有同样地想法。不知道大家看到上面的一段话，是否也于心有戚戚耶。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;不过，作为一个已经踏入到管理职能的职场人来说，开会对于你日常的工作来说，这些都是必不可少的，甚至对于有些职能来说，会议基本上可能是他工作的全部或大部分。&lt;/p&gt;
&lt;p&gt;那么，为什么我们还吐槽呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其实我们吐槽的不是会议，而是无效的会议。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;为什么我们要开会？&quot;&gt;&lt;a href=&quot;#为什么我们要开会？&quot; class=&quot;headerlink&quot; title=&quot;为什么我们要开会？&quot;&gt;&lt;/a&gt;为什么我们要开会？&lt;/h1&gt;&lt;p&gt;我们先来看看词典对&lt;a href=&quot;http://cn.bing.com/knows/search?intlF=0&amp;amp;q=%E5%BC%80%E4%BC%9A&amp;amp;FORM=HDRSC7&amp;amp;mkt=zh-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“开会”的解释&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开会：召集若干人议事；多人聚集于一定处所议事；举行会议或集会；有会议或集会。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;会议的意义是什么呢？&lt;/p&gt;
&lt;p&gt;广义的会议就是让不同的人走到一起来交流，通过思想的碰撞，产生新的想法和创意。&lt;/p&gt;
&lt;p&gt;从某种角度来说，会议可能是一个公司成本较高的一种行为,也是组织中不能缺少的一种工作方式。&lt;/p&gt;
&lt;p&gt;因为，一般参加会议的人都会是属于这个组织中的管理者和核心员工，这些人的时间成本和经济成本在组织中都是非常高的。如果会议没有效率，那么对组织的影响和伤害是非常大的。&lt;/p&gt;
&lt;p&gt;这些的问题，应该大部分的人都能够意识到，为什么我们还是会面临这样的状况呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“争论中，争论双方都是对的，但是他们看到的知识事物的不同侧面”。– 爱德华·德·波诺&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多时候，由于参加会议的人经历、见识、立场都各有不同，看同一事物的角度和方法都各有差异。如果各自都坚持自己的看法，那必须是一个争执不休的场景。就算是最擅长妥协和权限的政治家们，也会出现这样的如下的场景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/the-six-thinking-hasts/parliament.png&quot; alt=&quot;议会&quot;&gt;&lt;/p&gt;
&lt;p&gt;甚至有这样暴力+香艳的场面，&lt;a href=&quot;http://news.163.com/08/0125/14/432G47RF0001121M.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;世界议会暴力大观：日本女议员打架掉胸罩(组图)&lt;/a&gt;，来自有态度的网易新闻，大家有兴趣，可以去自己点击链接去查看 ^_^&lt;/p&gt;
&lt;h1 id=&quot;会议无效率的原因&quot;&gt;&lt;a href=&quot;#会议无效率的原因&quot; class=&quot;headerlink&quot; title=&quot;会议无效率的原因&quot;&gt;&lt;/a&gt;会议无效率的原因&lt;/h1&gt;&lt;p&gt;我的理解中，会议对于一个组织来说，是&lt;strong&gt;一个能够快速沟通并达成一致结论的方式和工具&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但是现实工作中，我们在会议上花费了太多的时间，这些原本能够为公司产生生产力的时间，都浪费在冗长而低效的会议室上。这些会议通常洋溢着令人厌烦的气氛，大多数时候，我们都得到这样的结论–“会议在拖我们的后腿”。&lt;/p&gt;
&lt;p&gt;仔细分析一下，一般“拖我们后腿的会议”都有如下几个特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;会议的主题不明确。&lt;/li&gt;
&lt;li&gt;会议讨论的过程中太过发散，跳跃性过大，导致整个会议过程拖沓。&lt;/li&gt;
&lt;li&gt;会议主持人控制力不够。&lt;/li&gt;
&lt;li&gt;争执不休，无法决策。&lt;/li&gt;
&lt;li&gt;会议结束后也没有具体的结论和方案。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实这些特点，总体来说，就是在&lt;strong&gt;会议过程中的某（zheng）个（ge）环节（主题、人、过程……）上缺乏聚焦&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;另外，还有一个非常重要的问题，就是会后的执行，好多时候，会开完了就大家就开始“玩会儿了”。&lt;/p&gt;
&lt;h1 id=&quot;六顶思考帽介绍&quot;&gt;&lt;a href=&quot;#六顶思考帽介绍&quot; class=&quot;headerlink&quot; title=&quot;六顶思考帽介绍&quot;&gt;&lt;/a&gt;六顶思考帽介绍&lt;/h1&gt;&lt;p&gt;我们先看看&lt;a href=&quot;https://wikipedia.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基百科&lt;/a&gt;的&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E5%85%AD%E9%A1%B6%E6%80%9D%E8%80%83%E5%B8%BD%E5%AD%90&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;六顶思考帽的定义&lt;/a&gt;（如要翻墙，请自备梯子）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;德·波诺帽子方法，或称为六顶帽思考方法，是一种将群体讨论和个体思考相结合的思考方法。这种思考方法是由&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%84%9B%E5%BE%B7%E8%8F%AF%C2%B7%E5%BE%B7%C2%B7%E6%B3%A2%E8%AB%BE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;爱德华·德·波诺&lt;/a&gt;在其介绍思考方法的书籍&lt;a href=&quot;http://book.douban.com/subject/3031961/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;六顶思考帽（Six Thinking hats）&lt;/a&gt;中提出的，该书全球销量超过3000万册。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;每顶帽子的定义&quot;&gt;&lt;a href=&quot;#每顶帽子的定义&quot; class=&quot;headerlink&quot; title=&quot;每顶帽子的定义&quot;&gt;&lt;/a&gt;每顶帽子的定义&lt;/h2&gt;&lt;h3 id=&quot;白色思考帽：&quot;&gt;&lt;a href=&quot;#白色思考帽：&quot; class=&quot;headerlink&quot; title=&quot;白色思考帽：&quot;&gt;&lt;/a&gt;白色思考帽：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;中立而客观。&lt;br&gt;白色思考帽代表客观的事实与数据。&lt;br&gt;我们需要得到什么资讯？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;红色思考帽：&quot;&gt;&lt;a href=&quot;#红色思考帽：&quot; class=&quot;headerlink&quot; title=&quot;红色思考帽：&quot;&gt;&lt;/a&gt;红色思考帽：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;暗示著愤怒与情感。&lt;br&gt;红色思考帽代表情绪上的感觉、直觉和预感。&lt;br&gt;现在你感觉这个怎么样？但你不必刻意去证明你的感觉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;黑色思考帽：&quot;&gt;&lt;a href=&quot;#黑色思考帽：&quot; class=&quot;headerlink&quot; title=&quot;黑色思考帽：&quot;&gt;&lt;/a&gt;黑色思考帽：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;负面。&lt;br&gt;黑色思考帽也就是考虑事物的负面因素，它是对事物负面因素的注意、判断和评估。&lt;br&gt;这是真的吗？它会起作用吗？缺点是什么？它有什么问题？为什么不能做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;黄色思考帽：&quot;&gt;&lt;a href=&quot;#黄色思考帽：&quot; class=&quot;headerlink&quot; title=&quot;黄色思考帽：&quot;&gt;&lt;/a&gt;黄色思考帽：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;耀眼、正面。&lt;br&gt;黄色思考帽代表乐观、希望与正面思想。&lt;br&gt;为什么这个值得做？为什么可以作这件事？它为什么会起作用？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;绿色思考帽：&quot;&gt;&lt;a href=&quot;#绿色思考帽：&quot; class=&quot;headerlink&quot; title=&quot;绿色思考帽：&quot;&gt;&lt;/a&gt;绿色思考帽：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;草地的颜色。&lt;br&gt;绿色思考帽代表创意与创造性新的想法。&lt;br&gt;有不同的想法？新的想法、建议和假设是什么？可能的解决办法和行动的过程是什么？其他可能的选择是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;蓝色思考帽：&quot;&gt;&lt;a href=&quot;#蓝色思考帽：&quot; class=&quot;headerlink&quot; title=&quot;蓝色思考帽：&quot;&gt;&lt;/a&gt;蓝色思考帽：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;天空的颜色。&lt;br&gt;蓝色思考帽代表思维过程的控制与组织。&lt;br&gt;它可以控制其他思考帽的使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/the-six-thinking-hasts/6K-by-xmind.png&quot; alt=&quot;XMind提供的六顶思考帽模板&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.xmind.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XMind&lt;/a&gt;也提供了&lt;a href=&quot;http://www.xmind.net/m/6K7b/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;六顶思考帽的模板&lt;/a&gt;，大家如果使用XMind的话，可以直接创建六顶思考帽的思维导图。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;六个思考帽能够解决的问题&quot;&gt;&lt;a href=&quot;#六个思考帽能够解决的问题&quot; class=&quot;headerlink&quot; title=&quot;六个思考帽能够解决的问题&quot;&gt;&lt;/a&gt;六个思考帽能够解决的问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;聚焦并且改进想法的过程&lt;/li&gt;
&lt;li&gt;鼓励创造性，平行和水平思考&lt;/li&gt;
&lt;li&gt;改进沟通&lt;/li&gt;
&lt;li&gt;加速做决定&lt;/li&gt;
&lt;li&gt;避免辩论&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;利用六顶思考帽优化开会效率&quot;&gt;&lt;a href=&quot;#利用六顶思考帽优化开会效率&quot; class=&quot;headerlink&quot; title=&quot;利用六顶思考帽优化开会效率&quot;&gt;&lt;/a&gt;利用六顶思考帽优化开会效率&lt;/h1&gt;&lt;p&gt;那我们是否可以利用六个思考帽来优化开会效率呢？我们可以先看看之前总结的&lt;a href=&quot;#会议无效率的原因&quot;&gt;会议无效率的原因&lt;/a&gt;以及&lt;a href=&quot;#六个思考帽能够解决的问题&quot;&gt;六个思考帽能够解决的问题&lt;/a&gt;。那聪明人应该能够想到如何利用六个帽子来解决问题了吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“六顶思考帽使我们的会议时间减少了80%，同时也改变了整个欧洲的企业文化。” – J.P.摩根国际投资银行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;单独使用某一顶帽子&quot;&gt;&lt;a href=&quot;#单独使用某一顶帽子&quot; class=&quot;headerlink&quot; title=&quot;单独使用某一顶帽子&quot;&gt;&lt;/a&gt;单独使用某一顶帽子&lt;/h2&gt;&lt;p&gt;如果，会议只是单一目的，比如收集看法、讨论做某件事物的价值等等，我们可以根据会议的目的来只使用某一顶帽子就能够解决问题了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/the-six-thinking-hasts/one-hast.png&quot; alt=&quot;使用单一帽子&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;组合使用帽子&quot;&gt;&lt;a href=&quot;#组合使用帽子&quot; class=&quot;headerlink&quot; title=&quot;组合使用帽子&quot;&gt;&lt;/a&gt;组合使用帽子&lt;/h2&gt;&lt;p&gt;一般来说，我们大部分的会议都不是只用单一帽子就能够达到目的的，那么我们就要尝试组合使用帽子的方式来进行会议的讨论和决策。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/the-six-thinking-hasts/combination-hasts.png&quot; alt=&quot;组合使用帽子&quot;&gt;&lt;/p&gt;
&lt;p&gt;不过，要注意的是，&lt;strong&gt;六顶思考帽方法可能需要一定的训练与磨合才能发挥出它的真正效果。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h2&gt;&lt;p&gt;比如我就在前几天的项目Review的会议上使用了六个帽子来组织了一下这个会议。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先让团队的每个人都在两张便签纸上分别写出，在本次项目中自己觉得“最爽”和“最不爽”的三点，写完后贴在白板上。 &lt;strong&gt;（黑色帽子 + 黄色帽子）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每个人陈述自己觉得爽和不爽的原因，并举例子说明。&lt;strong&gt;（红色帽子）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大家一起对所有人的“最爽”和“最不爽”进行归类，并且对归类后的条目进行计票。 &lt;strong&gt;（蓝色帽子）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大家一起分析“最不爽”的现状。&lt;strong&gt;（白色帽子）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每个人提出对“最不爽”的改进意见。 &lt;strong&gt;（绿色帽子）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大家从改进意见中找出最可能执行成功的方案。 &lt;strong&gt;（蓝色帽子）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;最后的话&quot;&gt;&lt;a href=&quot;#最后的话&quot; class=&quot;headerlink&quot; title=&quot;最后的话&quot;&gt;&lt;/a&gt;最后的话&lt;/h1&gt;&lt;p&gt;OK，这篇Blog也断断续续抽空的写了好几天，关于&lt;strong&gt;会议&lt;/strong&gt;、&lt;strong&gt;效率&lt;/strong&gt;以及&lt;strong&gt;六顶思考帽&lt;/strong&gt;这些都是非常大的话题，并不是一篇短短的Blog能够描述清楚的。只是对于我来说，作为一个自己对这些事情和内容的思考和总结，同时希望能够对看到这篇Blog的人也有帮助。&lt;/p&gt;
&lt;p&gt;另外，再说一点多余的话，虽然与这篇Blog主题关系不太大，不过，也是我为什么之前在项目Review会议中使用“六顶思考帽”的方式来组织会议的原因之一，先随便说说，要是哪天心血来潮，自己再刨个坑，一篇详细点的Blog在仔细说说。&lt;/p&gt;
&lt;p&gt;现实中，作为团队管理者的我们有一项不容忽视的问题，就是团队建设（不仅仅是吃饭）。&lt;/p&gt;
&lt;p&gt;比如我们要在团队内推行一个新的制度或方法。如果，硬性地作为团队的大方法论强制实施，或许能加快该制度或方法的推广速度。但是我认为，任何出自&lt;strong&gt;非团队意识&lt;/strong&gt;的&lt;strong&gt;强迫&lt;/strong&gt;的活动，都会让团队感觉到“他们在领导眼里不能自理，需要‘学生手册’来约束自己”，这无疑会打消团队的积极性。&lt;/p&gt;
&lt;p&gt;团队成员可能以一种，沉默不抵抗的方式应对让他们头疼的流程。&lt;/p&gt;
&lt;p&gt;因此，我建议，要么征求团队意见，集体达成一致；要么就作为你自己的思考方式，在团队中隐晦地加以利用。&lt;/p&gt;
&lt;p&gt;就好比，我在项目Review会议上用的方法，所有的人都参与到整个改进方案的建设中，这样大家就更容易接受这些方案。你再后续的推行这些改进方案整个团队就更加容易接受了。&lt;/p&gt;
&lt;p&gt;好了，不写了，洗洗睡觉去了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/the-six-thinking-hasts/hasts.jpg&quot; alt=&quot;六顶思考帽&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;为何我们讨厌开会&quot;&gt;&lt;a href=&quot;#为何我们讨厌开会&quot; class=&quot;headerlink&quot; title=&quot;为何我们讨厌开会&quot;&gt;&lt;/a&gt;为何我们讨厌开会&lt;/h1&gt;&lt;p&gt;“哎！今天糟透了，开了一天的会却什么问题也没有解决。我的忍耐力已经到了极限了,这个该死的会议不仅不不能解决问题，而且还在破坏我的团队。我的工作已经不得不因为会议再次延迟了，我不明白会议到底是要解决问题而是要巩固某些人在公司的政治地位。他们到底何时才能明白，当一条大船即将沉没的时候，船员需要的发号施令的船长，而不是一天又一天的开会！”&lt;/p&gt;
&lt;p&gt;上面的话，是曾经我的一个同事兼好友在很久之前的某一天在聊天时向我吐槽他们公司无效的会议给他带来的困扰。这段话我印象非常深刻，因为我有时候也有同样地想法。不知道大家看到上面的一段话，是否也于心有戚戚耶。&lt;/p&gt;
    
    </summary>
    
      <category term="管理" scheme="http://tonydeng.github.io/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="thinking" scheme="http://tonydeng.github.io/tags/thinking/"/>
    
      <category term="the six thinking hasts" scheme="http://tonydeng.github.io/tags/the-six-thinking-hasts/"/>
    
      <category term="六顶思考帽" scheme="http://tonydeng.github.io/tags/%E5%85%AD%E9%A1%B6%E6%80%9D%E8%80%83%E5%B8%BD/"/>
    
      <category term="manager" scheme="http://tonydeng.github.io/tags/manager/"/>
    
  </entry>
  
  <entry>
    <title>关于用户体验的讨论和思考</title>
    <link href="http://tonydeng.github.io/2015/10/21/discussion-on-user-experience/"/>
    <id>http://tonydeng.github.io/2015/10/21/discussion-on-user-experience/</id>
    <published>2015-10-21T13:52:15.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/user-experience.png&quot; alt=&quot;user experience&quot;&gt;&lt;/p&gt;
&lt;p&gt;昨天晚上媳妇跟我说，他们的产品负（jiao）责（shi）人（gun）说”交互设计就是UI，产品界面上什么按钮该放哪儿，页面该怎么跳转，这些都是&lt;strong&gt;用户体验&lt;/strong&gt;“，转达了他们产品负责人的话之后，媳妇继续问：“我觉得她说的不对，我认为用户体验是UI（界面设计）+UE（交互设计）。”&lt;/p&gt;
&lt;p&gt;媳妇的这个问题让我陷入了思考，现在互联网从业人员都在谈“用户体验”，包括传统行业的从业人员也在谈“互联网思维”，也谈“用户体验”。&lt;strong&gt;那么用户体验到底是一个什么东西？是否就是UI+UE？&lt;/strong&gt;，也让我有了写这篇Blog的冲动。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是用户体验&quot;&gt;&lt;a href=&quot;#什么是用户体验&quot; class=&quot;headerlink&quot; title=&quot;什么是用户体验&quot;&gt;&lt;/a&gt;什么是用户体验&lt;/h2&gt;&lt;p&gt;简略来说，用户体验是一种在用户&lt;strong&gt;使用&lt;/strong&gt;一个产品（服务）的&lt;strong&gt;过程&lt;/strong&gt;中建立起来的&lt;strong&gt;纯主观&lt;/strong&gt;的&lt;strong&gt;心理感受&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而从系统上讲，用户体验是一个&lt;strong&gt;全方位的概念&lt;/strong&gt;，在产品的&lt;strong&gt;不同阶段&lt;/strong&gt;，&lt;strong&gt;不同渠道&lt;/strong&gt;，每一个可能和产品、服务，以及企业本身&lt;strong&gt;接触的地方都能产生用户体验&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;互联网产品的用户体验比其他任何产品都重要。因为它是一个“自助式”的产品，没有事先阅读的说明书，没有任何操作培训或讨论会，也没有客户服务代表来帮助用户了解这个产品如何使用。&lt;/p&gt;
&lt;p&gt;不过，现在很多互联网公司也主要到了原来互联网产品在这块的问题，现在很多APP都添加了很多用户使用引导的功能，相信大家也都体会过，对自己实际使用这个产品的帮助并不是那么大，更多使用方式的都是靠自己摸索。&lt;/p&gt;
&lt;h2 id=&quot;影响用户体验的因素&quot;&gt;&lt;a href=&quot;#影响用户体验的因素&quot; class=&quot;headerlink&quot; title=&quot;影响用户体验的因素&quot;&gt;&lt;/a&gt;影响用户体验的因素&lt;/h2&gt;&lt;p&gt;我们来看看一张网络上的老图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/more-information.jpg&quot; alt=&quot;more infomation&quot;&gt;&lt;/p&gt;
&lt;p&gt;虽然只是讲了建设一个网站的工作并不像表面看起来的那么简单，但是就像我们上面描述的那样，用户主观的心理感受不是仅仅只是表面的工作能够满足到的。所以，用户体验当然不仅仅是“UI+UE”。&lt;/p&gt;
&lt;p&gt;有许多因素可以影响用户时间使用的体验，用户的个体差异也决定了每个用户的真实感受/体验是无法通过有效途径来完全模拟或再现的。不过，对于一个界定明确的用户群体来讲，其用户体验的共性是能够通过良好设计的测试/实验来认识到的。&lt;/p&gt;
&lt;p&gt;我们来看相对全面的用户体验所涉及的领域：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/user-experience-in-the-areas-of.jpg&quot; alt=&quot;用户体验涉及的领域&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以，谈到用户体验，作为提供产品（服务）的组织来说，其实涉及到该组织内每一个成员的贡献。&lt;/p&gt;
&lt;p&gt;就拿互联网企业来说，产品功能设计（产品经理）、用户界面设计（UI）、用户交互设计（UE）、产品内容（运营、商务、BD）、产品稳定性和响应速度（技术）等方面对用户的体验都是有影响的。大家想一想看看是不是这样？&lt;/p&gt;
&lt;p&gt;说到底，“用户体验”就是一切以用户为中心。国外有一句经典商业名言：“客户就是上帝”，古代的中国商人也用“衣食父母”来比喻客户对商家的重要性（虽然，最早的出处是关汉卿在《&lt;a href=&quot;http://baike.baidu.com/subview/13964/5887709.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;窦娥冤&lt;/a&gt;》中由昏官桃杌太守之口说出）。&lt;/p&gt;
&lt;p&gt;所以，作为我们每一个互联网从业人员来说，用户体验应该是我们始终在脑海中绷紧的一根弦，并且要在实际工作付诸行动的行为准则之一（并不是喊喊口号而已，也不是某些人掩饰自己能力不足的借口）。在产品开发的每一个步骤中，都要把用户体验列入到考虑范围中。&lt;/p&gt;
&lt;h2 id=&quot;用户体验的要素&quot;&gt;&lt;a href=&quot;#用户体验的要素&quot; class=&quot;headerlink&quot; title=&quot;用户体验的要素&quot;&gt;&lt;/a&gt;用户体验的要素&lt;/h2&gt;&lt;p&gt;那什么样的用户体验才算是好呢？如何来验证呢？&lt;/p&gt;
&lt;p&gt;其实，在2000年3月（15年前）就有人总结出了用户体验的要素。&lt;/p&gt;
&lt;p&gt;我们来看看&lt;a href=&quot;http://www.amazon.com/o/ASIN/0735712026/ref=nosim/jjgnet-20/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《用户体验的要素》&lt;/a&gt;的作者&lt;a href=&quot;http://blog.jjg.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jesse James Garrett&lt;/a&gt;是怎么来说的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/the-elements-of-user-expexrience-en.jpg&quot; alt=&quot;用户体验的要素&quot;&gt;&lt;/p&gt;
&lt;p&gt;这张图是国人翻译的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/the-elements-of-user-expexrience-zh.jpg&quot; alt=&quot;用户体验的要素&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;附录：Jesse-James-Garrett关于用户体验要素的演讲&quot;&gt;&lt;a href=&quot;#附录：Jesse-James-Garrett关于用户体验要素的演讲&quot; class=&quot;headerlink&quot; title=&quot;附录：Jesse James Garrett关于用户体验要素的演讲&quot;&gt;&lt;/a&gt;附录：Jesse James Garrett关于用户体验要素的演讲&lt;/h2&gt;&lt;p&gt;我们来看看Jesse James Garrett再Adaptive path工作坊上的演讲《用户体验的要素》，这个PPT非常精彩，覆盖了整个团队内部分工、产品设计要素以及项目管理要点等各个方面，非常值得大家去仔细揣摩。&lt;/p&gt;
&lt;h3 id=&quot;用户体验的要素-1&quot;&gt;&lt;a href=&quot;#用户体验的要素-1&quot; class=&quot;headerlink&quot; title=&quot;用户体验的要素&quot;&gt;&lt;/a&gt;用户体验的要素&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/00.png&quot; alt=&quot;00&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;认识用户体验的要素&quot;&gt;&lt;a href=&quot;#认识用户体验的要素&quot; class=&quot;headerlink&quot; title=&quot;认识用户体验的要素&quot;&gt;&lt;/a&gt;认识用户体验的要素&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/01.png&quot; alt=&quot;01&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;史上最差的一些电影&quot;&gt;&lt;a href=&quot;#史上最差的一些电影&quot; class=&quot;headerlink&quot; title=&quot;史上最差的一些电影&quot;&gt;&lt;/a&gt;史上最差的一些电影&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/02.png&quot; alt=&quot;02&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;究竟谁应该受到指责呢？&quot;&gt;&lt;a href=&quot;#究竟谁应该受到指责呢？&quot; class=&quot;headerlink&quot; title=&quot;究竟谁应该受到指责呢？&quot;&gt;&lt;/a&gt;究竟谁应该受到指责呢？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用户可能会说：“我可能没有好好选择？”，“我一定是没有好好看说明书”，“或许我不够聪明”….&lt;/li&gt;
&lt;li&gt;对于不优的产品，用户承担了不必要的责罚。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/03.png&quot; alt=&quot;03&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;如果把产品也看做是人&quot;&gt;&lt;a href=&quot;#如果把产品也看做是人&quot; class=&quot;headerlink&quot; title=&quot;如果把产品也看做是人&quot;&gt;&lt;/a&gt;如果把产品也看做是人&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/04.png&quot; alt=&quot;04&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;以用户为中心的设计&quot;&gt;&lt;a href=&quot;#以用户为中心的设计&quot; class=&quot;headerlink&quot; title=&quot;以用户为中心的设计&quot;&gt;&lt;/a&gt;以用户为中心的设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;这是产品开发必须遵循的理念和态度&lt;/li&gt;
&lt;li&gt;产品自身不是结束&lt;/li&gt;
&lt;li&gt;产品是为了最终能提供满足用户优良的交互体验而生的一种手段&lt;/li&gt;
&lt;li&gt;它是强调理解用户而不是技术的理论体系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/05.png&quot; alt=&quot;05&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;用户体验关注什么？&quot;&gt;&lt;a href=&quot;#用户体验关注什么？&quot; class=&quot;headerlink&quot; title=&quot;用户体验关注什么？&quot;&gt;&lt;/a&gt;用户体验关注什么？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个产品的行为是怎样的，在实际生活中如何应用&lt;/li&gt;
&lt;li&gt;超越产品自身，关注它与人们生活的联结&lt;/li&gt;
&lt;li&gt;它包含各个范畴的因素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/06.png&quot; alt=&quot;06&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;外观层&quot;&gt;&lt;a href=&quot;#外观层&quot; class=&quot;headerlink&quot; title=&quot;外观层&quot;&gt;&lt;/a&gt;外观层&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/07.png&quot; alt=&quot;07&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;框架层&quot;&gt;&lt;a href=&quot;#框架层&quot; class=&quot;headerlink&quot; title=&quot;框架层&quot;&gt;&lt;/a&gt;框架层&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/08.png&quot; alt=&quot;08&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;结构层&quot;&gt;&lt;a href=&quot;#结构层&quot; class=&quot;headerlink&quot; title=&quot;结构层&quot;&gt;&lt;/a&gt;结构层&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/09.png&quot; alt=&quot;09&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;范围层&quot;&gt;&lt;a href=&quot;#范围层&quot; class=&quot;headerlink&quot; title=&quot;范围层&quot;&gt;&lt;/a&gt;范围层&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/10.png&quot; alt=&quot;10&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;战略层&quot;&gt;&lt;a href=&quot;#战略层&quot; class=&quot;headerlink&quot; title=&quot;战略层&quot;&gt;&lt;/a&gt;战略层&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/11.png&quot; alt=&quot;11&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;用户体验要素的五大层级&quot;&gt;&lt;a href=&quot;#用户体验要素的五大层级&quot; class=&quot;headerlink&quot; title=&quot;用户体验要素的五大层级&quot;&gt;&lt;/a&gt;用户体验要素的五大层级&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/12.png&quot; alt=&quot;12&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;扫除一些名词障碍&quot;&gt;&lt;a href=&quot;#扫除一些名词障碍&quot; class=&quot;headerlink&quot; title=&quot;扫除一些名词障碍&quot;&gt;&lt;/a&gt;扫除一些名词障碍&lt;/h3&gt;&lt;p&gt;信息设计、功能说明、交互设计、信息架构、界面设计、内容需求、导航设计&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/13.png&quot; alt=&quot;13&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;网站的二元性：作为信息源的网站&quot;&gt;&lt;a href=&quot;#网站的二元性：作为信息源的网站&quot; class=&quot;headerlink&quot; title=&quot;网站的二元性：作为信息源的网站&quot;&gt;&lt;/a&gt;网站的二元性：作为信息源的网站&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/14.png&quot; alt=&quot;14&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;网站的二元性：作为软件应用的网站&quot;&gt;&lt;a href=&quot;#网站的二元性：作为软件应用的网站&quot; class=&quot;headerlink&quot; title=&quot;网站的二元性：作为软件应用的网站&quot;&gt;&lt;/a&gt;网站的二元性：作为软件应用的网站&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/15.png&quot; alt=&quot;15&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;网站基本的二元性&quot;&gt;&lt;a href=&quot;#网站基本的二元性&quot; class=&quot;headerlink&quot; title=&quot;网站基本的二元性&quot;&gt;&lt;/a&gt;网站基本的二元性&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/16.png&quot; alt=&quot;16&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/17.png&quot; alt=&quot;17&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;战略层-1&quot;&gt;&lt;a href=&quot;#战略层-1&quot; class=&quot;headerlink&quot; title=&quot;战略层&quot;&gt;&lt;/a&gt;战略层&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用户需求：网站必须为使用它的人提供些什么&lt;/li&gt;
&lt;li&gt;网站目的：网站必须为建立它的人做些什么&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/18.png&quot; alt=&quot;18&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;用户需求&quot;&gt;&lt;a href=&quot;#用户需求&quot; class=&quot;headerlink&quot; title=&quot;用户需求&quot;&gt;&lt;/a&gt;用户需求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一些基本原则——用户使用产品必须能够：&lt;ul&gt;
&lt;li&gt;工作&lt;/li&gt;
&lt;li&gt;可操作使用&lt;/li&gt;
&lt;li&gt;达到一些期望&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是大部分时候需要根据实际使用对象和产品具体分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/19.png&quot; alt=&quot;19&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;用户调研&quot;&gt;&lt;a href=&quot;#用户调研&quot; class=&quot;headerlink&quot; title=&quot;用户调研&quot;&gt;&lt;/a&gt;用户调研&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;这是最好的方式来了解用户实际需求&lt;/li&gt;
&lt;li&gt;很多方式方法：从快速、廉价到长期、昂贵的都有&lt;/li&gt;
&lt;li&gt;推荐一本好书《Observing the User Experience》&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/20.png&quot; alt=&quot;20&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;用户细分&quot;&gt;&lt;a href=&quot;#用户细分&quot; class=&quot;headerlink&quot; title=&quot;用户细分&quot;&gt;&lt;/a&gt;用户细分&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可以控制地识别用户需求&lt;/li&gt;
&lt;li&gt;通过用户共性特征分类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/21.png&quot; alt=&quot;21&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;用户模型&quot;&gt;&lt;a href=&quot;#用户模型&quot; class=&quot;headerlink&quot; title=&quot;用户模型&quot;&gt;&lt;/a&gt;用户模型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以用户调研为基础的特征描述&lt;/li&gt;
&lt;li&gt;从一系列常规特征推论到具体事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/22.png&quot; alt=&quot;22&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;网站目的&quot;&gt;&lt;a href=&quot;#网站目的&quot; class=&quot;headerlink&quot; title=&quot;网站目的&quot;&gt;&lt;/a&gt;网站目的&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;经常与商业性有关&lt;/li&gt;
&lt;li&gt;商业目的&lt;/li&gt;
&lt;li&gt;商业驱动&lt;/li&gt;
&lt;li&gt;商业需求&lt;/li&gt;
&lt;li&gt;需要具体问题具体分析&lt;/li&gt;
&lt;li&gt;独立于组织结构的其他行为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/23.png&quot; alt=&quot;23&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;成功的度量流量&quot;&gt;&lt;a href=&quot;#成功的度量流量&quot; class=&quot;headerlink&quot; title=&quot;成功的度量流量&quot;&gt;&lt;/a&gt;成功的度量流量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;唯一的方法用来获知改变网站设计有何不同&lt;/li&gt;
&lt;li&gt;紧密地与站点目标连接&lt;/li&gt;
&lt;li&gt;未来将会更广泛应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/24.png&quot; alt=&quot;24&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;范围层-1&quot;&gt;&lt;a href=&quot;#范围层-1&quot; class=&quot;headerlink&quot; title=&quot;范围层&quot;&gt;&lt;/a&gt;范围层&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能说明：网站应有的应用特色&lt;/li&gt;
&lt;li&gt;内容需求：网站必须包含的基本内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/25.png&quot; alt=&quot;25&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;功能说明&quot;&gt;&lt;a href=&quot;#功能说明&quot; class=&quot;headerlink&quot; title=&quot;功能说明&quot;&gt;&lt;/a&gt;功能说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;什么样的特色应用是用户需要用来完成目标的？&lt;/li&gt;
&lt;li&gt;聚焦在“它该做什么”&lt;ul&gt;
&lt;li&gt;而不是“它怎么工作”&lt;/li&gt;
&lt;li&gt;也不是“它什么不能做”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;具体一些，但不要指使系统设计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/26.png&quot; alt=&quot;26&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;内容需求&quot;&gt;&lt;a href=&quot;#内容需求&quot; class=&quot;headerlink&quot; title=&quot;内容需求&quot;&gt;&lt;/a&gt;内容需求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;什么样的信息是用户需要的或想从网站获取的&lt;/li&gt;
&lt;li&gt;它采用何种形式&lt;/li&gt;
&lt;li&gt;它的来源是哪里&lt;/li&gt;
&lt;li&gt;谁来负责？&lt;/li&gt;
&lt;li&gt;根据目的定义要点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/27.png&quot; alt=&quot;27&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;跟进文档&quot;&gt;&lt;a href=&quot;#跟进文档&quot; class=&quot;headerlink&quot; title=&quot;跟进文档&quot;&gt;&lt;/a&gt;跟进文档&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;文档是在浪费时间？&lt;ul&gt;
&lt;li&gt;没人看&lt;/li&gt;
&lt;li&gt;它们从来不是最新的&lt;/li&gt;
&lt;li&gt;维护起来很麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;花在规划网站的时间是为制作网站的时候节约时间&lt;/li&gt;
&lt;li&gt;把文档融进进程，而不是作为一个独立的步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/28.png&quot; alt=&quot;28&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;结构层-1&quot;&gt;&lt;a href=&quot;#结构层-1&quot; class=&quot;headerlink&quot; title=&quot;结构层&quot;&gt;&lt;/a&gt;结构层&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;交互设计：用户如何在过程中从一步移到另一步&lt;/li&gt;
&lt;li&gt;信息架构：用户如何从一个内容要素移到下一个&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/29.png&quot; alt=&quot;29&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;交互设计&quot;&gt;&lt;a href=&quot;#交互设计&quot; class=&quot;headerlink&quot; title=&quot;交互设计&quot;&gt;&lt;/a&gt;交互设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;交互行为&lt;ul&gt;
&lt;li&gt;一方面用户能够使用系统&lt;/li&gt;
&lt;li&gt;另一方面系统能够反馈给用户信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/30.png&quot; alt=&quot;30&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;信息架构&quot;&gt;&lt;a href=&quot;#信息架构&quot; class=&quot;headerlink&quot; title=&quot;信息架构&quot;&gt;&lt;/a&gt;信息架构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;明确各内容要素间的概念关系&lt;/li&gt;
&lt;li&gt;影响用户思考主题&lt;/li&gt;
&lt;li&gt;常常是等级式的，但也不是一定的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/31.png&quot; alt=&quot;31&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;自上而下-VS-自下而上&quot;&gt;&lt;a href=&quot;#自上而下-VS-自下而上&quot; class=&quot;headerlink&quot; title=&quot;自上而下 VS 自下而上&quot;&gt;&lt;/a&gt;自上而下 VS 自下而上&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自上而下以分类开始，再对内容进行归类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/32.png&quot; alt=&quot;32&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;自上而下-VS-自下而上-1&quot;&gt;&lt;a href=&quot;#自上而下-VS-自下而上-1&quot; class=&quot;headerlink&quot; title=&quot;自上而下 VS 自下而上&quot;&gt;&lt;/a&gt;自上而下 VS 自下而上&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自下而上以内容开始，最后集结成几类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/33.png&quot; alt=&quot;33&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;文档结构&quot;&gt;&lt;a href=&quot;#文档结构&quot; class=&quot;headerlink&quot; title=&quot;文档结构&quot;&gt;&lt;/a&gt;文档结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可视化的表达更有效&lt;/li&gt;
&lt;li&gt;根据需要，图表可繁可简&lt;/li&gt;
&lt;li&gt;更多说明欢迎访问以下网址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/34.png&quot; alt=&quot;34&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;框架层-1&quot;&gt;&lt;a href=&quot;#框架层-1&quot; class=&quot;headerlink&quot; title=&quot;框架层&quot;&gt;&lt;/a&gt;框架层&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;信息设计：帮助用户理解信息&lt;/li&gt;
&lt;li&gt;界面设计：帮助用户输入，促进系统输出&lt;/li&gt;
&lt;li&gt;导航设计：为用户提供更轻松便捷的移动操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/35.png&quot; alt=&quot;35&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;信息设计&quot;&gt;&lt;a href=&quot;#信息设计&quot; class=&quot;headerlink&quot; title=&quot;信息设计&quot;&gt;&lt;/a&gt;信息设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;我们如何表达信息使得人们理解并使用它&lt;/li&gt;
&lt;li&gt;从不同信息中传达出相对重要的信息&lt;/li&gt;
&lt;li&gt;引导用户从一条信息到另一条&lt;/li&gt;
&lt;li&gt;提醒重要细节&lt;/li&gt;
&lt;li&gt;传达各元素联系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/36.png&quot; alt=&quot;36&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Google-Maps的例子&quot;&gt;&lt;a href=&quot;#Google-Maps的例子&quot; class=&quot;headerlink&quot; title=&quot;Google Maps的例子&quot;&gt;&lt;/a&gt;Google Maps的例子&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/37.png&quot; alt=&quot;37&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;界面设计&quot;&gt;&lt;a href=&quot;#界面设计&quot; class=&quot;headerlink&quot; title=&quot;界面设计&quot;&gt;&lt;/a&gt;界面设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;为用户提供与应用程序功能交互的一种可视化方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/38.png&quot; alt=&quot;38&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;导航设计&quot;&gt;&lt;a href=&quot;#导航设计&quot; class=&quot;headerlink&quot; title=&quot;导航设计&quot;&gt;&lt;/a&gt;导航设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;表达出用户可以有哪些选择&lt;/li&gt;
&lt;li&gt;使用户移动操作更便利&lt;/li&gt;
&lt;li&gt;不同的设计有不同的效果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/39.png&quot; alt=&quot;39&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;线框图&quot;&gt;&lt;a href=&quot;#线框图&quot; class=&quot;headerlink&quot; title=&quot;线框图&quot;&gt;&lt;/a&gt;线框图&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将所有框架议题放到一个高度概括的“草图”里&lt;/li&gt;
&lt;li&gt;图示表达页面元素相对优先级&lt;/li&gt;
&lt;li&gt;建议页面布局的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/40.png&quot; alt=&quot;40&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;外观层-1&quot;&gt;&lt;a href=&quot;#外观层-1&quot; class=&quot;headerlink&quot; title=&quot;外观层&quot;&gt;&lt;/a&gt;外观层&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;视觉设计：“外观和感觉”中的“外观”&lt;/li&gt;
&lt;li&gt;经常会有部分人认为你在说“网页设计”&lt;/li&gt;
&lt;li&gt;不仅是美学范畴&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/41.png&quot; alt=&quot;41&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;配色&quot;&gt;&lt;a href=&quot;#配色&quot; class=&quot;headerlink&quot; title=&quot;配色&quot;&gt;&lt;/a&gt;配色&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/42.png&quot; alt=&quot;42&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;字体&quot;&gt;&lt;a href=&quot;#字体&quot; class=&quot;headerlink&quot; title=&quot;字体&quot;&gt;&lt;/a&gt;字体&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/43.png&quot; alt=&quot;43&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;用户体验的要素-2&quot;&gt;&lt;a href=&quot;#用户体验的要素-2&quot; class=&quot;headerlink&quot; title=&quot;用户体验的要素&quot;&gt;&lt;/a&gt;用户体验的要素&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/44.png&quot; alt=&quot;44&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;要素的应用举例&quot;&gt;&lt;a href=&quot;#要素的应用举例&quot; class=&quot;headerlink&quot; title=&quot;要素的应用举例&quot;&gt;&lt;/a&gt;要素的应用举例&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/45.png&quot; alt=&quot;45&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;以搜索引擎为例&quot;&gt;&lt;a href=&quot;#以搜索引擎为例&quot; class=&quot;headerlink&quot; title=&quot;以搜索引擎为例&quot;&gt;&lt;/a&gt;以搜索引擎为例&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;几乎所有的网站都有&lt;/li&gt;
&lt;li&gt;每个网站的方式都有差别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/46.png&quot; alt=&quot;46&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;战略层-2&quot;&gt;&lt;a href=&quot;#战略层-2&quot; class=&quot;headerlink&quot; title=&quot;战略层&quot;&gt;&lt;/a&gt;战略层&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用户需求&lt;ul&gt;
&lt;li&gt;用户需要搜索引擎吗？&lt;/li&gt;
&lt;li&gt;是否限制了那些需要搜索功能的用户的需求？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网站目的&lt;ul&gt;
&lt;li&gt;使用可操作搜索可以获取我们提供的信息么？&lt;/li&gt;
&lt;li&gt;是否可操作搜索限制了网站所需要达成的目标？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/47.png&quot; alt=&quot;47&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;范围层-2&quot;&gt;&lt;a href=&quot;#范围层-2&quot; class=&quot;headerlink&quot; title=&quot;范围层&quot;&gt;&lt;/a&gt;范围层&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;产品功能说明书&lt;ul&gt;
&lt;li&gt;关键词输入&lt;/li&gt;
&lt;li&gt;其他领域的特殊标准&lt;/li&gt;
&lt;li&gt;缩小搜索结果范围的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内容需求&lt;ul&gt;
&lt;li&gt;标记&lt;/li&gt;
&lt;li&gt;结果数据&lt;/li&gt;
&lt;li&gt;帮助文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/48.png&quot; alt=&quot;48&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;结构层-2&quot;&gt;&lt;a href=&quot;#结构层-2&quot; class=&quot;headerlink&quot; title=&quot;结构层&quot;&gt;&lt;/a&gt;结构层&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;交互设计&lt;ul&gt;
&lt;li&gt;用户每一步可做的选择&lt;/li&gt;
&lt;li&gt;多控制下的系统行为&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信息架构&lt;ul&gt;
&lt;li&gt;作为搜索标准的构架范围&lt;/li&gt;
&lt;li&gt;元数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/49.png&quot; alt=&quot;49&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;框架层-2&quot;&gt;&lt;a href=&quot;#框架层-2&quot; class=&quot;headerlink&quot; title=&quot;框架层&quot;&gt;&lt;/a&gt;框架层&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;信息设计&lt;ul&gt;
&lt;li&gt;搜索结果的布局&lt;/li&gt;
&lt;li&gt;错误状态的表达&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;界面设计&lt;ul&gt;
&lt;li&gt;用户输入的途径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;导航设计&lt;ul&gt;
&lt;li&gt;进入界面流和离开界面流&lt;/li&gt;
&lt;li&gt;通过搜索结果移动浏览&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/50.png&quot; alt=&quot;50&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;外观层-2&quot;&gt;&lt;a href=&quot;#外观层-2&quot; class=&quot;headerlink&quot; title=&quot;外观层&quot;&gt;&lt;/a&gt;外观层&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;视觉设计&lt;ul&gt;
&lt;li&gt;颜色&lt;/li&gt;
&lt;li&gt;字体样式&lt;/li&gt;
&lt;li&gt;布局&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/51.png&quot; alt=&quot;51&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;提出正确的问题&quot;&gt;&lt;a href=&quot;#提出正确的问题&quot; class=&quot;headerlink&quot; title=&quot;提出正确的问题&quot;&gt;&lt;/a&gt;提出正确的问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;我们尝试解决哪些问题&lt;/li&gt;
&lt;li&gt;我们针对问题提出哪些解决方法会导致什么样的结果？&lt;/li&gt;
&lt;li&gt;解决办法是否促使我们重新思考其他问题？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/52.png&quot; alt=&quot;52&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;马拉松和短距离冲刺&quot;&gt;&lt;a href=&quot;#马拉松和短距离冲刺&quot; class=&quot;headerlink&quot; title=&quot;马拉松和短距离冲刺&quot;&gt;&lt;/a&gt;马拉松和短距离冲刺&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;冲刺是短期竞速&lt;ul&gt;
&lt;li&gt;快速开始&lt;/li&gt;
&lt;li&gt;尽快燃烧能量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;马拉松是长期赛跑&lt;ul&gt;
&lt;li&gt;自己控制速度&lt;/li&gt;
&lt;li&gt;选择何时燃烧能量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你打算尝试那种运动？&lt;/li&gt;
&lt;li&gt;哪种运动你正在做？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/53.png&quot; alt=&quot;53&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;回答出反对的理由&quot;&gt;&lt;a href=&quot;#回答出反对的理由&quot; class=&quot;headerlink&quot; title=&quot;回答出反对的理由&quot;&gt;&lt;/a&gt;回答出反对的理由&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;“市场调研可以告诉我们所有关于用户的事”&lt;ul&gt;
&lt;li&gt;人口数据可不是用户深入研究&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“我们就遵照网上找来的指导挨个来做”&lt;ul&gt;
&lt;li&gt;网上找的资料必定很普遍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“界面是简单的——技术是复杂的”&lt;ul&gt;
&lt;li&gt;什么更复杂：机器还是人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/54.png&quot; alt=&quot;54&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;回答出反对的理由-1&quot;&gt;&lt;a href=&quot;#回答出反对的理由-1&quot; class=&quot;headerlink&quot; title=&quot;回答出反对的理由&quot;&gt;&lt;/a&gt;回答出反对的理由&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;“我们雇不起专家”&lt;ul&gt;
&lt;li&gt;任何事你都不需要专家&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“我们做的时候再弄明白”&lt;ul&gt;
&lt;li&gt;爵士乐可以即兴创作，设计可不行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“我们做质量评估的时候再处理”&lt;ul&gt;
&lt;li&gt;那时候就晚了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“时间表上没时间了”&lt;ul&gt;
&lt;li&gt;下次发布的时候节约时间吧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/55.png&quot; alt=&quot;55&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;该避免犯的错误&quot;&gt;&lt;a href=&quot;#该避免犯的错误&quot; class=&quot;headerlink&quot; title=&quot;该避免犯的错误&quot;&gt;&lt;/a&gt;该避免犯的错误&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;弃权式设计：&lt;/strong&gt;“我们应该做哪些容易完成的事”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模仿式设计：&lt;/strong&gt;“如果这对亚马逊网是足够好的，对我们也是”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令式设计：&lt;/strong&gt;“因为我说过”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/56.png&quot; alt=&quot;56&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;瀑布式是危险的&quot;&gt;&lt;a href=&quot;#瀑布式是危险的&quot; class=&quot;headerlink&quot; title=&quot;瀑布式是危险的&quot;&gt;&lt;/a&gt;瀑布式是危险的&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/57.png&quot; alt=&quot;57&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;迭代式发展&quot;&gt;&lt;a href=&quot;#迭代式发展&quot; class=&quot;headerlink&quot; title=&quot;迭代式发展&quot;&gt;&lt;/a&gt;迭代式发展&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;网站更新不会停止&lt;/li&gt;
&lt;li&gt;做你现在要做的&lt;/li&gt;
&lt;li&gt;总是前瞻性地计划下次发布&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/58.png&quot; alt=&quot;58&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;职责&quot;&gt;&lt;a href=&quot;#职责&quot; class=&quot;headerlink&quot; title=&quot;职责&quot;&gt;&lt;/a&gt;职责&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;具体你选的哪项职责无关紧要——只要你把所有板块都覆盖住&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/59.png&quot; alt=&quot;59&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;九大支柱&quot;&gt;&lt;a href=&quot;#九大支柱&quot; class=&quot;headerlink&quot; title=&quot;九大支柱&quot;&gt;&lt;/a&gt;九大支柱&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;常见成功团队的核心能力&lt;/li&gt;
&lt;li&gt;影响团队的：&lt;ul&gt;
&lt;li&gt;职责&lt;/li&gt;
&lt;li&gt;进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/60.png&quot; alt=&quot;60&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;用户调研-1&quot;&gt;&lt;a href=&quot;#用户调研-1&quot; class=&quot;headerlink&quot; title=&quot;用户调研&quot;&gt;&lt;/a&gt;用户调研&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以用户为中心设计的基础&lt;/li&gt;
&lt;li&gt;告知所有的战略决定&lt;/li&gt;
&lt;li&gt;基本职责是认识用户需求&lt;/li&gt;
&lt;li&gt;头衔：&lt;ul&gt;
&lt;li&gt;用户调研员&lt;/li&gt;
&lt;li&gt;可用性分析师&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/61.png&quot; alt=&quot;61&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;站点战略&quot;&gt;&lt;a href=&quot;#站点战略&quot; class=&quot;headerlink&quot; title=&quot;站点战略&quot;&gt;&lt;/a&gt;站点战略&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基本职责是定义站点目的&lt;/li&gt;
&lt;li&gt;决定优先级和成功的度量法&lt;/li&gt;
&lt;li&gt;头衔：&lt;ul&gt;
&lt;li&gt;商业分析师&lt;/li&gt;
&lt;li&gt;产品经理&lt;/li&gt;
&lt;li&gt;执行监制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/62.png&quot; alt=&quot;62&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;技术战略&quot;&gt;&lt;a href=&quot;#技术战略&quot; class=&quot;headerlink&quot; title=&quot;技术战略&quot;&gt;&lt;/a&gt;技术战略&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主要负责功能说明书&lt;/li&gt;
&lt;li&gt;决定技术平台和采用标准&lt;/li&gt;
&lt;li&gt;头衔：&lt;ul&gt;
&lt;li&gt;高级工程师&lt;/li&gt;
&lt;li&gt;开发主管&lt;/li&gt;
&lt;li&gt;技术领头人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/63.png&quot; alt=&quot;63&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;内容战略&quot;&gt;&lt;a href=&quot;#内容战略&quot; class=&quot;headerlink&quot; title=&quot;内容战略&quot;&gt;&lt;/a&gt;内容战略&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主要负责内容需求&lt;/li&gt;
&lt;li&gt;决定合适的版式和主题&lt;/li&gt;
&lt;li&gt;头衔：&lt;ul&gt;
&lt;li&gt;内容策划人&lt;/li&gt;
&lt;li&gt;内容编辑&lt;/li&gt;
&lt;li&gt;主编&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/64.png&quot; alt=&quot;64&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;抽象设计&quot;&gt;&lt;a href=&quot;#抽象设计&quot; class=&quot;headerlink&quot; title=&quot;抽象设计&quot;&gt;&lt;/a&gt;抽象设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;把战略转向设计概念&lt;/li&gt;
&lt;li&gt;主要负责结构层&lt;/li&gt;
&lt;li&gt;有时负责范围和框架层&lt;/li&gt;
&lt;li&gt;头衔：&lt;ul&gt;
&lt;li&gt;信息架构师&lt;/li&gt;
&lt;li&gt;交互设计师&lt;/li&gt;
&lt;li&gt;界面专家&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/65.png&quot; alt=&quot;65&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;技术执行&quot;&gt;&lt;a href=&quot;#技术执行&quot; class=&quot;headerlink&quot; title=&quot;技术执行&quot;&gt;&lt;/a&gt;技术执行&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;有策略地执行技术战略&lt;/li&gt;
&lt;li&gt;可能要组合很多职能：从编码到整合到测试&lt;/li&gt;
&lt;li&gt;头衔：&lt;ul&gt;
&lt;li&gt;软件工程师&lt;/li&gt;
&lt;li&gt;HTML开发者&lt;/li&gt;
&lt;li&gt;QA测试员&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/66.png&quot; alt=&quot;66&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;内容制作&quot;&gt;&lt;a href=&quot;#内容制作&quot; class=&quot;headerlink&quot; title=&quot;内容制作&quot;&gt;&lt;/a&gt;内容制作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;有策略地执行内容战略&lt;/li&gt;
&lt;li&gt;搜集，编辑，生产和部署内容（不仅是文本）&lt;/li&gt;
&lt;li&gt;头衔：&lt;ul&gt;
&lt;li&gt;内容制作人&lt;/li&gt;
&lt;li&gt;作者&lt;/li&gt;
&lt;li&gt;编辑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/67.png&quot; alt=&quot;67&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;视觉设计&quot;&gt;&lt;a href=&quot;#视觉设计&quot; class=&quot;headerlink&quot; title=&quot;视觉设计&quot;&gt;&lt;/a&gt;视觉设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;有策略地实现抽象设计&lt;/li&gt;
&lt;li&gt;主要负责外观层&lt;/li&gt;
&lt;li&gt;有时负责框架和结构层&lt;/li&gt;
&lt;li&gt;头衔：&lt;ul&gt;
&lt;li&gt;界面设计师&lt;/li&gt;
&lt;li&gt;视觉设计师&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/68.png&quot; alt=&quot;68&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;项目管理&quot;&gt;&lt;a href=&quot;#项目管理&quot; class=&quot;headerlink&quot; title=&quot;项目管理&quot;&gt;&lt;/a&gt;项目管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将所有策略能力绑定&lt;/li&gt;
&lt;li&gt;在小型组织里常常忽略&lt;/li&gt;
&lt;li&gt;头衔：&lt;ul&gt;
&lt;li&gt;制作人&lt;/li&gt;
&lt;li&gt;项目管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/69.png&quot; alt=&quot;69&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;九大支柱-1&quot;&gt;&lt;a href=&quot;#九大支柱-1&quot; class=&quot;headerlink&quot; title=&quot;九大支柱&quot;&gt;&lt;/a&gt;九大支柱&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不是一个九人小组&lt;/li&gt;
&lt;li&gt;也不是一个九项步骤的过程&lt;/li&gt;
&lt;li&gt;应该正确结合两者并深入进去研究&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/70.png&quot; alt=&quot;70&quot;&gt;　&lt;/p&gt;
&lt;h3 id=&quot;以上这些都是关于什么呢？&quot;&gt;&lt;a href=&quot;#以上这些都是关于什么呢？&quot; class=&quot;headerlink&quot; title=&quot;以上这些都是关于什么呢？&quot;&gt;&lt;/a&gt;以上这些都是关于什么呢？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;开发前要做计划&lt;/li&gt;
&lt;li&gt;对于你所有选择要有清晰的理由&lt;/li&gt;
&lt;li&gt;清楚明确地表达&lt;/li&gt;
&lt;li&gt;做人们喜爱的东西&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/71.png&quot; alt=&quot;71&quot;&gt;　
　　&lt;/p&gt;
&lt;h3 id=&quot;结束&quot;&gt;&lt;a href=&quot;#结束&quot; class=&quot;headerlink&quot; title=&quot;结束&quot;&gt;&lt;/a&gt;结束&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/ppt/72.png&quot; alt=&quot;72&quot;&gt;　&lt;/p&gt;
&lt;h2 id=&quot;参考：&quot;&gt;&lt;a href=&quot;#参考：&quot; class=&quot;headerlink&quot; title=&quot;参考：&quot;&gt;&lt;/a&gt;参考：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://cuikai-wh.com/about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@小轰同学&lt;/a&gt;-&lt;a href=&quot;http://cuikai-wh.com/wp-content/uploads/2011/01/elements-of-ue-v1.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用户体验的要素-1.0版思维导图整合版本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.adaptivepath.com/events/workshops/businessofux/elements0803.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jesse James Garrett在adaptive path的演讲 – 用户体验的要素&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jjg.net/ia/visvocab/chinese.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;描绘信息架构和交换设计的图示词汇表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jjg.net/elements/pdf/elements.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Elements of User Experience&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ww3.sinaimg.cn/large/64945e3dtw1djew0x37yng.gif&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;产品设计-概念图&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ww3.sinaimg.cn/large/6694d7c8jw1duyly18i1mg.gif&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何留住你的用户？设计你的用户体验流&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/user-experience/user-experience.png&quot; alt=&quot;user experience&quot;&gt;&lt;/p&gt;
&lt;p&gt;昨天晚上媳妇跟我说，他们的产品负（jiao）责（shi）人（gun）说”交互设计就是UI，产品界面上什么按钮该放哪儿，页面该怎么跳转，这些都是&lt;strong&gt;用户体验&lt;/strong&gt;“，转达了他们产品负责人的话之后，媳妇继续问：“我觉得她说的不对，我认为用户体验是UI（界面设计）+UE（交互设计）。”&lt;/p&gt;
&lt;p&gt;媳妇的这个问题让我陷入了思考，现在互联网从业人员都在谈“用户体验”，包括传统行业的从业人员也在谈“互联网思维”，也谈“用户体验”。&lt;strong&gt;那么用户体验到底是一个什么东西？是否就是UI+UE？&lt;/strong&gt;，也让我有了写这篇Blog的冲动。&lt;/p&gt;
    
    </summary>
    
      <category term="产品设计" scheme="http://tonydeng.github.io/categories/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="product" scheme="http://tonydeng.github.io/tags/product/"/>
    
      <category term="thinking" scheme="http://tonydeng.github.io/tags/thinking/"/>
    
      <category term="user experience" scheme="http://tonydeng.github.io/tags/user-experience/"/>
    
      <category term="UE" scheme="http://tonydeng.github.io/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>Java8环境下的Maven javadoc插件的配置</title>
    <link href="http://tonydeng.github.io/2015/10/21/maven-Javadoc-plugin-in-java8-exception-resolution/"/>
    <id>http://tonydeng.github.io/2015/10/21/maven-Javadoc-plugin-in-java8-exception-resolution/</id>
    <published>2015-10-21T12:45:09.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;今天用maven在release代码时，又出现新的问题了，生成javadoc出现异常，导致release失败。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Refer to the generated Javadoc files &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./target/site/apidocs&#39;&lt;/span&gt; dir.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;org.apache.maven.reporting.&lt;span class=&quot;string&quot;&gt;MavenReportException:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Exit &lt;span class=&quot;string&quot;&gt;code:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; -.&lt;span class=&quot;regexp&quot;&gt;/src/&lt;/span&gt;main&lt;span class=&quot;regexp&quot;&gt;/java/&lt;/span&gt;com&lt;span class=&quot;regexp&quot;&gt;/github/&lt;/span&gt;tonydeng&lt;span class=&quot;regexp&quot;&gt;/commons/&lt;/span&gt;utils/DigestUtils.&lt;span class=&quot;string&quot;&gt;java:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;: 警告: input没有 &lt;span class=&quot;meta&quot;&gt;@param&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String sha1ToHex(String input) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                     ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;span class=&quot;regexp&quot;&gt;/src/&lt;/span&gt;main&lt;span class=&quot;regexp&quot;&gt;/java/&lt;/span&gt;com&lt;span class=&quot;regexp&quot;&gt;/github/&lt;/span&gt;tonydeng&lt;span class=&quot;regexp&quot;&gt;/commons/&lt;/span&gt;utils/DigestUtils.&lt;span class=&quot;string&quot;&gt;java:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;: 警告: 没有 &lt;span class=&quot;meta&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;javadoc的插件配置是这样&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;maven-javadoc-plugin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.9.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;attach-javadocs&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;phase&lt;/span&gt;&amp;gt;&lt;/span&gt;install&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;phase&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;encoding&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;encoding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;charset&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;charset&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;排查&quot;&gt;&lt;a href=&quot;#排查&quot; class=&quot;headerlink&quot; title=&quot;排查&quot;&gt;&lt;/a&gt;排查&lt;/h2&gt;&lt;p&gt;之前这个配置工作都很正常，让我百思不得其解。&lt;/p&gt;
&lt;p&gt;那怎么办？&lt;/p&gt;
&lt;p&gt;嗯，先升级一下maven-javadoc-plugin看看，升级到最新的2.10.3。&lt;/p&gt;
&lt;p&gt;还是不行，回退java版本到java7。&lt;/p&gt;
&lt;p&gt;哦，这样就可以了。看来应该是java8加了对javadoc的新的特性，我没有关注到。&lt;/p&gt;
&lt;p&gt;OK，找到线索了，那就查查看。&lt;/p&gt;
&lt;p&gt;先看看&lt;a href=&quot;http://openjdk.java.net/projects/jdk8/features&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java8的特性列表&lt;/a&gt;吧。果然，Java8添加了一个Javadoc注释内容检查的特性&lt;a href=&quot;http://openjdk.java.net/jeps/172&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DocLint&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;DocLint提供了一种方法来检测Javadoc的注释中的错误，希望能够在开发周期的早期和容易链接回源代码的方式。&lt;/p&gt;
&lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h2&gt;&lt;p&gt;如果想忽略DocLint的使用，可以在maven-javadoc-plugin的配置中加上对DocLint的忽略。&lt;/p&gt;
&lt;p&gt;最后的配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;maven-javadoc-plugin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.10.3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;attach-javadocs&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;phase&lt;/span&gt;&amp;gt;&lt;/span&gt;install&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;phase&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;encoding&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;encoding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;charset&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;charset&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;additionalparam&lt;/span&gt;&amp;gt;&lt;/span&gt;-Xdoclint:none&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;additionalparam&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;今天用maven在release代码时，又出现新的问题了，生成javadoc出现异常，导致release失败。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Refer to the generated Javadoc files &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./target/site/apidocs&#39;&lt;/span&gt; dir.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;org.apache.maven.reporting.&lt;span class=&quot;string&quot;&gt;MavenReportException:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Exit &lt;span class=&quot;string&quot;&gt;code:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; -.&lt;span class=&quot;regexp&quot;&gt;/src/&lt;/span&gt;main&lt;span class=&quot;regexp&quot;&gt;/java/&lt;/span&gt;com&lt;span class=&quot;regexp&quot;&gt;/github/&lt;/span&gt;tonydeng&lt;span class=&quot;regexp&quot;&gt;/commons/&lt;/span&gt;utils/DigestUtils.&lt;span class=&quot;string&quot;&gt;java:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;: 警告: input没有 &lt;span class=&quot;meta&quot;&gt;@param&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String sha1ToHex(String input) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                     ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;span class=&quot;regexp&quot;&gt;/src/&lt;/span&gt;main&lt;span class=&quot;regexp&quot;&gt;/java/&lt;/span&gt;com&lt;span class=&quot;regexp&quot;&gt;/github/&lt;/span&gt;tonydeng&lt;span class=&quot;regexp&quot;&gt;/commons/&lt;/span&gt;utils/DigestUtils.&lt;span class=&quot;string&quot;&gt;java:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;: 警告: 没有 &lt;span class=&quot;meta&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="效率" scheme="http://tonydeng.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="java" scheme="http://tonydeng.github.io/tags/java/"/>
    
      <category term="maven" scheme="http://tonydeng.github.io/tags/maven/"/>
    
      <category term="java8" scheme="http://tonydeng.github.io/tags/java8/"/>
    
      <category term="DocLint" scheme="http://tonydeng.github.io/tags/DocLint/"/>
    
      <category term="javadoc" scheme="http://tonydeng.github.io/tags/javadoc/"/>
    
      <category term="javadoc-plugin" scheme="http://tonydeng.github.io/tags/javadoc-plugin/"/>
    
      <category term="maven-plugin" scheme="http://tonydeng.github.io/tags/maven-plugin/"/>
    
      <category term="plugin" scheme="http://tonydeng.github.io/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>Git中文件名大小写引起的错误处理</title>
    <link href="http://tonydeng.github.io/2015/10/21/capitalization-error-handing-in-git/"/>
    <id>http://tonydeng.github.io/2015/10/21/capitalization-error-handing-in-git/</id>
    <published>2015-10-21T09:02:00.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/git-branching.png&quot; alt=&quot;git branching&quot;&gt;&lt;/p&gt;
&lt;p&gt;在团队使用Git的时候，尤其是多人合作的项目，经常会出现一个问题，就是由于同一个文件名大小写不一致导致无法合并的问题。&lt;/p&gt;
&lt;p&gt;那我们应该怎么来解决呢?&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;可以使用git rm –cached将冲突的文件从Git仓库的缓存中删除，然后改名后再加入到git中&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git rm --cached &lt;span class=&quot;symbol&quot;&gt;&amp;lt;filename&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv &lt;span class=&quot;symbol&quot;&gt;&amp;lt;old_filename&amp;gt;&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&amp;lt;new_filename&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&amp;lt;new_filename&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;rename &amp;lt;new_filename&amp;gt;&#39;&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&amp;lt;new_filename&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，为了一劳永逸，我们可以让团队成员都更改配置git的大小写敏感，避免某些windows用户继续制造这样的问题。&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;git&lt;/span&gt; config core.ignorecase &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/git-branching.png&quot; alt=&quot;git branching&quot;&gt;&lt;/p&gt;
&lt;p&gt;在团队使用Git的时候，尤其是多人合作的项目，经常会出现一个问题，就是由于同一个文件名大小写不一致导致无法合并的问题。&lt;/p&gt;
&lt;p&gt;那我们应该怎么来解决呢?&lt;/p&gt;
    
    </summary>
    
      <category term="效率" scheme="http://tonydeng.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="git" scheme="http://tonydeng.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ETCD应用场景</title>
    <link href="http://tonydeng.github.io/2015/10/19/etcd-application-scenarios/"/>
    <id>http://tonydeng.github.io/2015/10/19/etcd-application-scenarios/</id>
    <published>2015-10-19T07:49:41.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/etcd/etcd2-0.png&quot; alt=&quot;etcd logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;etcd是什么？&quot;&gt;&lt;a href=&quot;#etcd是什么？&quot; class=&quot;headerlink&quot; title=&quot;etcd是什么？&quot;&gt;&lt;/a&gt;etcd是什么？&lt;/h1&gt;&lt;p&gt;很多人对这个问题的第一反应可能是，它是一个键值存储仓库，却没有重视官方定义的后半句，用于&lt;strong&gt;配置共享&lt;/strong&gt;和&lt;strong&gt;服务发现&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A highly-available key value store for shared configuration and service discovery.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上，etcd作为一个受到Zookeeper和doozer启发而催生的项目，除了拥有与之类似的功能外，更具有以下4个特点。（&lt;a href=&quot;https://github.com/coreos/etcd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;引自etcd官方文档&lt;/a&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单： 基于HTTP+JSON的API让你可以用CURL命令就可以轻松使用。&lt;/li&gt;
&lt;li&gt;安全： 可以选择SSL客户认证机制。&lt;/li&gt;
&lt;li&gt;快速： 每个实例每秒支持一千次写操作。&lt;/li&gt;
&lt;li&gt;可信： 使用&lt;a href=&quot;http://raftconsensus.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ralf&lt;/a&gt;算法充分实现了分布式。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h1&gt;&lt;h2 id=&quot;场景一：-服务发现&quot;&gt;&lt;a href=&quot;#场景一：-服务发现&quot; class=&quot;headerlink&quot; title=&quot;场景一： 服务发现&quot;&gt;&lt;/a&gt;场景一： 服务发现&lt;/h2&gt;&lt;p&gt;服务发现（Service Discovery）要解决的是分布式系统中最常见的问题之一，即在同一个分布式集群中的进程或服务如何才能找到对方并建立连接。&lt;/p&gt;
&lt;p&gt;从本质上说，服务发现就是要了解集群中是否有进程在监听upd或者tcp端口，并且通过名字就可以进行查找和链接。&lt;/p&gt;
&lt;p&gt;要解决服务发现的问题，需要下面三大支柱，缺一不可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个强一致性、高可用的服务存储目录。&lt;ul&gt;
&lt;li&gt;基于Ralf算法的etcd天生就是这样一个强一致性、高可用的服务存储目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一种注册服务和健康服务健康状况的机制。&lt;ul&gt;
&lt;li&gt;用户可以在etcd中注册服务，并且对注册的服务配置&lt;code&gt;key TTL&lt;/code&gt;，定时保持服务的心跳以达到监控健康状态的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一种查找和连接服务的机制。&lt;ul&gt;
&lt;li&gt;通过在etcd指定的主题下注册的服务业能在对应的主题下查找到。&lt;/li&gt;
&lt;li&gt;为了确保连接，我们可以在每个服务机器上都部署一个proxy模式的etcd，这样就可以确保访问etcd集群的服务都能够互相连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/etcd/service-discovery.jpg&quot; alt=&quot;服务发现&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面我们来看一下服务发现的具体应用场景&lt;/p&gt;
&lt;h3 id=&quot;微服务协同工作架构中，服务动态添加。&quot;&gt;&lt;a href=&quot;#微服务协同工作架构中，服务动态添加。&quot; class=&quot;headerlink&quot; title=&quot;微服务协同工作架构中，服务动态添加。&quot;&gt;&lt;/a&gt;微服务协同工作架构中，服务动态添加。&lt;/h3&gt;&lt;p&gt;随着Docker容器的流行，多种微服务共同协作，构成一个功能相对强大的架构的案例越来越多。透明化的动态添加这些服务的需求也日益强烈。通过服务发现机制，在etcd中注册某个服务名字的目录，在该目录下存储可用的服务节点的IP。在使用服务的过程中，只要从服务目录下查找可用的服务节点进行使用即可。&lt;/p&gt;
&lt;p&gt;微服务协同工作如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/etcd/micro-services.jpg&quot; alt=&quot;微服务&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;PaaS平台中应用多实例与实例故障重启透明化&quot;&gt;&lt;a href=&quot;#PaaS平台中应用多实例与实例故障重启透明化&quot; class=&quot;headerlink&quot; title=&quot;PaaS平台中应用多实例与实例故障重启透明化&quot;&gt;&lt;/a&gt;PaaS平台中应用多实例与实例故障重启透明化&lt;/h3&gt;&lt;p&gt;PaaS平台中的应用一般都有多个实例，通过域名，不仅可以透明的对多个实例进行访问，而且还可以实现负载均衡。&lt;/p&gt;
&lt;p&gt;但是应用的某个实例随时都有可能故障重启，这时就需要动态的配置域名解析（路由）中的信息。通过etcd的服务发现功能就可以轻松解决这个动态配置的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/etcd/multiple-instances.jpg&quot; alt=&quot;多实例透明化&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景二：-消息发布和订阅&quot;&gt;&lt;a href=&quot;#场景二：-消息发布和订阅&quot; class=&quot;headerlink&quot; title=&quot;场景二： 消息发布和订阅&quot;&gt;&lt;/a&gt;场景二： 消息发布和订阅&lt;/h2&gt;&lt;p&gt;在分布式系统中，最为适用的组件间通信的方式是消息发布和订阅机制。&lt;/p&gt;
&lt;p&gt;具体而言，即配置一个配置共享中心，书籍提供者在这个配置中心发布消息，而消息使用者则订阅他们关心的主题，一旦有关主题有消息发布，就会实时通知订阅者。通过这种方式可以实现发布式系统配种的集中式管理和实时动态更新。&lt;/p&gt;
&lt;h3 id=&quot;应用中的一些配置新存放在etcd上进行集中管理&quot;&gt;&lt;a href=&quot;#应用中的一些配置新存放在etcd上进行集中管理&quot; class=&quot;headerlink&quot; title=&quot;应用中的一些配置新存放在etcd上进行集中管理&quot;&gt;&lt;/a&gt;应用中的一些配置新存放在etcd上进行集中管理&lt;/h3&gt;&lt;p&gt;这类场景的使用方式通常是这样的：&lt;/p&gt;
&lt;p&gt;应用在启动的适合主动从etc获取一次配置信息，同时，在etcd节点上注册一个&lt;code&gt;Watcher&lt;/code&gt;并等待，以后每次配置有更新的适合，etcd都会实时通知订阅者，以此达到获取最新配置信息的目的。&lt;/p&gt;
&lt;h3 id=&quot;分布式日志收集系统&quot;&gt;&lt;a href=&quot;#分布式日志收集系统&quot; class=&quot;headerlink&quot; title=&quot;分布式日志收集系统&quot;&gt;&lt;/a&gt;分布式日志收集系统&lt;/h3&gt;&lt;p&gt;这个系统的核心工作是收集分布在不同机器上的日志。&lt;/p&gt;
&lt;p&gt;收集器通常按应用（或主题）来分配收集任务单元，因此可以在etcd上创建一个以应用（或主题）名目的目录，并将这个应用（或主题）相关的所有机器IP以子目录的形式存储在目录下。然后设置一个递归的etcd Watcher，递归式的健康应用（或主题）目录下所有信息的变动。这样就实现了在机器IP（消息）发生变动时，能够实时接受收集器调整任务分配。&lt;/p&gt;
&lt;h3 id=&quot;系统中心需要动态自动获取与人工干预修改信息请求内容&quot;&gt;&lt;a href=&quot;#系统中心需要动态自动获取与人工干预修改信息请求内容&quot; class=&quot;headerlink&quot; title=&quot;系统中心需要动态自动获取与人工干预修改信息请求内容&quot;&gt;&lt;/a&gt;系统中心需要动态自动获取与人工干预修改信息请求内容&lt;/h3&gt;&lt;p&gt;通常的解决方案是对外保留接口，例如JMX接口，来获取一些运行时的信息或提交修改的请求。&lt;/p&gt;
&lt;p&gt;而引入etcd后，只需要将这些信息存放在指定的etcd目录中，即可通过http接口直接被外部访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/etcd/msg-pub-sub.jpg&quot; alt=&quot;消息发布与订阅&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景三：-负载均衡&quot;&gt;&lt;a href=&quot;#场景三：-负载均衡&quot; class=&quot;headerlink&quot; title=&quot;场景三： 负载均衡&quot;&gt;&lt;/a&gt;场景三： 负载均衡&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;#场景一：_服务发现&quot;&gt;场景一&lt;/a&gt;中也提到了负载均衡（即软件负载均衡）。&lt;/p&gt;
&lt;p&gt;在分布式系统中，为了保证服务的高可用以及数据一致性，通常都会把数据和服务部署多份，以此达到对等服务，即使其中的某一个服务失效了，也不影响使用。&lt;/p&gt;
&lt;p&gt;这样的实现谁让会导致一定程度上数据写入性能的下降，但是却能够实现数据访问时的负载均衡。因为每个对等服务节点上都存有完整的数据，所有用户的访问流量就可以分流道不同的机器上。&lt;/p&gt;
&lt;h3 id=&quot;etcd本身分布式架构存储的信息支持负载均衡&quot;&gt;&lt;a href=&quot;#etcd本身分布式架构存储的信息支持负载均衡&quot; class=&quot;headerlink&quot; title=&quot;etcd本身分布式架构存储的信息支持负载均衡&quot;&gt;&lt;/a&gt;etcd本身分布式架构存储的信息支持负载均衡&lt;/h3&gt;&lt;p&gt;etcd集群化以后，每个etcd的核心节点都可以处理用户的请求。所以，把数据量小但是访问频繁的消息数据直接存储到etcd是一个不错的选择。比如，业务系统中常用的二级代码表。&lt;/p&gt;
&lt;p&gt;二级代码表的工作过程一般是这样，在表中存储代码，在etcd存储代码所代表的具体换衣，业务系统调用查表的过程，就需要查看表中代码的含义。所以如果把二级代码表中的小量数据存储到etcd中，不仅方便修改，也易于大量访问。&lt;/p&gt;
&lt;h3 id=&quot;利用etcd维护一个负载均衡节点表&quot;&gt;&lt;a href=&quot;#利用etcd维护一个负载均衡节点表&quot; class=&quot;headerlink&quot; title=&quot;利用etcd维护一个负载均衡节点表&quot;&gt;&lt;/a&gt;利用etcd维护一个负载均衡节点表&lt;/h3&gt;&lt;p&gt;etcd可以监控一个集群中多个节点的状态，当有一个请求发过来后，可以轮询式把请求转发给存活的多个节点。类似KafkaMQ，通过Zookeeper来维护生产者和消费者的负载均衡（也可以用etcd来做Zookeeper的工作）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/etcd/load-balance.jpg&quot; alt=&quot;负载均衡&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景四：-分布式通知与协调&quot;&gt;&lt;a href=&quot;#场景四：-分布式通知与协调&quot; class=&quot;headerlink&quot; title=&quot;场景四： 分布式通知与协调&quot;&gt;&lt;/a&gt;场景四： 分布式通知与协调&lt;/h2&gt;&lt;p&gt;这里讨论的分布式通知和协调，与消息发布和订阅有点相似。两者都使用了etcd的&lt;code&gt;Watcher&lt;/code&gt;机制，通过注册与异步通知机制，实现分布式环境下的不同系统之间的通知与协调，从而对数据变更进行实时处理。&lt;/p&gt;
&lt;p&gt;实现方式通常为：&lt;/p&gt;
&lt;p&gt;不同系统都在etcd上对同一个目录进行注册，同事设置&lt;code&gt;Watcher&lt;/code&gt;监控该目录的变化（如果对子目录的变化也有需求，可以设置成递归模式），当某个系统更新了etcd的目录，那么设置了&lt;code&gt;Watcher&lt;/code&gt;的系统就会受到通知，并做出相应的通知，并作出相应处理。&lt;/p&gt;
&lt;h3 id=&quot;通过etcd进行低耦合的心跳检测&quot;&gt;&lt;a href=&quot;#通过etcd进行低耦合的心跳检测&quot; class=&quot;headerlink&quot; title=&quot;通过etcd进行低耦合的心跳检测&quot;&gt;&lt;/a&gt;通过etcd进行低耦合的心跳检测&lt;/h3&gt;&lt;p&gt;检测系统和被检测系统通过etcd上某个目录管理而非直接关联起来，这样可以大大减少系统的耦合性。&lt;/p&gt;
&lt;h3 id=&quot;通过etcd完成系统调度&quot;&gt;&lt;a href=&quot;#通过etcd完成系统调度&quot; class=&quot;headerlink&quot; title=&quot;通过etcd完成系统调度&quot;&gt;&lt;/a&gt;通过etcd完成系统调度&lt;/h3&gt;&lt;p&gt;某系统有控制台和推送系统两部分组成，控制台的职责是控制推送系统进行相应的推送工作。管理人员在控制台做的一些操作，实际上只需要修改etcd上某些目录节点的状态，而etcd就会自动把这些变化通知给注册了&lt;code&gt;Watcher&lt;/code&gt;的推送系统客户端，推送系统再作出相应的推送任务。&lt;/p&gt;
&lt;h3 id=&quot;通过etcd完成工作汇报&quot;&gt;&lt;a href=&quot;#通过etcd完成工作汇报&quot; class=&quot;headerlink&quot; title=&quot;通过etcd完成工作汇报&quot;&gt;&lt;/a&gt;通过etcd完成工作汇报&lt;/h3&gt;&lt;p&gt;大部分类似的任务分发系统，子任务启动后，到etcd来注册一个临时工作目录，并且定时将自己的进度汇报（将进度写入到这个临时目录），这样任务管理者就能够实时知道任务进度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/etcd/distributed-collaborative-work.jpg&quot; alt=&quot;分布式协同工作&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景五：-分布式锁&quot;&gt;&lt;a href=&quot;#场景五：-分布式锁&quot; class=&quot;headerlink&quot; title=&quot;场景五： 分布式锁&quot;&gt;&lt;/a&gt;场景五： 分布式锁&lt;/h2&gt;&lt;p&gt;因为etcd使用&lt;code&gt;Raft&lt;/code&gt;算法保持了数据的强一致性，某次操作存储到集群中的值必然是全局一致的，所以很容易实现分布式锁。&lt;/p&gt;
&lt;p&gt;锁服务有两种使用方式，一是保持独占，二是控制时序。&lt;/p&gt;
&lt;h3 id=&quot;保持独占&quot;&gt;&lt;a href=&quot;#保持独占&quot; class=&quot;headerlink&quot; title=&quot;保持独占&quot;&gt;&lt;/a&gt;保持独占&lt;/h3&gt;&lt;p&gt;即所有试图获取锁的用户最终只有一个可以得到。&lt;/p&gt;
&lt;p&gt;etcd为此提供了一套实现分布式锁原子操作CAS（&lt;code&gt;ComparaAndSwap&lt;/code&gt;）的API。通过设置&lt;code&gt;prevExist&lt;/code&gt;值，可以保证在多个节点同时创建某个目录时，只有一个成功，而该用户即可任务是获得了锁。&lt;/p&gt;
&lt;h3 id=&quot;控制时序&quot;&gt;&lt;a href=&quot;#控制时序&quot; class=&quot;headerlink&quot; title=&quot;控制时序&quot;&gt;&lt;/a&gt;控制时序&lt;/h3&gt;&lt;p&gt;即所有试图获取锁的用户都会进入等待队列，获得锁的顺序是全局唯一的，同时决定了队列执行顺序。&lt;/p&gt;
&lt;p&gt;etcd为此也提供了一套API（自动创建有序键），对一个目录建值是指定为&lt;code&gt;POST&lt;/code&gt;动作，这样etcd就会在目录下生成一个当前最大的值为键，存储这个新的值（客户端编号）。&lt;/p&gt;
&lt;p&gt;同时还可以使用API按顺序列出所有目录下的键值。此时这些键的值就是客户端的时序，而这些键中存储的值可以是代表客户端的编号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/etcd/distributed-lock.jpg&quot; alt=&quot;分布式锁&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景六：-分布式队列&quot;&gt;&lt;a href=&quot;#场景六：-分布式队列&quot; class=&quot;headerlink&quot; title=&quot;场景六： 分布式队列&quot;&gt;&lt;/a&gt;场景六： 分布式队列&lt;/h2&gt;&lt;p&gt;分布式队列的常规用法与场景五中所描述的分布式锁的控制时序用法类似，即创建一个先进先出的队列，保证顺序。&lt;/p&gt;
&lt;p&gt;另一种比较有意思的实现是&lt;strong&gt;在保证队列达到某个条件时再统一按顺序执行&lt;/strong&gt;。这种方法的实现可以在&lt;code&gt;/queue&lt;/code&gt;这个目录中另外再建立一个&lt;code&gt;/queue/condition&lt;/code&gt;节点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;condition可以表示队列大小。比如一个大的任务需要很多小任务就绪的情况下才能执行，每次有一个小任务就绪，就给这个condition数字加1，直到达到大任务规定的数字，再开始执行队列里的一系列小任务，最终执行大任务。&lt;/li&gt;
&lt;li&gt;condition可以表示某个任务不在队列。这个任务可以是所有排序任务的首个执行程序，也可以是拓扑结构中没有依赖的点。通常，必须执行这些任务后才能执行队列中的其他任务。&lt;/li&gt;
&lt;li&gt;condition还可以表示其它的一类开始执行任务的通知。可以由控制程序指定，当condition出现变化时，开始执行队列任务。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/etcd/distributed-queue.jpg&quot; alt=&quot;分布式队列&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景七：-集群监控与Leader竞选&quot;&gt;&lt;a href=&quot;#场景七：-集群监控与Leader竞选&quot; class=&quot;headerlink&quot; title=&quot;场景七： 集群监控与Leader竞选&quot;&gt;&lt;/a&gt;场景七： 集群监控与Leader竞选&lt;/h2&gt;&lt;p&gt;通过etcd来进行监控实现起来非常简单并且实时性强，用到了以下两点特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前面几个场景已经提到了Watcher机制，当某个节点消失或由变动时，Watcher会第一时间发现并告知用户。&lt;/li&gt;
&lt;li&gt;节点可以设置&lt;code&gt;TTL key&lt;/code&gt;，比如每隔30s向etcd发送一次心跳使代表该节点依然存活，否则说明节点消失。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样就可以第一时间检测到各节点的健康状态，以完成集群的监控要求。&lt;/p&gt;
&lt;p&gt;另外，使用分布式锁，可以完成Leader竞选。对于一些长时间CPU计算或使用IO操作，只需要由竞选出的Leader计算或处理一次，再把结果复制给其他Follower即可，从而避免重复劳动，节省计算资源。&lt;/p&gt;
&lt;p&gt;Leader应用的经典场景是在&lt;strong&gt;搜索系统中建立全量索引&lt;/strong&gt;。如果每个机器分别进行索引的建立，不仅耗时，而且不能保证索引的一致性。通过在etcd的CAS机制竞选Leader，由Leader进行索引计算，再降计算结果分发到其他节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/etcd/leader-election.jpg&quot; alt=&quot;Leader竞选&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景八：-为什么使用etcd而不用Zookeeper？&quot;&gt;&lt;a href=&quot;#场景八：-为什么使用etcd而不用Zookeeper？&quot; class=&quot;headerlink&quot; title=&quot;场景八： 为什么使用etcd而不用Zookeeper？&quot;&gt;&lt;/a&gt;场景八： 为什么使用etcd而不用Zookeeper？&lt;/h2&gt;&lt;p&gt;阅读了“&lt;a href=&quot;http://jm-blog.aliapp.com/?p=1232&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zookeeper典型应用场景一览&lt;/a&gt;”的同学可能会发现，etcd实现的这些功能，Zookeeper都能实现。那为什么要用etcd而非直接使用Zookeeper呢？&lt;/p&gt;
&lt;p&gt;相比较之下，Zookeeper有如下缺点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复杂。 Zookeeper的部署维护复杂，管理员必须掌握一系列的知识和技能；而&lt;a href=&quot;http://&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Paxos&lt;/a&gt;强一致性算法也是素来以复杂难懂而闻名于世；另外，Zookeeper的使用也比较复杂，需要安装客户端，官方只提供Java和C的两种语言的接口。&lt;/li&gt;
&lt;li&gt;Java编写。这里不是对Java有偏见，而是Java本身就偏向重型应用，它会引入大量的依赖。而运维人员则普遍希望机器集群能尽可能的简单，维护起来也不容易出错。&lt;/li&gt;
&lt;li&gt;发展缓慢。 Apache基金会项目特有的“&lt;a href=&quot;http://www.infoworld.com/article/2612082/open-source-software/has-apache-lost-its-way-.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Way&lt;/a&gt;”在开源界也饱受争议，其中一大原因就是由于基金会庞大的结构和松散的管理导致项目发展缓慢。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而etcd作为一个后起之秀，其优点也很明显。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单。 使用Go编写部署简单；使用HTTP作为接口使用简单；使用Raft算法保证强一致性让用户易于理解。&lt;/li&gt;
&lt;li&gt;数据持久化。 etcd默认数据一更新就进行持久化。&lt;/li&gt;
&lt;li&gt;安全。 etcd支持SSL客户端安全认证。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后，etcd作为一个年轻的项目，正在高速迭代和开发中，这既是一个优点，也是一个缺点。&lt;/p&gt;
&lt;p&gt;优点是在于它的未来具有无限的可能性，缺点是版本的迭代导致其使用的可靠性无法保证，无法得到大项目长时间使用的校验。&lt;/p&gt;
&lt;p&gt;然而，目前CoreOS、Kubernetes和Cloudfoundry等知名项目均在生产环境中使用了etcd，所以总的来说，etcd值得你去尝试。&lt;/p&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/coreos/etcd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/coreos/etcd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jm-blog.aliapp.com/?p=1232&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jm-blog.aliapp.com/?p=1232&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://progrium.com/blog/2014/07/29/understanding-modern-service-discovery-with-docker/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://progrium.com/blog/2014/07/29/understanding-modern-service-discovery-with-docker/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://devo.ps/blog/zookeeper-vs-doozer-vs-etcd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://devo.ps/blog/zookeeper-vs-doozer-vs-etcd&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/etcd/etcd2-0.png&quot; alt=&quot;etcd logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;etcd是什么？&quot;&gt;&lt;a href=&quot;#etcd是什么？&quot; class=&quot;headerlink&quot; title=&quot;etcd是什么？&quot;&gt;&lt;/a&gt;etcd是什么？&lt;/h1&gt;&lt;p&gt;很多人对这个问题的第一反应可能是，它是一个键值存储仓库，却没有重视官方定义的后半句，用于&lt;strong&gt;配置共享&lt;/strong&gt;和&lt;strong&gt;服务发现&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A highly-available key value store for shared configuration and service discovery.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上，etcd作为一个受到Zookeeper和doozer启发而催生的项目，除了拥有与之类似的功能外，更具有以下4个特点。（&lt;a href=&quot;https://github.com/coreos/etcd&quot;&gt;引自etcd官方文档&lt;/a&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单： 基于HTTP+JSON的API让你可以用CURL命令就可以轻松使用。&lt;/li&gt;
&lt;li&gt;安全： 可以选择SSL客户认证机制。&lt;/li&gt;
&lt;li&gt;快速： 每个实例每秒支持一千次写操作。&lt;/li&gt;
&lt;li&gt;可信： 使用&lt;a href=&quot;http://raftconsensus.github.io/&quot;&gt;Ralf&lt;/a&gt;算法充分实现了分布式。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="架构" scheme="http://tonydeng.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="etcd" scheme="http://tonydeng.github.io/tags/etcd/"/>
    
  </entry>
  
  <entry>
    <title>Netty 5用户指南</title>
    <link href="http://tonydeng.github.io/2015/09/20/netty5-user-guide/"/>
    <id>http://tonydeng.github.io/2015/09/20/netty5-user-guide/</id>
    <published>2015-09-20T13:03:35.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;Netty是一个&lt;code&gt;NIO client/server&lt;/code&gt;网络编程框架，可以快速且容易的开发基于协议（protocol）的网络客户端/服务端的程序，它极大简化了TCP和UDP socket编程，提供流水线化的操作。&lt;/p&gt;
&lt;p&gt;“快速且容易”并不会导致应用难以维护和性能低下。Netty经过仔细设计，基于许多协议实现的经验如：&lt;code&gt;FTP&lt;/code&gt;、&lt;code&gt;SMTP&lt;/code&gt;、&lt;code&gt;HTTP&lt;/code&gt;以及各种二进制和基于本文的老的协议，Netty成功的找到一种保证开发，稳定性，灵活性的方式，毋需折中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/netty/components.png&quot; alt=&quot;netty components&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h1&gt;&lt;h2 id=&quot;设计&quot;&gt;&lt;a href=&quot;#设计&quot; class=&quot;headerlink&quot; title=&quot;设计&quot;&gt;&lt;/a&gt;设计&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为各种传输类型提供统一的API，阻塞和非阻塞的socket&lt;/li&gt;
&lt;li&gt;灵活和可扩展的事件模型，将关注点分离&lt;/li&gt;
&lt;li&gt;高度可定制的线程模型-单线程，一种或多个线程池，如&lt;a href=&quot;http://en.wikipedia.org/wiki/Staged_event-driven_architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SEDA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;真正无连接的数据报socket支持（since 3.1）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;易用&quot;&gt;&lt;a href=&quot;#易用&quot; class=&quot;headerlink&quot; title=&quot;易用&quot;&gt;&lt;/a&gt;易用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;提供Javadoc，用户指南和例子&lt;/li&gt;
&lt;li&gt;JDK1.5以上版本不需要第三方库支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;性能&quot;&gt;&lt;a href=&quot;#性能&quot; class=&quot;headerlink&quot; title=&quot;性能&quot;&gt;&lt;/a&gt;性能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;更好的吞吐率，低延迟&lt;/li&gt;
&lt;li&gt;较少的资源占用&lt;/li&gt;
&lt;li&gt;最小化不必要的内存拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安全&quot;&gt;&lt;a href=&quot;#安全&quot; class=&quot;headerlink&quot; title=&quot;安全&quot;&gt;&lt;/a&gt;安全&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;完整的SSL/TLS， StartTLS支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;社区&quot;&gt;&lt;a href=&quot;#社区&quot; class=&quot;headerlink&quot; title=&quot;社区&quot;&gt;&lt;/a&gt;社区&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;作者从2003就开始写类似的框架（&lt;code&gt;mina&lt;/code&gt;），一直收集用户反馈。官方的&lt;a href=&quot;http://netty.io/wiki/user-guide-for-5.x.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;user guide&lt;/a&gt;，中文翻译的&lt;a href=&quot;http://www.getsetter.cn/2014/07/15/netty5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用户指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;现如今我们使用通用的应用程序或者类库来实现系统之间的互相访问，比如，我们经常使用一个HTTP客户端来从web服务器上获取信息，或者通过web service来执行一个远程的调用。&lt;/p&gt;
&lt;p&gt;然而，一个通用的协议和它的实现有时候并没用覆盖到一些场景。比如我们无法使用通用的http服务器来对庞大的文件和电子邮件进行交互，再比如我们无法处理那中准实时消息，比如财务信息和多人游戏数据。我们需要一个高效的协议实现用来处理一些特殊的场景。例如你可以实现一个基于AJAX的聊天应用，媒体流传输或者大文件传输的http服务器，你甚至可以想自己设计一个新的协议来准确定制你自己的需求。&lt;/p&gt;
&lt;p&gt;另外，不可避免的事情是你不得不处理这些私有协议来确保和原有系统的互通。在这个例子中会告诉你实现一个对应该程序不损耗稳定性和性能的协议是多么的快。&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://netty.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Netty&lt;/a&gt;是一个提供异步事件驱动的网络应用框架，可以为服务端和客户端提供一个快速迭代开发的高性能、高伸缩性的协议。&lt;/p&gt;
&lt;p&gt;换句话说，Netty是一个能够快速简单地来开发网络应用程序的NIO框架比如客户端和服务端的协议，Netty大大简化了网络程序的开发过程比如TCP和UDP的 Socket的开发。&lt;/p&gt;
&lt;p&gt;快速和简单并不等于一个应用会产生可维护性和性能的问题，Netty是一个被精心设计的框架，他从许多协议的实现中吸收了很多的经验比如FTP,SMTP,HTTP和许多二进制和基于文本的传统协议，Netty已经成功地找出了解决方案并且在不妥协开发效率、性能、稳定性、灵活性情况下。&lt;/p&gt;
&lt;p&gt;有一些用户可能已经发现其他的一些网络框架声称自己也有同样的优势，所以你可能会问是Netty和他们有什么不一样。答案就是Netty的哲学设计理念。Netty从第一天开始就把API和实现设计成为你提供最舒适的使用体验。Netty的设计理念会使当你阅读本指南并且和Netty打交道的时候，让你的使用变得更加简单。&lt;/p&gt;
&lt;h1 id=&quot;入门指南&quot;&gt;&lt;a href=&quot;#入门指南&quot; class=&quot;headerlink&quot; title=&quot;入门指南&quot;&gt;&lt;/a&gt;入门指南&lt;/h1&gt;&lt;p&gt;这个章节会围绕Netty核心的结构并附上一些简单的例子让你快速的入门。当你读完本章节你马上就可以用Netty写出一个客户端和一个服务端。&lt;br&gt;如果你在学习某些东西的时候喜欢自顶向下的方法，你可能想要从第二个章节架构概述开始，然后再回到这里。&lt;/p&gt;
&lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h2&gt;&lt;p&gt;如果要运行本章节中的2个例子最低要求是：Netty的最新版本(Netty5)和JDK1.6及以上。最新的Netty版本在项目&lt;a href=&quot;http://netty.io/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载页面&lt;/a&gt;。为了下载到正确的JDK版本，请到你偏爱的网站下载。&lt;br&gt;当你在读的过程中，你可能有很多关于本章节介绍的类相关的问题，每当你想知道他们的更多的信息那么请参考API说明文档。为了方便，所有文档中涉及到的类名字都会被关联到一个在线的API说明。当然如果有任何错误信息、语法错误或者你有任何好的建议来改进文档说明，那么请联系&lt;a href=&quot;http://netty.io/community.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;netty社区&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;实现Discard服务器&quot;&gt;&lt;a href=&quot;#实现Discard服务器&quot; class=&quot;headerlink&quot; title=&quot;实现Discard服务器&quot;&gt;&lt;/a&gt;实现Discard服务器&lt;/h2&gt;&lt;p&gt;世界上最简单的协议不是”Hello,World!”，是&lt;a href=&quot;http://tools.ietf.org/html/rfc863&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DISCARD&lt;/a&gt;，他是一种丢弃所有接收的数据，并不做有任何响应的协议。&lt;br&gt;为了实现DISCARD协议，你唯一需要做的就是忽略所有收到的数据。让我们从处理器的实现开始，处理器是由Netty生成用来处理I/O事件的。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; io.netty.example.discard;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; io.netty.buffer.ByteBuf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; io.netty.channel.ChannelHandlerContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; io.netty.channel.ChannelHandlerAdapter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Handles a server-side channel.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DiscardServerHandler&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ChannelHandlerAdapter&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// (1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;channelRead&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ChannelHandlerContext ctx, Object msg)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// (2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Discard the received data silently.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ((ByteBuf) msg).release(); &lt;span class=&quot;comment&quot;&gt;// (3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exceptionCaught&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ChannelHandlerContext ctx, Throwable cause)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// (4)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Close the connection when an exception is raised.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cause.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DisCardServerHandler 继承自 &lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelHandlerAdapter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelHandlerAdapter&lt;/a&gt;，这个类实现了&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelHandler&lt;/a&gt;接口，ChannelHandler提供了许多事件处理的接口方法，然后你可以覆盖这些方法。现在仅仅只需要继承&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelHandlerAdapter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelHandlerAdapter&lt;/a&gt;类而不是你自己去实现接口方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这里我们覆盖了&lt;code&gt;chanelRead()&lt;/code&gt;事件处理方法。每当从客户端收到新的数据时，这个方法会在收到消息时被调用，这个例子中，收到的消息的类型是&lt;a href=&quot;http://netty.io/5.0/api/io/netty/buffer/ByteBuf.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ByteBuf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了实现DISCARD协议，处理器不得不忽略所有接受到的消息。&lt;a href=&quot;http://netty.io/5.0/api/io/netty/buffer/ByteBuf.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ByteBuf&lt;/a&gt;是一个引用计数对象，这个对象必须显示地调用release()方法来释放。请记住处理器的职责是释放所有传递到处理器的引用计数对象。通常，channelRead()方法的实现就像下面的这段代码：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void channelRead(ChannelHandlerContext ctx, Object msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Do something with msg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ReferenceCountUtil&lt;span class=&quot;selector-class&quot;&gt;.release&lt;/span&gt;(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exceptionCaught()&lt;/code&gt;事件处理方法是当出现Throwable对象才会被调用，即当Netty由于IO错误或者处理器在处理事件时抛出的异常时。在大部分情况下，捕获的异常应该被记录下来并且把关联的channel给关闭掉。然而这个方法的处理方式会在遇到不同异常的情况下有不同的实现，比如你可能想在关闭连接之前发送一个错误码的响应消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到目前为止一切都还比较顺利，我们已经实现了DISCARD服务的一半功能，剩下的需要编写一个&lt;code&gt;main()&lt;/code&gt;方法来启动服务端的DiscardServerHandler。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; io.netty.example.discard;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; io.netty.bootstrap.ServerBootstrap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; io.netty.channel.ChannelFuture;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; io.netty.channel.ChannelInitializer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; io.netty.channel.ChannelOption;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; io.netty.channel.EventLoopGroup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; io.netty.channel.nio.NioEventLoopGroup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; io.netty.channel.socket.SocketChannel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; io.netty.channel.socket.nio.NioServerSocketChannel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Discards any incoming data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DiscardServer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; port;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DiscardServer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; port)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.port = port;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EventLoopGroup bossGroup = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NioEventLoopGroup(); &lt;span class=&quot;comment&quot;&gt;// (1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EventLoopGroup workerGroup = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NioEventLoopGroup();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ServerBootstrap b = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerBootstrap(); &lt;span class=&quot;comment&quot;&gt;// (2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b.group(bossGroup, workerGroup)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             .channel(NioServerSocketChannel.class) &lt;span class=&quot;comment&quot;&gt;// (3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             .childHandler(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;() &amp;#123; &lt;span class=&quot;comment&quot;&gt;// (4)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initChannel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SocketChannel ch)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ch.pipeline().addLast(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DiscardServerHandler());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             .option(ChannelOption.SO_BACKLOG, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;)          &lt;span class=&quot;comment&quot;&gt;// (5)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             .childOption(ChannelOption.SO_KEEPALIVE, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// (6)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Bind and start to accept incoming connections.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ChannelFuture f = b.bind(port).sync(); &lt;span class=&quot;comment&quot;&gt;// (7)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Wait until the server socket is closed.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// In this example, this does not happen, but you can do that to gracefully&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// shut down your server.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            f.channel().closeFuture().sync();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            workerGroup.shutdownGracefully();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bossGroup.shutdownGracefully();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; port;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (args.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            port = Integer.parseInt(args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            port = &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DiscardServer(port).run();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/nio/NioEventLoopGroup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NioEventLoopGroup&lt;/a&gt; 是用来处理I/O操作的多线程事件循环器，Netty提供了许多不同的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/EventLoopGroup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EventLoopGroup&lt;/a&gt;的实现用来处理不同传输协议。在这个例子中我们实现了一个服务端的应用，因此会有2个&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/nio/NioEventLoopGroup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NioEventLoopGroup&lt;/a&gt;会被使用。第一个经常被叫做‘&lt;code&gt;boss&lt;/code&gt;’，用来接收进来的连接。第二个经常被叫做‘&lt;code&gt;worker&lt;/code&gt;’，用来处理已经被接收的连接，一旦‘&lt;code&gt;boss&lt;/code&gt;’接收到连接，就会把连接信息注册到‘&lt;code&gt;worker&lt;/code&gt;’上。如何知道多少个线程已经被使用，如何映射到已经创建的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/Channel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Channels&lt;/a&gt;上都需要依赖于&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/nio/NioEventLoopGroup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EventLoopGroup&lt;/a&gt;的实现，并且可以通过构造函数来配置他们的关系。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://netty.io/5.0/api/io/netty/bootstrap/ServerBootstrap.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ServerBootstrap&lt;/a&gt; 是一个启动NIO服务的辅助启动类。你可以在这个服务中直接使用&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/Channel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Channel&lt;/a&gt;，但是这会是一个复杂的处理过程，在很多情况下你并不需要这样做。&lt;/li&gt;
&lt;li&gt;这里我们指定使用&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/socket/nio/NioServerSocketChannel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NioServerSocketChannel&lt;/a&gt;类来举例说明一个新的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/Channel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Channel&lt;/a&gt;如何接收进来的连接。&lt;/li&gt;
&lt;li&gt;这里的事件处理类经常会被用来处理一个最近的已经接收的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/Channel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Channel&lt;/a&gt;。&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelInitializer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelInitializer&lt;/a&gt;是一个特殊的处理类，他的目的是帮助使用者配置一个新的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/Channel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Channel&lt;/a&gt;。也许你想通过增加一些处理类比如DiscardServerHandle来配置一个新的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/Channel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Channel&lt;/a&gt;或者其对应的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelPipeline.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelPipeline&lt;/a&gt;来实现你的网络程序。当你的程序变的复杂时，可能你会增加更多的处理类到&lt;code&gt;pipline&lt;/code&gt;上，然后提取这些匿名类到最顶层的类上。&lt;/li&gt;
&lt;li&gt;你可以设置这里指定的通道实现的配置参数。我们正在写一个TCP/IP的服务端，因此我们被允许设置socket的参数选项比如&lt;code&gt;tcpNoDelay&lt;/code&gt;和&lt;code&gt;keepAlive&lt;/code&gt;。请参考&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelOption.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelOption&lt;/a&gt;和详细的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelConfig.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelConfig&lt;/a&gt;实现的接口文档以此可以对&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelOption.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelOptions&lt;/a&gt;的有一个大概的认识。&lt;/li&gt;
&lt;li&gt;你关注过&lt;code&gt;option()&lt;/code&gt;和&lt;code&gt;childOption()&lt;/code&gt;吗？&lt;code&gt;option()&lt;/code&gt;是提供给&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/socket/nio/NioServerSocketChannel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NioServerSocketChannel&lt;/a&gt;用来接收进来的连接。childOption()是提供给由父管道&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ServerChannel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ServerChannel&lt;/a&gt;接收到的连接，在这个例子中也是&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/socket/nio/NioServerSocketChannel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NioServerSocketChannel&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;我们继续，剩下的就是绑定端口然后启动服务。这里我们在机器上绑定了机器所有网卡上的8080端口。当然现在你可以多次调用&lt;code&gt;bind()&lt;/code&gt;方法(基于不同绑定地址)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;恭喜！你已经完成熟练地完成了第一个基于NETTY的服务端程序。&lt;/p&gt;
&lt;h3 id=&quot;观察接收到的数据&quot;&gt;&lt;a href=&quot;#观察接收到的数据&quot; class=&quot;headerlink&quot; title=&quot;观察接收到的数据&quot;&gt;&lt;/a&gt;观察接收到的数据&lt;/h3&gt;&lt;p&gt;现在我们已经编写出我们第一个服务端，我们需要测试一下他是否真的可以运行。最简单的测试方法是用&lt;code&gt;telnet&lt;/code&gt; 命令。例如，你可以在命令行上输入&lt;code&gt;telnet localhost 8080&lt;/code&gt;或者其他类型参数。&lt;/p&gt;
&lt;p&gt;然而我们能说这个服务端是正常运行了吗？事实上我们也不知道因为他是一个discard服务，你根本不可能得到任何的响应。为了证明他仍然是在工作的，让我们修改服务端的程序来打印出他到底接收到了什么。&lt;/p&gt;
&lt;p&gt;我们已经知道&lt;code&gt;channelRead()&lt;/code&gt;方法是在数据被接收的时候调用。让我们放一些代码到DiscardServerHandler类的&lt;code&gt;channelRead()&lt;/code&gt;方法。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void channelRead(ChannelHandlerContext ctx, Object msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ByteBuf in = (ByteBuf) msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-tag&quot;&gt;while&lt;/span&gt; (in.isReadable()) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// (1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System&lt;span class=&quot;selector-class&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.print&lt;/span&gt;((char) in.readByte());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System&lt;span class=&quot;selector-class&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.flush&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;selector-tag&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ReferenceCountUtil&lt;span class=&quot;selector-class&quot;&gt;.release&lt;/span&gt;(msg); &lt;span class=&quot;comment&quot;&gt;// (2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这个低效的循环事实上可以简化为:&lt;code&gt;System.out.println(in.toString(io.netty.util.CharsetUtil.US_ASCII))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;或者，你可以在这里调用&lt;code&gt;in.release()&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你再次运行&lt;code&gt;telnet&lt;/code&gt;命令，你将会看到服务端打印出了他所接收到的消息。&lt;/p&gt;
&lt;p&gt;完整的discard server代码放在了&lt;a href=&quot;http://netty.io/5.0/xref/io/netty/example/discard/package-summary.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;io.netty.example.discard&lt;/a&gt;包下面。&lt;/p&gt;
&lt;h2 id=&quot;ECHO服务（响应式协议）&quot;&gt;&lt;a href=&quot;#ECHO服务（响应式协议）&quot; class=&quot;headerlink&quot; title=&quot;ECHO服务（响应式协议）&quot;&gt;&lt;/a&gt;ECHO服务（响应式协议）&lt;/h2&gt;&lt;p&gt;到目前为止，我们虽然接收到了数据，但没有做任何的响应。然而一个服务端通常会对一个请求作出响应。让我们学习怎样在&lt;a href=&quot;http://tools.ietf.org/html/rfc862&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECHO&lt;/a&gt;协议的实现下编写一个响应消息给客户端，这个协议针对任何接收的数据都会返回一个响应。&lt;/p&gt;
&lt;p&gt;和discard server唯一不同的是把在此之前我们实现的&lt;code&gt;channelRead()&lt;/code&gt;方法，返回所有的数据替代打印接收数据到控制台上的逻辑。因此，需要把&lt;code&gt;channelRead()&lt;/code&gt;方法修改如下：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void channelRead(ChannelHandlerContext ctx, Object msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ctx&lt;span class=&quot;selector-class&quot;&gt;.write&lt;/span&gt;(msg); &lt;span class=&quot;comment&quot;&gt;// (1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ctx&lt;span class=&quot;selector-class&quot;&gt;.flush&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;// (2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelHandlerContext.html,&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelHandlerContext&lt;/a&gt;对象提供了许多操作，使你能够触发各种各样的I/O事件和操作。这里我们调用了&lt;code&gt;write(Object)&lt;/code&gt;方法来逐字地把接受到的消息写入。请注意不同于DISCARD的例子我们并没有释放接受到的消息，这是因为当写入的时候NETTY已经帮我们释放了。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctx.write(Object)&lt;/code&gt;方法不会使消息写入到通道上，他被缓冲在了内部，你需要调用&lt;code&gt;ctx.flush()&lt;/code&gt;方法来把缓冲区中数据强行输出。或者你可以用更简洁的&lt;code&gt;cxt.writeAndFlush(msg)&lt;/code&gt;以达到同样的目的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你再一次运行telnet命令，你会看到服务端会发回一个你已经发送的消息。&lt;br&gt;完整的echo服务的代码放在了&lt;a href=&quot;http://netty.io/5.0/xref/io/netty/example/echo/package-summary.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;io.netty.example.echo&lt;/a&gt;包下面。&lt;/p&gt;
&lt;h2 id=&quot;TIME服务-时间协议的服务&quot;&gt;&lt;a href=&quot;#TIME服务-时间协议的服务&quot; class=&quot;headerlink&quot; title=&quot;TIME服务(时间协议的服务)&quot;&gt;&lt;/a&gt;TIME服务(时间协议的服务)&lt;/h2&gt;&lt;p&gt;在这个部分被实现的协议是&lt;a href=&quot;http://tools.ietf.org/html/rfc868&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TIME&lt;/a&gt;协议。和之前的例子不同的是在不接受任何请求时他会发送一个含32位的整数的消息，并且一旦消息发送就会立即关闭连接。在这个例子中，你会学习到如何构建和发送一个消息，然后在完成时主动关闭连接。&lt;/p&gt;
&lt;p&gt;因为我们将会忽略任何接收到的数据，而只是在连接被创建发送一个消息，所以这次我们不能使用&lt;code&gt;channelRead()&lt;/code&gt;方法了，代替他的是，我们需要覆盖&lt;code&gt;channelActive()&lt;/code&gt;方法，下面的就是实现的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package io&lt;span class=&quot;selector-class&quot;&gt;.netty&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.example&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.time&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;TimeServerHandler&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;ChannelHandlerAdapter&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void channelActive(final ChannelHandlerContext ctx) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// (1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final ByteBuf time = ctx&lt;span class=&quot;selector-class&quot;&gt;.alloc&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.buffer&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// (2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time&lt;span class=&quot;selector-class&quot;&gt;.writeInt&lt;/span&gt;((int) (System.currentTimeMillis() / &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;L + &lt;span class=&quot;number&quot;&gt;2208988800&lt;/span&gt;L));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final ChannelFuture f = ctx&lt;span class=&quot;selector-class&quot;&gt;.writeAndFlush&lt;/span&gt;(time); &lt;span class=&quot;comment&quot;&gt;// (3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-tag&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.addListener&lt;/span&gt;(new ChannelFutureListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void operationComplete(ChannelFuture future) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                assert f == future;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ctx&lt;span class=&quot;selector-class&quot;&gt;.close&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;); &lt;span class=&quot;comment&quot;&gt;// (4)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @&lt;span class=&quot;selector-tag&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;exceptionCaught&lt;/span&gt;(ChannelHandlerContext ctx, Throwable cause) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cause&lt;span class=&quot;selector-class&quot;&gt;.printStackTrace&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx&lt;span class=&quot;selector-class&quot;&gt;.close&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;channelActive()&lt;/code&gt;方法将会在连接被建立并且准备进行通信时被调用。因此让我们在这个方法里完成一个代表当前时间的32位整数消息的构建工作。&lt;/li&gt;
&lt;li&gt;为了发送一个新的消息，我们需要分配一个包含这个消息的新的缓冲。因为我们需要写入一个32位的整数，因此我们需要一个至少有4个字节的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/buffer/ByteBuf.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ByteBuf&lt;/a&gt;。通过&lt;code&gt;ChannelHandlerContext.alloc()&lt;/code&gt;得到一个当前的ByteBufAllocator，然后分配一个新的缓冲。&lt;/li&gt;
&lt;li&gt;和往常一样我们需要编写一个构建好的消息。但是等一等，flip在哪？难道我们使用NIO发送消息时不是调用&lt;code&gt;java.nio.ByteBuffer.flip()&lt;/code&gt;吗？ByteBuf之所以没有这个方法因为有两个指针，一个对应读操作一个对应写操作。当你向ByteBuf里写入数据的时候写指针的索引就会增加，同时读指针的索引没有变化。读指针索引和写指针索引分别代表了消息的开始和结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较起来，NIO缓冲并没有提供一种简洁的方式来计算出消息内容的开始和结尾，除非你调用&lt;code&gt;flip&lt;/code&gt;方法。当你忘记调用flip方法而引起没有数据或者错误数据被发送时，你会陷入困境。这样的一个错误不会发生在Netty上，因为我们对于不同的操作类型有不同的指针。你会发现这样的使用方法会让你过程变得更加的容易，因为你已经习惯一种没有使用&lt;code&gt;flip&lt;/code&gt;的方式。&lt;/p&gt;
&lt;p&gt;另外一个点需要注意的是&lt;code&gt;ChannelHandlerContext.write()&lt;/code&gt;(和&lt;code&gt;writeAndFlush()&lt;/code&gt;)方法会返回一个&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelFuture.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelFuture&lt;/a&gt;对象，一个&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelFuture.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelFuture&lt;/a&gt;代表了一个还没有发生的I/O操作。这意味着任何一个请求操作都不会马上被执行，因为在Netty里所有的操作都是异步的。举个例子下面的代码中在消息被发送之前可能会先关闭连接。&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Channel &lt;span class=&quot;number&quot;&gt;ch&lt;/span&gt; = ...&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;ch&lt;/span&gt;.writeAndFlush(message)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;ch&lt;/span&gt;.close()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因此你需要在&lt;code&gt;write()&lt;/code&gt;方法返回的ChannelFuture完成后调用&lt;code&gt;close()&lt;/code&gt;方法，然后当他的写操作已经完成他会通知他的监听者。请注意,&lt;code&gt;close()&lt;/code&gt;方法也可能不会立马关闭，他也会返回一个&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelFuture.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelFuture&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个写请求已经完成是如何通知到我们？这个只需要简单地在返回的ChannelFuture上增加一个&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelFutureListener.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelFutureListener&lt;/a&gt;。这里我们构建了一个匿名的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelFutureListener.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelFutureListener&lt;/a&gt;类用来在操作完成时关闭Channel。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者，你可以使用简单的预定义监听器代码:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.addListener&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;ChannelFutureListener&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.CLOSE&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了测试我们的time服务如我们期望的一样工作，你可以使用UNIX的&lt;code&gt;rdate&lt;/code&gt;命令&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ rdate -o &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;port&lt;/span&gt;&amp;gt;&lt;/span&gt; -p &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;host&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;port是你在&lt;code&gt;main()&lt;/code&gt;函数中指定的端口，host使用locahost就可以了。&lt;/p&gt;
&lt;h2 id=&quot;Time客户端&quot;&gt;&lt;a href=&quot;#Time客户端&quot; class=&quot;headerlink&quot; title=&quot;Time客户端&quot;&gt;&lt;/a&gt;Time客户端&lt;/h2&gt;&lt;p&gt;不像DISCARD和ECHO的服务端，对于TIME协议我们需要一个客户端因为人们不能把一个32位的二进制数据翻译成一个日期或者日历。在这一部分，我们将会讨论如何确保服务端是正常工作的，并且学习怎样用NETTY编写一个客户端。&lt;/p&gt;
&lt;p&gt;在Netty中,编写服务端和客户端最大的并且唯一不同的使用了不同的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/bootstrap/Bootstrap.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BootStrap&lt;/a&gt;和&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/Channel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Channel&lt;/a&gt;的实现。请看一下下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; io.netty.example.time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TimeClient&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String host = args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; port = Integer.parseInt(args[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EventLoopGroup workerGroup = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NioEventLoopGroup();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Bootstrap b = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bootstrap(); &lt;span class=&quot;comment&quot;&gt;// (1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b.group(workerGroup); &lt;span class=&quot;comment&quot;&gt;// (2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b.channel(NioSocketChannel.class); &lt;span class=&quot;comment&quot;&gt;// (3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b.option(ChannelOption.SO_KEEPALIVE, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// (4)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b.&lt;span class=&quot;keyword&quot;&gt;handler&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initChannel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SocketChannel ch)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ch.pipeline().addLast(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TimeClientHandler());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Start the client.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ChannelFuture f = b.connect(host, port).sync(); &lt;span class=&quot;comment&quot;&gt;// (5)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Wait until the connection is closed.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            f.channel().closeFuture().sync();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            workerGroup.shutdownGracefully();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://netty.io/5.0/api/io/netty/bootstrap/Bootstrap.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BootStrap&lt;/a&gt;和&lt;a href=&quot;http://netty.io/5.0/api/io/netty/bootstrap/ServerBootstrap.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ServerBootstrap&lt;/a&gt;类似,不过他是对非服务端的channel而言，比如客户端或者无连接传输模式的channel。&lt;/li&gt;
&lt;li&gt;如果你只指定了一个&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/EventLoopGroup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EventLoopGroup&lt;/a&gt;，那他就会即作为一个‘&lt;code&gt;boss&lt;/code&gt;’线程，也会作为一个‘&lt;code&gt;workder&lt;/code&gt;’线程，尽管客户端不需要使用到‘&lt;code&gt;boss&lt;/code&gt;’线程。&lt;/li&gt;
&lt;li&gt;代替&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/socket/nio/NioServerSocketChannel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NioServerSocketChannel&lt;/a&gt;的是&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/socket/nio/NioSocketChannel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NioSocketChannel&lt;/a&gt;,这个类在客户端channel被创建时使用。&lt;/li&gt;
&lt;li&gt;不像在使用ServerBootstrap时需要用&lt;code&gt;childOption()&lt;/code&gt;方法，因为客户端的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/socket/SocketChannel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SocketChannel&lt;/a&gt;没有父channel的概念。&lt;/li&gt;
&lt;li&gt;我们用&lt;code&gt;connect()&lt;/code&gt;方法代替了&lt;code&gt;bind()&lt;/code&gt;方法。&lt;br&gt;正如你看到的，他和服务端的代码是不一样的。&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelHandler&lt;/a&gt;是如何实现的?他应该从服务端接受一个32位的整数消息，把他翻译成人们能读懂的格式，并打印翻译好的时间，最后关闭连接:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package io&lt;span class=&quot;selector-class&quot;&gt;.netty&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.example&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.time&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java&lt;span class=&quot;selector-class&quot;&gt;.util&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Date&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;TimeClientHandler&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;ChannelHandlerAdapter&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void channelRead(ChannelHandlerContext ctx, Object msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ByteBuf m = (ByteBuf) msg; &lt;span class=&quot;comment&quot;&gt;// (1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-tag&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            long currentTimeMillis = (m&lt;span class=&quot;selector-class&quot;&gt;.readUnsignedInt&lt;/span&gt;() &lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;2208988800L&lt;/span&gt;) * &lt;span class=&quot;selector-tag&quot;&gt;1000L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System&lt;span class=&quot;selector-class&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.println&lt;/span&gt;(new Date(currentTimeMillis));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ctx&lt;span class=&quot;selector-class&quot;&gt;.close&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            m&lt;span class=&quot;selector-class&quot;&gt;.release&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cause&lt;span class=&quot;selector-class&quot;&gt;.printStackTrace&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx&lt;span class=&quot;selector-class&quot;&gt;.close&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在TCP/IP中，NETTY会把读到的数据放到ByteBuf的数据结构中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样看起来非常简单，并且和服务端的那个例子的代码也相差不多。然而，处理器有时候会因为抛出&lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;而拒绝工作。在下个部分我们会讨论为什么会发生这种情况。&lt;/p&gt;
&lt;h1 id=&quot;流数据的传输处理&quot;&gt;&lt;a href=&quot;#流数据的传输处理&quot; class=&quot;headerlink&quot; title=&quot;流数据的传输处理&quot;&gt;&lt;/a&gt;流数据的传输处理&lt;/h1&gt;&lt;h2 id=&quot;一个小的Socket-Buffer问题&quot;&gt;&lt;a href=&quot;#一个小的Socket-Buffer问题&quot; class=&quot;headerlink&quot; title=&quot;一个小的Socket Buffer问题&quot;&gt;&lt;/a&gt;一个小的Socket Buffer问题&lt;/h2&gt;&lt;p&gt;在基于流的传输里比如TCP/IP，接收到的数据会先被存储到一个socket接收缓冲里。不幸的是，基于流的传输并不是一个数据包队列，而是一个字节队列。即使你发送了2个独立的数据包，操作系统也不会作为2个消息处理而仅仅是作为一连串的字节而言。因此这是不能保证你远程写入的数据就会准确地读取。举个例子，让我们假设操作系统的TCP/TP协议栈已经接收了3个数据包：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/netty/netty5_1.png&quot; alt=&quot;netty socket buffer&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于基于流传输的协议的这种普通的性质，在你的应用程序里读取数据的时候会有很高的可能性被分成下面的片段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/netty/netty5_2.png&quot; alt=&quot;netty socket buffer&quot;&gt;&lt;/p&gt;
&lt;p&gt;因此，一个接收方不管他是客户端还是服务端，都应该把接收到的数据整理成一个或者多个更有意思并且能够让程序的业务逻辑更好理解的数据。在上面的例子中，接收到的数据应该被构造成下面的格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/netty/netty5_3.png&quot; alt=&quot;netty socket buffer&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;第一个解决方案&quot;&gt;&lt;a href=&quot;#第一个解决方案&quot; class=&quot;headerlink&quot; title=&quot;第一个解决方案&quot;&gt;&lt;/a&gt;第一个解决方案&lt;/h3&gt;&lt;p&gt;现在让我们回到TIME客户端的例子上。这里我们遇到了同样的问题，一个32字节数据是非常小的数据量，他并不见得会被经常拆分到到不同的数据段内。然而，问题是他确实可能会被拆分到不同的数据段内，并且拆分的可能性会随着通信量的增加而增加。&lt;/p&gt;
&lt;p&gt;最简单的方案是构造一个内部的可积累的缓冲，直到4个字节全部接收到了内部缓冲。下面的代码修改了TimeClientHandler的实现类修复了这个问题&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package io&lt;span class=&quot;selector-class&quot;&gt;.netty&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.example&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.time&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java&lt;span class=&quot;selector-class&quot;&gt;.util&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Date&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;TimeClientHandler&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;ChannelHandlerAdapter&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private ByteBuf buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void handlerAdded(ChannelHandlerContext ctx) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buf = ctx&lt;span class=&quot;selector-class&quot;&gt;.alloc&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.buffer&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// (1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void handlerRemoved(ChannelHandlerContext ctx) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buf&lt;span class=&quot;selector-class&quot;&gt;.release&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;// (1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buf = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void channelRead(ChannelHandlerContext ctx, Object msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ByteBuf m = (ByteBuf) msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buf&lt;span class=&quot;selector-class&quot;&gt;.writeBytes&lt;/span&gt;(m); &lt;span class=&quot;comment&quot;&gt;// (2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        m&lt;span class=&quot;selector-class&quot;&gt;.release&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt; (buf.readableBytes() &amp;gt;= &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// (3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            long currentTimeMillis = (buf&lt;span class=&quot;selector-class&quot;&gt;.readInt&lt;/span&gt;() &lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;2208988800L&lt;/span&gt;) * &lt;span class=&quot;selector-tag&quot;&gt;1000L&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System&lt;span class=&quot;selector-class&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.println&lt;/span&gt;(new Date(currentTimeMillis));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ctx&lt;span class=&quot;selector-class&quot;&gt;.close&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cause&lt;span class=&quot;selector-class&quot;&gt;.printStackTrace&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx&lt;span class=&quot;selector-class&quot;&gt;.close&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelHandler&lt;/a&gt;有2个生命周期的监听方法：handlerAdded()和handlerRemoved()。你可以完成任意初始化任务只要他不会被阻塞很长的时间。&lt;/li&gt;
&lt;li&gt;首先，所有接收的数据都应该被累积在buf变量里。&lt;/li&gt;
&lt;li&gt;然后，处理器必须检查buf变量是否有足够的数据，在这个例子中是4个字节，然后处理实际的业务逻辑。否则，Netty会重复调用channelRead()当有更多数据到达直到4个字节的数据被积累。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;第二个解决方案&quot;&gt;&lt;a href=&quot;#第二个解决方案&quot; class=&quot;headerlink&quot; title=&quot;第二个解决方案&quot;&gt;&lt;/a&gt;第二个解决方案&lt;/h3&gt;&lt;p&gt;尽管第一个解决方案已经解决了Time客户端的问题了，但是修改后的处理器看起来不那么的简洁，想象一下如果由多个字段比如可变长度的字段组成的更为复杂的协议时，你的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelHandler&lt;/a&gt;的实现将很快地变得难以维护。&lt;/p&gt;
&lt;p&gt;正如你所知的，你可以增加多个&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelHandler&lt;/a&gt;到&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelPipeline.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelPipeline&lt;/a&gt; ,因此你可以把一整个ChannelHandler拆分成多个模块以减少应用的复杂程度，比如你可以把TimeClientHandler拆分成2个处理器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TimeDecoder处理数据拆分的问题&lt;/li&gt;
&lt;li&gt;TimeClientHandler原始版本的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;幸运地是，Netty提供了一个可扩展的类，帮你完成TimeDecoder的开发。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; io.netty.example.time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TimeDecoder&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ByteToMessageDecoder&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// (1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; void decode(&lt;span class=&quot;type&quot;&gt;ChannelHandlerContext&lt;/span&gt; ctx, &lt;span class=&quot;type&quot;&gt;ByteBuf&lt;/span&gt; in, &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Object&lt;/span&gt;&amp;gt; out) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// (2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (in.readableBytes() &amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// (3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        out.add(in.readBytes(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// (4)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://netty.io/5.0/api/io/netty/handler/codec/ByteToMessageDecoder.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ByteToMessageDecoder&lt;/a&gt;是&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelHandler&lt;/a&gt;的一个实现类，他可以在处理数据拆分的问题上变得很简单。&lt;/li&gt;
&lt;li&gt;每当有新数据接收的时候，&lt;a href=&quot;http://netty.io/5.0/api/io/netty/handler/codec/ByteToMessageDecoder.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ByteToMessageDecoder&lt;/a&gt;都会调用decode()方法来处理内部的那个累积缓冲。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Decode()&lt;/code&gt;方法可以决定当累积缓冲里没有足够数据时可以往out对象里放任意数据。当有更多的数据被接收了&lt;a href=&quot;http://netty.io/5.0/api/io/netty/handler/codec/ByteToMessageDecoder.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ByteToMessageDecoder&lt;/a&gt;会再一次调用&lt;code&gt;decode()&lt;/code&gt;方法。&lt;/li&gt;
&lt;li&gt;如果在&lt;code&gt;decode()&lt;/code&gt;方法里增加了一个对象到out对象里，这意味着解码器解码消息成功。&lt;a href=&quot;http://netty.io/5.0/api/io/netty/handler/codec/ByteToMessageDecoder.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ByteToMessageDecoder&lt;/a&gt;将会丢弃在累积缓冲里已经被读过的数据。请记得你不需要对多条消息调用&lt;code&gt;decode()&lt;/code&gt;，&lt;a href=&quot;http://netty.io/5.0/api/io/netty/handler/codec/ByteToMessageDecoder.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ByteToMessageDecoder&lt;/a&gt;会持续调用&lt;code&gt;decode()&lt;/code&gt;直到不放任何数据到out里。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在我们有另外一个处理器插入到&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelPipeline.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelPipeline&lt;/a&gt;里，我们应该在TimeClient里修改&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelInitializer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelInitializer&lt;/a&gt; 的实现：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;b.&lt;span class=&quot;keyword&quot;&gt;handler&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ChannelInitializer&amp;lt;SocketChannel&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initChannel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SocketChannel ch)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ch.pipeline().addLast(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TimeDecoder(), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TimeClientHandler());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你是一个大胆的人，你可能会尝试使用更简单的解码类&lt;a href=&quot;http://netty.io/5.0/api/io/netty/handler/codec/ReplayingDecoder.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReplayingDecoder&lt;/a&gt;。不过你还是需要参考一下API文档来获取更多的信息。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TimeDecoder&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReplayingDecoder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; void decode(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;ChannelHandlerContext&lt;/span&gt; ctx, &lt;span class=&quot;type&quot;&gt;ByteBuf&lt;/span&gt; in, &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt; out) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        out.add(in.readBytes(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此外，Netty还提供了更多可以直接拿来用的解码器使你可以更简单地实现更多的协议，帮助你避免开发一个难以维护的处理器实现。请参考下面的包以获取更多更详细的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于二进制协议请看&lt;a href=&quot;http://netty.io/5.0/xref/io/netty/example/factorial/package-summary.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;io.netty.example.factorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;对于基于文本协议请看&lt;a href=&quot;http://netty.io/5.0/xref/io/netty/example/telnet/package-summary.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;io.netty.example.telnet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;用POJO代替ByteBuf&quot;&gt;&lt;a href=&quot;#用POJO代替ByteBuf&quot; class=&quot;headerlink&quot; title=&quot;用POJO代替ByteBuf&quot;&gt;&lt;/a&gt;用POJO代替ByteBuf&lt;/h2&gt;&lt;p&gt;我们已经讨论了所有的例子，到目前为止一个消息的消息都是使用&lt;a href=&quot;http://netty.io/5.0/api/io/netty/buffer/ByteBuf.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ByteBuf&lt;/a&gt;作为一个基本的数据结构。在这一部分，我们会改进TIME协议的客户端和服务端的例子，用POJO替代&lt;a href=&quot;http://netty.io/5.0/api/io/netty/buffer/ByteBuf.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ByteBuf&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在你的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelHandlerS&lt;/a&gt;中使用POJO优势是比较明显的。通过从&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelHandler&lt;/a&gt;中提取出ByteBuf的代码，将会使&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelHandler&lt;/a&gt;的实现变得更加可维护和可重用。在TIME客户端和服务端的例子中，我们读取的仅仅是一个32位的整形数据，直接使用ByteBuf不会是一个主要的问题。然后，你会发现当你需要实现一个真实的协议，分离代码变得非常的必要。&lt;/p&gt;
&lt;p&gt;首先，让我们定义一个新的类型叫做UnixTime。&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package io.netty.example.time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.util.Date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UnixTime&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; final &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UnixTime&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;((&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) (System.currentTimeMillis() / &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;L + &lt;span class=&quot;number&quot;&gt;2208988800&lt;/span&gt;L));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UnixTime&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @&lt;span class=&quot;function&quot;&gt;Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Date((&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;() - &lt;span class=&quot;number&quot;&gt;2208988800&lt;/span&gt;L) * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;L).toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们可以修改下TimeDecoder类，返回一个UnixTime，以替代&lt;a href=&quot;http://netty.io/5.0/api/io/netty/buffer/ByteBuf.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ByteBuf&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;function&quot;&gt;Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decode&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ChannelHandlerContext ctx, ByteBuf &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;, List&amp;lt;Object&amp;gt; &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;.readableBytes() &amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt;.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UnixTime(&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;.readInt()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是修改后的解码器，TimeClientHandler不再有任何的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/buffer/ByteBuf.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ByteBuf&lt;/a&gt;代码了。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void channelRead(ChannelHandlerContext ctx, Object msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UnixTime m = (UnixTime) msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System&lt;span class=&quot;selector-class&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.println&lt;/span&gt;(m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ctx&lt;span class=&quot;selector-class&quot;&gt;.close&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是不是变得更加简单和优雅了？相同的技术可以被运用到服务端。让我们修改一下TimeServerHandler的代码。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void channelActive(ChannelHandlerContext ctx) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ChannelFuture f = ctx&lt;span class=&quot;selector-class&quot;&gt;.writeAndFlush&lt;/span&gt;(new UnixTime());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f&lt;span class=&quot;selector-class&quot;&gt;.addListener&lt;/span&gt;(ChannelFutureListener.CLOSE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，仅仅需要修改的是ChannelHandler的实现，这里需要把UnixTime对象重新转化为一个ByteBuf。不过这已经是非常简单了，因为当你对一个消息编码的时候，你不需要再处理拆包和组装的过程。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; io.netty.example.time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TimeEncoder&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ChannelHandlerAdapter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void write(&lt;span class=&quot;type&quot;&gt;ChannelHandlerContext&lt;/span&gt; ctx, &lt;span class=&quot;type&quot;&gt;Object&lt;/span&gt; msg, &lt;span class=&quot;type&quot;&gt;ChannelPromise&lt;/span&gt; promise) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;UnixTime&lt;/span&gt; m = (&lt;span class=&quot;type&quot;&gt;UnixTime&lt;/span&gt;) msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;ByteBuf&lt;/span&gt; encoded = ctx.alloc().buffer(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        encoded.writeInt(m.value());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx.write(encoded, promise); &lt;span class=&quot;comment&quot;&gt;// (1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这几行代码里还有几个重要的事情。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一， 通过ChannelPromise，当编码后的数据被写到了通道上Netty可以通过这个对象标记是成功还是失败。&lt;/li&gt;
&lt;li&gt;第二， 我们不需要调用&lt;code&gt;cxt.flush()&lt;/code&gt;。因为处理器已经单独分离出了一个方法&lt;code&gt;void flush(ChannelHandlerContext cxt)&lt;/code&gt;,如果像自己实现&lt;code&gt;flush&lt;/code&gt;方法内容可以自行覆盖这个方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进一步简化操作，你可以使用&lt;a href=&quot;http://netty.io/5.0/api/io/netty/handler/codec/MessageToByteEncoder.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageToByteEncode&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TimeEncoder&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MessageToByteEncoder&amp;lt;UnixTime&amp;gt;&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; void encode(&lt;span class=&quot;type&quot;&gt;ChannelHandlerContext&lt;/span&gt; ctx, &lt;span class=&quot;type&quot;&gt;UnixTime&lt;/span&gt; msg, &lt;span class=&quot;type&quot;&gt;ByteBuf&lt;/span&gt; out) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        out.writeInt(msg.value());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后的任务就是在TimeServerHandler之前把TimeEncoder插入到&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/ChannelPipeline.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChannelPipeline&lt;/a&gt;。但这是不那么重要的工作。&lt;/p&gt;
&lt;h2 id=&quot;关闭你的应用&quot;&gt;&lt;a href=&quot;#关闭你的应用&quot; class=&quot;headerlink&quot; title=&quot;关闭你的应用&quot;&gt;&lt;/a&gt;关闭你的应用&lt;/h2&gt;&lt;p&gt;关闭一个Netty应用往往只需要简单地通过&lt;code&gt;shutdownGracefully()&lt;/code&gt;方法来关闭你构建的所有的&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/EventLoopGroup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NioEventLoopGroup&lt;/a&gt;S.当&lt;a href=&quot;http://netty.io/5.0/api/io/netty/channel/EventLoopGroup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EventLoopGroup&lt;/a&gt;被完全地终止,并且对应的所有channels都已经被关闭时，Netty会返回一个&lt;a href=&quot;http://netty.io/5.0/api/io/netty/util/concurrent/Future.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Future&lt;/a&gt;对象。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;在这一章节中，我们会快速地回顾下如果在熟练掌握Netty的情况下编写出一个健壮能运行的网络应用程序。&lt;br&gt;在Netty接下去的章节中还会有更多更相信的信息。我们也鼓励你去重新复习下在&lt;a href=&quot;https://github.com/netty/netty/tree/master/example/src/main/java/io/netty/example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;io.netty.example&lt;/a&gt;包下的例子。&lt;br&gt;请注意&lt;a href=&quot;http://netty.io/community.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;社区&lt;/a&gt;一直在等待你的问题和想法以帮助Netty的持续改进，Netty的文档也是基于你们的快速反馈上。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Netty是一个&lt;code&gt;NIO client/server&lt;/code&gt;网络编程框架，可以快速且容易的开发基于协议（protocol）的网络客户端/服务端的程序，它极大简化了TCP和UDP socket编程，提供流水线化的操作。&lt;/p&gt;
&lt;p&gt;“快速且容易”并不会导致应用难以维护和性能低下。Netty经过仔细设计，基于许多协议实现的经验如：&lt;code&gt;FTP&lt;/code&gt;、&lt;code&gt;SMTP&lt;/code&gt;、&lt;code&gt;HTTP&lt;/code&gt;以及各种二进制和基于本文的老的协议，Netty成功的找到一种保证开发，稳定性，灵活性的方式，毋需折中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/netty/components.png&quot; alt=&quot;netty components&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://tonydeng.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="java" scheme="http://tonydeng.github.io/tags/java/"/>
    
      <category term="netty" scheme="http://tonydeng.github.io/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>解决Maven使用artchetype:create创建工程失败的问题</title>
    <link href="http://tonydeng.github.io/2015/09/18/maven-generate-project/"/>
    <id>http://tonydeng.github.io/2015/09/18/maven-generate-project/</id>
    <published>2015-09-18T05:32:48.000Z</published>
    <updated>2016-07-12T16:26:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/blog/maven/maven-jee.png&quot; alt=&quot;maven java&quot;&gt;&lt;/p&gt;
&lt;p&gt;Maven是我一直用来管理Java项目生命周期的工具，从2006年开始使用，到现在快十年了。没想到今天碰到一个新的问题，就是使用 &lt;code&gt;mvn artchetype:create&lt;/code&gt; 来创建项目时失败了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;问题如下：&lt;/p&gt;
&lt;p&gt;Maven命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mvn archetype:create \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -DgroupId=com&lt;span class=&quot;selector-class&quot;&gt;.github&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tonydeng&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.bluebrid&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -DartifactId=bluebrid&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;错误提示如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[ERROR] Failed to &lt;span class=&quot;keyword&quot;&gt;execute&lt;/span&gt; goal org.apache.maven.plugins:maven-archetype-&lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2.4&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;-cli) &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;project&lt;/span&gt; bluebrid: Unable &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;parse&lt;/span&gt; configuration &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; mojo org.apache.maven.plugins:maven-archetype-&lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2.4&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; parameter #: Cannot &lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; org.apache.maven.artifact.repository.ArtifactRepository: org.apache.maven.artifact.repository.ArtifactRepository.&amp;lt;init&amp;gt;() -&amp;gt; [&lt;span class=&quot;keyword&quot;&gt;Help&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;ERROR&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;ERROR&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;To&lt;/span&gt; see the &lt;span class=&quot;keyword&quot;&gt;full&lt;/span&gt; stack &lt;span class=&quot;keyword&quot;&gt;trace&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; the &lt;span class=&quot;keyword&quot;&gt;errors&lt;/span&gt;, re-run Maven &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; the -e switch.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;ERROR&lt;/span&gt;] Re-run Maven &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; the -X &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;full&lt;/span&gt; debug logging.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;ERROR&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;ERROR&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;For&lt;/span&gt; more information about the &lt;span class=&quot;keyword&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; possible solutions, please &lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; the &lt;span class=&quot;keyword&quot;&gt;following&lt;/span&gt; articles:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;ERROR&lt;/span&gt;] [&lt;span class=&quot;keyword&quot;&gt;Help&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;http&lt;/span&gt;://cwiki.apache.org/confluence/display/MAVEN/PluginConfigurationException&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从错误提示来看，应该是&lt;code&gt;maven-archetype-plugin-2.4&lt;/code&gt;这个版本的插件没有&lt;code&gt;create&lt;/code&gt;这个参数了。&lt;/p&gt;
&lt;p&gt;去&lt;a href=&quot;http://maven.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Maven的官网&lt;/a&gt;的&lt;a href=&quot;http://maven.apache.org/plugins/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;plugin list&lt;/a&gt;中查看，原来archetype这个插件在2015年8月9号更新到2.4的版本，那再继续看看&lt;a href=&quot;http://maven.apache.org/archetype/maven-archetype-plugin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;archetype插件&lt;/a&gt;有了什么新的变化。&lt;/p&gt;
&lt;p&gt;原来artchetype已经没有create这个方法了，现在推荐方式是先建立自己的Example project，然后通过这个example project为例子，再创建实际你要用的项目。&lt;/p&gt;
&lt;p&gt;基本的流程就像这幅图中描述的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/maven/archetype-overview.png&quot; alt=&quot;maven archetype plugin flow&quot;&gt;&lt;/p&gt;
&lt;p&gt;OK，那我们就按照官方的指示来操作一次看看。&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mvn arche&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;:create-from-project&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd target/generated-sources/arche&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mvn install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd /tmp/arche&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mvn arche&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;:generate -&lt;span class=&quot;type&quot;&gt;DarcheypteCatalog&lt;/span&gt;=local&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那还有没有别的简单的方法来创建，就像之前使用archetype:create一样呢？&lt;/p&gt;
&lt;p&gt;你可以使用下面的命令来进行创建项目。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mvn archetype:generate \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -DarchetypeGroupId=org&lt;span class=&quot;selector-class&quot;&gt;.apache&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.maven&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.archetypes&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -DgroupId=com&lt;span class=&quot;selector-class&quot;&gt;.github&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tonydeng&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.bluebrid&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -DartifactId=bluebrid \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -T20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过，这样创建项目，你会发现在如下两个点要等N长的时间，这个N长的时间可能要以几十分钟来计算。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[INFO] Generating project in Interactive mode&lt;/p&gt;
&lt;p&gt;[INFO] Generating project in Batch mode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实你可以再加上两个参数  &lt;code&gt;-DinteractiveMode=false -DarchetypeCatalog=internal&lt;/code&gt; 可以让你快速秒建项目。&lt;/p&gt;
&lt;p&gt;这两个参数的意义分别如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-DinteractiveMode=false  指定不使用交互模式&lt;/p&gt;
&lt;p&gt;-DarchetypeCatalog=internal 指定不从远程服务器上取catalog，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;完整的命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mvn archetype:generate \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt;DarchetypeGroupId=org.apache.maven.archetypes \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt;DinteractiveMode=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt;DarchetypeCatalog=internal \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt;DgroupId=com.github.tonydeng.bluebrid \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt;DartifactId=bluebrid \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt;T2&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建webapp项目命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mvn archetype:generate \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt;DarchetypeGroupId=org.apache.maven.archetypes \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt;DinteractiveMode=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt;DarchetypeCatalog=internal \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt;DgroupId=com.github.tonydeng.bluebrid \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt;DartifactId=bluebrid-webapp \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt;DarchetypeArtifactId=maven-archetype-webapp \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt;T2&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;遇到同样问题的同学们，你们可以试试我的方法，应该能够快速的解决你们的问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/blog/maven/maven-jee.png&quot; alt=&quot;maven java&quot;&gt;&lt;/p&gt;
&lt;p&gt;Maven是我一直用来管理Java项目生命周期的工具，从2006年开始使用，到现在快十年了。没想到今天碰到一个新的问题，就是使用 &lt;code&gt;mvn artchetype:create&lt;/code&gt; 来创建项目时失败了。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://tonydeng.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="project" scheme="http://tonydeng.github.io/tags/project/"/>
    
      <category term="java" scheme="http://tonydeng.github.io/tags/java/"/>
    
      <category term="maven" scheme="http://tonydeng.github.io/tags/maven/"/>
    
  </entry>
  
</feed>
